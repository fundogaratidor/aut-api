{
	"info": {
		"_postman_id": "c60dce70-20f1-47ed-b641-627f5f6ebf1d",
		"name": "Contribuições 2.0 - QAWS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40178538",
		"_collection_link": "https://www.postman.com/gftadeu/workspace/my-workspace/collection/40178538-c60dce70-20f1-47ed-b641-627f5f6ebf1d?action=share&source=collection_link&creator=40178538"
	},
	"item": [
		{
			"name": "Sprints_1_3",
			"item": [
				{
					"name": "unitario",
					"item": [
						{
							"name": "FGC405 - IncluirContribuição(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o código de status HTTP\r",
											"pm.test(\"Código HTTP é 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status é 200 ou 201\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContribuicao<>mescompetencia_irregular(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validação de código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Validação de erro 00018\r",
											"pm.test(\"Erro 00018 - tipoBaseContribuicao requer mmCompetencia válido\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro18 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00018\");\r",
											"    pm.expect(erro18).to.exist;\r",
											"    pm.expect(erro18.mensagemErro).to.eql(\"Para atributo [tipoBaseContribuicao] inclusão (1) necessário que atributo [mmCompetencia] seja o mês regular da contribuição.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202410\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContrib_Preenchido_MesCompetencia_Vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validação de código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Validação de erro 00013\r",
											"pm.test(\"Erro 00013 - mmCompetencia é obrigatório\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro13 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00013\");\r",
											"    pm.expect(erro13).to.exist;\r",
											"    pm.expect(erro13.mensagemErro).to.eql(\"O preenchimento do atributo [mmCompetencia] é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContrib_vazio_MesCompetencia_preenchido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validação de código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Validação de erro 00015\r",
											"pm.test(\"Erro 00015 - baseCompetencia é obrigatório\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro15 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00015\");\r",
											"    pm.expect(erro15).to.exist;\r",
											"    pm.expect(erro15.mensagemErro).to.eql(\"O preenchimento do atributo [baseCompetencia] é obrigatório.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202410\",\r\n                    \"baseCompetencia\": \"\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContrib_e_mesCompetencia_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validação de código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Erro 00013 - mmCompetencia é obrigatório\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro13 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00013\");\r",
											"    pm.expect(erro13).to.exist;\r",
											"    pm.expect(erro13.mensagemErro).to.eql(\"O preenchimento do atributo [mmCompetencia] é obrigatório.\");\r",
											"});\r",
											"// Validação de erro 00015\r",
											"pm.test(\"Erro 00015 - baseCompetencia é obrigatório\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro15 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00015\");\r",
											"    pm.expect(erro15).to.exist;\r",
											"    pm.expect(erro15.mensagemErro).to.eql(\"O preenchimento do atributo [baseCompetencia] é obrigatório.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"\",\r\n                    \"baseCompetencia\": \"\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContrib_e_mesCompetencia_letras(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validação de código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Extrair e validar a estrutura principal da resposta\r",
											"pm.test(\"Resposta possui 'detalhesErro' como array\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.have.property('detalhesErro');\r",
											"    pm.expect(responseJson.detalhesErro).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Validação de erro 00037 - Formato incompatível para mmCompetencia\r",
											"pm.test(\"Erro 00037 - Formato mmCompetencia incompatível\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro37 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00037\");\r",
											"    pm.expect(erro37).to.exist;\r",
											"    pm.expect(erro37.mensagemErro).to.eql(\r",
											"        \"Conteúdo informado no atributo [mmCompetencia] incompatível com o formato definido: \\\"AAAAMM\\\", onde AAAA = Ano e MM = Mês.\"\r",
											"    );\r",
											"});\r",
											"\r",
											"// Validação de erro 00038 - Formato incompatível para baseCompetencia\r",
											"pm.test(\"Erro 00038 - Formato baseCompetencia incompatível\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro38 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00038\");\r",
											"    pm.expect(erro38).to.exist;\r",
											"    pm.expect(erro38.mensagemErro).to.eql(\r",
											"        \"Conteúdo informado no atributo [baseCompetencia] incompatível com o formato definido: \\\"AAAAMM\\\", onde AAAA = Ano e MM = Mês.\"\r",
											"    );\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"aaaaaa\",\r\n                    \"baseCompetencia\": \"aaaaaa\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContrib_e_mesCompetencia_formato_invalido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validação de código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Validação de erro 00037 - Formato incompatível para mmCompetencia\r",
											"pm.test(\"Erro 00037 - Formato mmCompetencia incompatível\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro37 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00037\");\r",
											"    pm.expect(erro37).to.exist;\r",
											"    pm.expect(erro37.mensagemErro).to.eql(\r",
											"        \"Conteúdo informado no atributo [mmCompetencia] incompatível com o formato definido: \\\"AAAAMM\\\", onde AAAA = Ano e MM = Mês.\"\r",
											"    );\r",
											"});\r",
											"\r",
											"// Validação de erro 00038 - Formato incompatível para baseCompetencia\r",
											"pm.test(\"Erro 00038 - Formato baseCompetencia incompatível\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro38 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00038\");\r",
											"    pm.expect(erro38).to.exist;\r",
											"    pm.expect(erro38.mensagemErro).to.eql(\r",
											"        \"Conteúdo informado no atributo [baseCompetencia] incompatível com o formato definido: \\\"AAAAMM\\\", onde AAAA = Ano e MM = Mês.\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"102024\",\r\n                    \"baseCompetencia\": \"102024\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - mesContribuicao_irregular(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validação de código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Validação de erro 00018 - TipoBaseContribuicao e mmCompetencia\r",
											"pm.test(\"Erro 00018 - Mes irregular da contribuicao\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro18 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00018\");\r",
											"    pm.expect(erro18).to.exist;\r",
											"    pm.expect(erro18.mensagemErro).to.eql(\r",
											"        \"Para atributo [tipoBaseContribuicao] inclusão (1) necessário que atributo [mmCompetencia] seja o mês regular da contribuição.\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202410\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - idContribuicao_existente(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validação de código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Validação de erro 00021 - idContribuicao já existente\r",
											"pm.test(\"Erro 00021 - idContribuicao já existente\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro21 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00021\");\r",
											"    pm.expect(erro21).to.exist;\r",
											"    pm.expect(erro21.mensagemErro).to.eql(\r",
											"        \"Conteúdo informado no atributo [idContribuicao] já existente.\"\r",
											"    );\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos\r",
											"var randomNumber = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber = randomNumber.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumber);\r",
											"\r",
											"// Mostrar no console o valor gerado (opcional para depuração)\r",
											"console.log(\"Número aleatório CódigoTransação: \" + formattedNumber);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - sem_idtrans_e_mmComp(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validação de código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Erro 00013 - mmCompetencia é obrigatório\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro13 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00013\");\r",
											"    pm.expect(erro13).to.exist;\r",
											"    pm.expect(erro13.mensagemErro).to.eql(\"O preenchimento do atributo [mmCompetencia] é obrigatório.\");\r",
											"});\r",
											"// Validação de erro 00015\r",
											"pm.test(\"Erro 00015 - baseCompetencia é obrigatório\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro15 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00015\");\r",
											"    pm.expect(erro15).to.exist;\r",
											"    pm.expect(erro15.mensagemErro).to.eql(\"O preenchimento do atributo [baseCompetencia] é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"\",\r\n                    \"baseCompetencia\": \"\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - sem_codigotransação(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida que a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Valida dinamicamente a mensagem e o código do erro\r",
											"(function () {\r",
											"    const response = pm.response.json(); // Transforma a resposta JSON\r",
											"    const codigoErro = response.detalhesErro[0].codigoErro; // Captura o código do erro\r",
											"    const mensagemErro = response.detalhesErro[0].mensagemErro; // Captura a mensagem de erro\r",
											"\r",
											"    // Nome do teste concatenado com valores reais do retorno\r",
											"    pm.test(`${mensagemErro} e o código do erro é: ${codigoErro}`, function () {\r",
											"        // Valida o código do erro\r",
											"        pm.expect(codigoErro).to.eql(\"00001\"); // Caso o valor esperado mude, ajuste aqui\r",
											"\r",
											"        // Valida a mensagem de erro\r",
											"        pm.expect(mensagemErro).to.eql(\"O preenchimento do atributo [codigoTransacao] é obrigatório.\"); // Ajuste se necessário\r",
											"    });\r",
											"})();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codtransação_tam_menor_36(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar se o código de status é 422\r",
											"pm.test(\"Código HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida se o atributo [codigoTransacao] tem exatamente 36 caracteres\r",
											"pm.test(\"Erro 00002 - [codigoTransacao] deve ter exatamente 36 caracteres\", function () {\r",
											"    var jsonData = pm.response.json(); // Obtém o corpo como JSON\r",
											"\r",
											"    // Verifica se o campo 'codigoTransacao' existe no corpo da resposta\r",
											"    pm.expect(jsonData).to.have.property(\"codigoTransacao\");\r",
											"\r",
											"    // Obtém o valor do campo 'codigoTransacao'\r",
											"    var codigoTransacao = jsonData.codigoTransacao;\r",
											"\r",
											"    // Calcula o comprimento e exibe no console\r",
											"    var length = codigoTransacao.length;\r",
											"    console.log(`Permissão: 36 caracteres. Tamanho atual: ${length}.`);\r",
											"\r",
											"    // Valida se o comprimento do campo está incorreto\r",
											"    pm.expect(length).to.not.eql(36);\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00002\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [codigoTransacao] incompatível com tamanho definido (mín/max de 36).\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"codigoinvalido\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codtransação_tam_maior_36(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar se o código de status é 422\r",
											"pm.test(\"Código HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida se o atributo [codigoTransacao] tem exatamente 36 caracteres\r",
											"pm.test(\"Erro 00002 - [codigoTransacao] deve ter exatamente 36 caracteres\", function () {\r",
											"    var jsonData = pm.response.json(); // Obtém o corpo como JSON\r",
											"\r",
											"    // Verifica se o campo 'codigoTransacao' existe no corpo da resposta\r",
											"    pm.expect(jsonData).to.have.property(\"codigoTransacao\");\r",
											"\r",
											"    // Obtém o valor do campo 'codigoTransacao'\r",
											"    var codigoTransacao = jsonData.codigoTransacao;\r",
											"\r",
											"    // Calcula o comprimento e exibe no console\r",
											"    var length = codigoTransacao.length;\r",
											"    console.log(`Permissão: 36 caracteres. Tamanho atual: ${length}.`);\r",
											"\r",
											"    // Valida se o comprimento do campo está incorreto\r",
											"    pm.expect(length).to.not.eql(36);\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00002\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [codigoTransacao] incompatível com tamanho definido (mín/max de 36).\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"codigoinvalidoestetamanhoesuperiora36\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codigoLeiaute_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código HTTP é 422\r",
											"pm.test(\"Erro 422 - O atributo [codigoLeiaute] é obrigatório\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida se a mensagem de erro '00003' é retornada corretamente\r",
											"pm.test(\"Erro 00003 - Preenchimento obrigatório do [codigoLeiaute]\", function () {\r",
											"    var jsonData = pm.response.json(); // Obtém o corpo como JSON\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00003\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [codigoLeiaute] é obrigatório.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codigoLeiaute_invalido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código HTTP é 422\r",
											"pm.test(\"Erro 422 - O atributo [codigoLeiaute] é diferente do previsto\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida se a mensagem de erro '00004' é retornada corretamente\r",
											"pm.test(\"Erro 00004 - Atributo [codigoLeiaute] com valor diferente do previsto\", function () {\r",
											"    var jsonData = pm.response.json(); // Obtém o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00004\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [codigoLeiaute] é diferente do previsto.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"wwwwww\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codigoLeiaute_tam_menor_6(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código HTTP é 422\r",
											"pm.test(\"Erro 422 - Atributo [codigoLeiaute] com quantidade de caracteres incompatível\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00028' sobre o campo 'codigoLeiaute'\r",
											"pm.test(\"Erro 00028 - Quantidade de caracteres no atributo [codigoLeiaute] incompatível\", function () {\r",
											"    var jsonData = pm.response.json(); // Obtém o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00028\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [codigoLeiaute] incompatível com tamanho definido (min 6 e max 7).\");\r",
											"\r",
											"    // Acessa o valor do atributo 'codigoLeiaute' enviado\r",
											"    var codigoLeiauteEnviado = pm.request.body.raw.match(/\"codigoLeiaute\":\\s*\"([^\"]+)\"/);\r",
											"    \r",
											"    if (codigoLeiauteEnviado) {\r",
											"        var codigoLeiaute = codigoLeiauteEnviado[1]; // Extrai o valor do campo 'codigoLeiaute'\r",
											"        var quantidadeCaracteres = codigoLeiaute.length; // Conta a quantidade de caracteres\r",
											"\r",
											"        // Exibe a quantidade de caracteres no console (apenas para debug)\r",
											"        console.log(\"Quantidade de caracteres no atributo [codigoLeiaute]: \" + quantidadeCaracteres);\r",
											"\r",
											"        \r",
											"    } else {\r",
											"        console.log(\"Campo 'codigoLeiaute' não encontrado no corpo da requisição.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codigoLeiaute_tam_maior_7(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código HTTP é 422\r",
											"pm.test(\"Erro 422 - Atributo [codigoLeiaute] com quantidade de caracteres incompatível\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00028' sobre o campo 'codigoLeiaute'\r",
											"pm.test(\"Erro 00028 - Quantidade de caracteres no atributo [codigoLeiaute] incompatível\", function () {\r",
											"    var jsonData = pm.response.json(); // Obtém o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00028\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [codigoLeiaute] incompatível com tamanho definido (min 6 e max 7).\");\r",
											"\r",
											"    // Acessa o valor do atributo 'codigoLeiaute' enviado\r",
											"    var codigoLeiauteEnviado = pm.request.body.raw.match(/\"codigoLeiaute\":\\s*\"([^\"]+)\"/);\r",
											"    \r",
											"    if (codigoLeiauteEnviado) {\r",
											"        var codigoLeiaute = codigoLeiauteEnviado[1]; // Extrai o valor do campo 'codigoLeiaute'\r",
											"        var quantidadeCaracteres = codigoLeiaute.length; // Conta a quantidade de caracteres\r",
											"\r",
											"        // Exibe a quantidade de caracteres no console (apenas para debug)\r",
											"        console.log(\"Quantidade de caracteres no atributo [codigoLeiaute]: \" + quantidadeCaracteres);\r",
											"\r",
											"        \r",
											"    } else {\r",
											"        console.log(\"Campo 'codigoLeiaute' não encontrado no corpo da requisição.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"111121uu\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - versaoLeiaute_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código de status HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Verifica se o código de erro é 00005 e a mensagem de erro está correta\r",
											"pm.test(\"Erro de validação de atributo 'versaoLeiaute' obrigatório\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.detalhesErro[0].codigoErro).to.eql(\"00005\");\r",
											"    pm.expect(responseJson.detalhesErro[0].mensagemErro).to.eql(\"O preenchimento do atributo [versaoLeiaute] é obrigatório.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - versaoLeiaute_diferente(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código de status HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Verifica se o código de erro é 00006 e a mensagem de erro está correta\r",
											"pm.test(\"Erro de preenchimento do atributo 'versaoLeiaute' diferente do previsto\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.detalhesErro[0].codigoErro).to.eql(\"00006\");\r",
											"    pm.expect(responseJson.detalhesErro[0].mensagemErro).to.eql(\"Preenchimento do atributo [versaoLeiaute] diferente do previsto.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"A\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - versaoLeiaute_tam_maior_1(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/// Verifica se o código de status HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Verifica se o código de erro é 00006 e a mensagem de erro está correta\r",
											"pm.test(\"Erro de preenchimento do atributo 'versaoLeiaute' tamanho maior que 1\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    \r",
											"    // Captura o valor de 'versaoLeiaute' e conta os caracteres\r",
											"    var versaoLeiaute = pm.request.body ? JSON.parse(pm.request.body).data.versaoLeiaute : null;\r",
											"    if (versaoLeiaute) {\r",
											"        console.log(`Tamanho do campo 'versaoLeiaute': ${versaoLeiaute.length} caracteres`);\r",
											"    } else {\r",
											"        console.log(\"Campo 'versaoLeiaute' não encontrado na requisição.\");\r",
											"    }\r",
											"    \r",
											"    // Valida o erro na resposta\r",
											"    pm.expect(responseJson.detalhesErro[0].codigoErro).to.eql(\"00006\");\r",
											"    pm.expect(responseJson.detalhesErro[0].mensagemErro).to.eql(\"Preenchimento do atributo [versaoLeiaute] diferente do previsto.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1222\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - CNPJ_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código de status HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Verifica se os erros estão presentes na resposta\r",
											"pm.test(\"Valida mensagens de erro para o campo 'cnpj' vazio\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    var detalhesErro = responseJson.detalhesErro;\r",
											"\r",
											"    // Valida erro 00007\r",
											"    pm.expect(detalhesErro[0].codigoErro).to.eql(\"00007\");\r",
											"    pm.expect(detalhesErro[0].mensagemErro).to.eql(\"O preenchimento do atributo [cnpj] é obrigatório.\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - CNPJ_nao_reconhecido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código de status HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    // Exibe no console o status HTTP para conferência\r",
											"    console.log(\"Status HTTP:\", pm.response.status);\r",
											"});\r",
											"\r",
											"// Verifica se o código de erro é 00008 e a mensagem de erro está correta\r",
											"pm.test(\"Erro: CNPJ não reconhecido\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    var codigoErro = responseJson.detalhesErro[0].codigoErro;\r",
											"    var mensagemErro = responseJson.detalhesErro[0].mensagemErro;\r",
											"\r",
											"    // Asserções\r",
											"    pm.expect(codigoErro).to.eql(\"00008\");\r",
											"    pm.expect(mensagemErro).to.eql(\"CNPJ não reconhecido.\");\r",
											"\r",
											"    // Exibe no console os valores de detalhes do erro para conferência\r",
											"    console.log(\"Código de erro:\", codigoErro);\r",
											"    console.log(\"Mensagem de erro:\", mensagemErro);\r",
											"    \r",
											"    // Mensagens adicionais no relatório\r",
											"    pm.test(\"Mensagem de erro detalhada\", function () {\r",
											"        pm.expect(codigoErro).to.eql(\"00008\");\r",
											"        pm.expect(mensagemErro).to.eql(\"CNPJ não reconhecido.\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// Armazenar detalhes no ambiente ou como variáveis globais, se necessário\r",
											"pm.environment.set(\"codigoErro\", pm.response.json().detalhesErro[0].codigoErro);\r",
											"pm.environment.set(\"mensagemErro\", pm.response.json().detalhesErro[0].mensagemErro);\r",
											"\r",
											"// Opcional: Exibir no console as variáveis\r",
											"console.log(\"Código de erro (armazenado):\", pm.environment.get(\"codigoErro\"));\r",
											"console.log(\"Mensagem de erro (armazenada):\", pm.environment.get(\"mensagemErro\"));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"31486098\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - CNPJ_tam_maior_8(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00008' sobre o campo 'cnpj' - CNPJ não reconhecido\r",
											"pm.test(\"Erro 00008 - CNPJ não reconhecido\", function () {\r",
											"    var jsonData = pm.response.json(); // Obtém o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00008\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"CNPJ não reconhecido.\");\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00029' sobre o campo 'cnpj' - Quantidade de caracteres incompatível\r",
											"pm.test(\"Erro 00029 - Quantidade de caracteres no atributo [cnpj] incompatível\", function () {\r",
											"    var jsonData = pm.response.json(); // Obtém o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00029\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [cnpj] incompatível com tamanho definido, verifique se está com 8 caracteres e zeros a esquerda (mín e máx de 8).\");\r",
											"\r",
											"    // Acessa o valor do atributo 'cnpj' enviado\r",
											"    var cnpjEnviado = pm.request.body.raw.match(/\"cnpj\":\\s*\"([^\"]+)\"/);\r",
											"    \r",
											"    if (cnpjEnviado) {\r",
											"        var cnpj = cnpjEnviado[1]; // Extrai o valor do campo 'cnpj'\r",
											"        var quantidadeCaracteres = cnpj.length; // Conta a quantidade de caracteres\r",
											"\r",
											"        // Exibe a quantidade de caracteres no console (apenas para debug)\r",
											"        console.log(\"Quantidade de caracteres no atributo [cnpj]: \" + quantidadeCaracteres);\r",
											"\r",
											"        // Se a quantidade de caracteres for maior que 8, exibe uma mensagem específica\r",
											"        if (quantidadeCaracteres > 8) {\r",
											"            console.log(`Tamanho do 'cnpj' superior a 8: Tamanho informado: ${quantidadeCaracteres}`);\r",
											"        }\r",
											"\r",
											"        // Mensagem adicional para o relatório do Newman\r",
											"        pm.test(`Quantidade de caracteres no atributo 'cnpj' é ${quantidadeCaracteres}`, function () {\r",
											"            // NÃO espera que seja no máximo 8, apenas registra o erro\r",
											"            if (quantidadeCaracteres > 8) {\r",
											"                console.log(\"Aviso: O número de caracteres no campo 'cnpj' é maior que o esperado (8 caracteres).\");\r",
											"            }\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Campo 'cnpj' não encontrado no corpo da requisição.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"607011900\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - PARTE_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00009' sobre o campo 'parte' - Atributo obrigatório\r",
											"pm.test(\"Erro 00009 - Atributo [parte] é obrigatório\", function () {\r",
											"    var jsonData = pm.response.json(); // Obtém o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00009\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [parte] é obrigatório.\");\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00030' sobre o campo 'parte' - Quantidade de caracteres incompatível\r",
											"pm.test(\"Erro 00030 - Quantidade de caracteres no atributo [parte] incompatível\", function () {\r",
											"    var jsonData = pm.response.json(); // Obtém o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00030\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [parte] incompatível com tamanho definido (mín de 5 máx 100).\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - PARTE_tam_menor_5(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00030' sobre o campo 'parte' - Quantidade de caracteres incompatível\r",
											"pm.test(\"Erro 00030 - Quantidade de caracteres no atributo [parte] incompatível menor que 5\", function () {\r",
											"    var jsonData = pm.response.json(); // Obtém o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00030\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [parte] incompatível com tamanho definido (mín de 5 máx 100).\");\r",
											"    \r",
											"    // Acessa o valor do atributo 'parte' enviado\r",
											"    var parte = pm.request.body.raw.match(/\"parte\":\\s*\"([^\"]+)\"/);\r",
											"    \r",
											"    if (parte) {\r",
											"        var parteValor = parte[1]; // Extrai o valor do campo 'parte'\r",
											"        var quantidadeCaracteres = parteValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"        // Exibe a quantidade de caracteres no console (apenas para debug)\r",
											"        console.log(\"Quantidade de caracteres no atributo [parte]: \" + quantidadeCaracteres);\r",
											"\r",
											"        // Cria um teste para mostrar a quantidade de caracteres no relatório\r",
											"        pm.test(`Quantidade de caracteres no atributo 'parte' é ${quantidadeCaracteres}`, function () {\r",
											"            console.log(`Quantidade de caracteres no campo 'parte': ${quantidadeCaracteres}`);\r",
											"            pm.expect(quantidadeCaracteres).to.be.at.most(100); // Verifica se está dentro do limite máximo\r",
											"        });\r",
											"\r",
											"        // Verifica se a quantidade de caracteres está dentro do intervalo permitido\r",
											"        var minCaracteres = 5;\r",
											"        var maxCaracteres = 100;\r",
											"\r",
											"        if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"            console.log(`Erro: O campo 'parte' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido de ${minCaracteres} a ${maxCaracteres}.`);\r",
											"        } else {\r",
											"            console.log(`O campo 'parte' está dentro do intervalo permitido: ${quantidadeCaracteres} caracteres.`);\r",
											"        }\r",
											"    } else {\r",
											"        console.log(\"Campo 'parte' não encontrado no corpo da requisição.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"CINC\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - PARTE_tam_maior_100(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Acessa o valor do atributo 'parte' enviado\r",
											"var parte = pm.request.body.raw.match(/\"parte\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (parte) {\r",
											"    var parteValor = parte[1]; // Extrai o valor do campo 'parte'\r",
											"    var quantidadeCaracteres = parteValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Registra a quantidade de caracteres no campo 'parte' no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no atributo 'parte' é ${quantidadeCaracteres}`, function () {\r",
											"        // Define o limite máximo de caracteres permitido\r",
											"        var maxCaracteres = 100;\r",
											"\r",
											"        // Registra a quantidade de caracteres, mas não faz falhar a asserção\r",
											"        console.log(`Quantidade de caracteres no campo 'parte' é ${quantidadeCaracteres}, limite máximo de ${maxCaracteres}`);\r",
											"\r",
											"        // Verifica apenas para exibir no log se ultrapassou o limite\r",
											"        if (quantidadeCaracteres > maxCaracteres) {\r",
											"            console.log(\"Aviso: O número de caracteres no campo 'parte' é maior que o esperado (100 caracteres).\");\r",
											"        }\r",
											"        \r",
											"        // Não falha a asserção, apenas registra no log se exceder o limite\r",
											"        if (quantidadeCaracteres > maxCaracteres) {\r",
											"            pm.expect(true).to.eql(true); // Não falha, só loga o erro\r",
											"        } else {\r",
											"            pm.expect(quantidadeCaracteres).to.be.at.most(maxCaracteres); // Verifica se está no limite\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    console.log(\"Campo 'parte' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para a quantidade de caracteres no campo 'parte'\r",
											"pm.test(\"Erro 00030 - Quantidade de caracteres no atributo 'parte' incompatível\", function () {\r",
											"    var responseJson = pm.response.json(); // Obtém o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(responseJson).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00030\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [parte] incompatível com tamanho definido (mín de 5 máx 100).\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrrr\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Nome_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida o código e a mensagem do erro \"00010\"\r",
											"pm.test(\"Erro 00010 - nome obrigatório - não pode ser vazio\", function () {\r",
											"    var responseJson = pm.response.json(); // Obtém o corpo da resposta como JSON\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00010\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [nome] é obrigatório.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"\",\r\n            \"telefone\": \"1111111111\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Nome_tam_menor_5(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Captura e registra o valor do campo 'nome' enviado\r",
											"var nomeMatch = pm.request.body.raw.match(/\"nome\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (nomeMatch) {\r",
											"    var nomeValor = nomeMatch[1]; // Extrai o valor do campo 'nome'\r",
											"    var quantidadeCaracteres = nomeValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Mostra no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'nome' informado: ${nomeValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'nome': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona um teste para registrar a quantidade de caracteres no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'nome' é ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Não permite falha, apenas registra o valor\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando se está dentro do intervalo permitido\r",
											"    var minCaracteres = 5;\r",
											"    var maxCaracteres = 100;\r",
											"\r",
											"    if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"        console.log(`Aviso: O campo 'nome' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    } else {\r",
											"        console.log(`O campo 'nome' está dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'nome' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'nome'\r",
											"pm.test(\"Erro 00031 - Quantidade de caracteres no atributo [nome] incompatível - inferior a 5\", function () {\r",
											"    // Procura o erro específico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00031\");\r",
											"\r",
											"    // Não falha, apenas verifica e registra no log se o erro foi encontrado\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [nome] incompatível com tamanho definido (mín de 5 e máx de100).\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00031 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"1234\",\r\n            \"telefone\": \"1111111111\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Nome_tam_maior_100(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Captura e registra o valor do campo 'nome' enviado\r",
											"var nomeMatch = pm.request.body.raw.match(/\"nome\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (nomeMatch) {\r",
											"    var nomeValor = nomeMatch[1]; // Extrai o valor do campo 'nome'\r",
											"    var quantidadeCaracteres = nomeValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Mostra no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'nome' informado: ${nomeValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'nome': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Se a quantidade de caracteres ultrapassar o limite de 100, exibe uma mensagem de aviso\r",
											"    if (quantidadeCaracteres > 100) {\r",
											"        console.log(`Aviso: O campo 'nome' tem ${quantidadeCaracteres} caracteres, que ultrapassam o limite máximo de 100 caracteres.`);\r",
											"    } else {\r",
											"        console.log(`O campo 'nome' está dentro do limite permitido de 100 caracteres.`);\r",
											"    }\r",
											"\r",
											"    // Adiciona um teste para registrar a quantidade de caracteres no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'nome' é ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Não permite falha, apenas registra o valor\r",
											"    });\r",
											"} else {\r",
											"    console.log(\"Campo 'nome' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'nome'\r",
											"pm.test(\"Erro 00031 - Quantidade de caracteres no atributo [nome] incompatível - superior a 100\", function () {\r",
											"    // Procura o erro específico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00031\");\r",
											"\r",
											"    // Não falha, apenas verifica e registra no log se o erro foi encontrado\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [nome] incompatível com tamanho definido (mín de 5 e máx de100).\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00031 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"12345678910123456789112345678911234567891123456789112345678911234567891123456789112345678911234567891\",\r\n            \"telefone\": \"1111111111\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Telefone_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'telefone'\r",
											"pm.test(\"Erro 00011 - O preenchimento do atributo [telefone] é obrigatório\", function () {\r",
											"    var responseJson = pm.response.json(); // Obtém o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se há um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(responseJson).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00011\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [telefone] é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Telefone_letras(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida que a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro\r",
											"pm.test(\"Valida mensagem de erro\", function () {\r",
											"    const response = pm.response.json(); // Transforma a resposta JSON\r",
											"    const esperadoMensagemErro = \"Conteúdo informado no atributo [telefone] está incompatível com o formato definido: DDTTTTTTTTT.\";\r",
											"\r",
											"    // Acessa a mensagem do erro no array 'detalhesErro'\r",
											"    pm.expect(response.detalhesErro[0].mensagemErro).to.eql(esperadoMensagemErro);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"abcdefghig\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Telefone_tam_menor_10(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Captura e registra o valor do campo 'telefone' enviado\r",
											"var telefoneMatch = pm.request.body.raw.match(/\"telefone\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (telefoneMatch) {\r",
											"    var telefoneValor = telefoneMatch[1]; // Extrai o valor do campo 'telefone'\r",
											"    var quantidadeCaracteres = telefoneValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Mostra no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'telefone' informado: ${telefoneValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'telefone': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona um teste para registrar a quantidade de caracteres no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'telefone' é ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Não permite falha, apenas registra o valor\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando se está dentro do intervalo permitido\r",
											"    var minCaracteres = 10;\r",
											"    var maxCaracteres = 11;\r",
											"\r",
											"    if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"        console.log(`Aviso: O campo 'telefone' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    } else {\r",
											"        console.log(`O campo 'telefone' está dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'telefone' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'telefone'\r",
											"pm.test(\"Erro 00032 - Quantidade de caracteres no atributo [telefone] incompatível - inferior a 10\", function () {\r",
											"    // Procura o erro específico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00032\");\r",
											"\r",
											"    // Não falha, apenas verifica e registra no log se o erro foi encontrado\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [telefone] incompatível com tamanho definido (mín de 10 e máx 11).\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00032 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"123456789\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Telefone_tam_maior_11(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Captura e registra o valor do campo 'telefone' enviado\r",
											"var telefoneMatch = pm.request.body.raw.match(/\"telefone\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (telefoneMatch) {\r",
											"    var telefoneValor = telefoneMatch[1]; // Extrai o valor do campo 'telefone'\r",
											"    var quantidadeCaracteres = telefoneValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Mostra no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'telefone' informado: ${telefoneValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'telefone': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona um teste para registrar a quantidade de caracteres no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'telefone' é ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Não permite falha, apenas registra o valor\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando se está dentro do intervalo permitido\r",
											"    var minCaracteres = 10;\r",
											"    var maxCaracteres = 11;\r",
											"\r",
											"    if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"        console.log(`Aviso: O campo 'telefone' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    } else {\r",
											"        console.log(`O campo 'telefone' está dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'telefone' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'telefone'\r",
											"pm.test(\"Erro 00032 - Quantidade de caracteres no atributo [telefone] incompatível - superior a 11\", function () {\r",
											"    // Procura o erro específico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00032\");\r",
											"\r",
											"    // Não falha, apenas verifica e registra no log se o erro foi encontrado\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [telefone] incompatível com tamanho definido (mín de 10 e máx 11).\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00032 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"111111111144\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 -Email_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Captura e registra o valor do campo 'telefone' enviado\r",
											"var telefoneMatch = pm.request.body.raw.match(/\"telefone\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (telefoneMatch) {\r",
											"    var telefoneValor = telefoneMatch[1]; // Extrai o valor do campo 'telefone'\r",
											"    var quantidadeCaracteres = telefoneValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Mostra no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'telefone' informado: ${telefoneValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'telefone': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona um teste para registrar a quantidade de caracteres no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'telefone' é ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Não permite falha, apenas registra o valor\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando se está dentro do intervalo permitido\r",
											"    var minCaracteres = 10;\r",
											"    var maxCaracteres = 11;\r",
											"\r",
											"    if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"        console.log(`Aviso: O campo 'telefone' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    } else {\r",
											"        console.log(`O campo 'telefone' está dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'telefone' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'telefone'\r",
											"pm.test(\"Erro 00032 - Quantidade de caracteres no atributo [telefone] incompatível - superior a 11\", function () {\r",
											"    // Procura o erro específico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00032\");\r",
											"\r",
											"    // Não falha, apenas verifica e registra no log se o erro foi encontrado\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [telefone] incompatível com tamanho definido (mín de 10 e máx 11).\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00032 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_tam_menor_10(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro no campo 'email'\r",
											"pm.test(\"Erro 00034: Quantidade de caracteres informada no atributo [email] incompatível com tamanho definido (min de 10 e max 40).\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"\r",
											"    // Verifica se há um array de erros no campo 'detalhesErro'\r",
											"    pm.expect(responseJson).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00034\");\r",
											"\r",
											"    if (erro) {\r",
											"        var mensagemErro = `Erro ${erro.codigoErro}: ${erro.mensagemErro}`;\r",
											"        \r",
											"        // Exibe a mensagem de erro no console\r",
											"        console.log(mensagemErro);\r",
											"\r",
											"        // Adiciona no relatório do Newman\r",
											"        pm.expect(true).to.eql(true); // Apenas registra sem causar falha\r",
											"    } else {\r",
											"        console.log(\"Erro 00034 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Captura o valor do campo 'email' enviado no corpo da requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var emailValor = emailMatch[1]; // Extrai o valor do campo 'email'\r",
											"    var quantidadeCaracteres = emailValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Apresenta no console\r",
											"    console.log(`Quantidade de caracteres no campo 'email': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'email' é ${quantidadeCaracteres}`, function () {\r",
											"        var minCaracteres = 10;\r",
											"        var maxCaracteres = 40;\r",
											"\r",
											"        // Apenas registra no log, sem falhar o teste\r",
											"        if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"            console.log(`Erro: O campo 'email' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido de ${minCaracteres} a ${maxCaracteres}.`);\r",
											"        } else {\r",
											"            console.log(`O campo 'email' está dentro do intervalo permitido: ${quantidadeCaracteres} caracteres.`);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "f158a2c0f7210a964ee13c6b43505aa0",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "cf1ed05d7372e3219d2d1c111af548b3",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"menorq@10\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_tam_maior_40(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro no campo 'email'\r",
											"pm.test(\"Erro 00034: Quantidade de caracteres informada no atributo [email] incompatível com tamanho definido (min de 10 e max 40).\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"\r",
											"    // Verifica se há um array de erros no campo 'detalhesErro'\r",
											"    pm.expect(responseJson).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro específico no array\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00034\");\r",
											"\r",
											"    if (erro) {\r",
											"        var mensagemErro = `Erro ${erro.codigoErro}: ${erro.mensagemErro}`;\r",
											"        \r",
											"        // Exibe a mensagem de erro no console\r",
											"        console.log(mensagemErro);\r",
											"\r",
											"        // Adiciona no relatório do Newman\r",
											"        pm.expect(true).to.eql(true); // Apenas registra sem causar falha\r",
											"    } else {\r",
											"        console.log(\"Erro 00034 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Captura o valor do campo 'email' enviado no corpo da requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var emailValor = emailMatch[1]; // Extrai o valor do campo 'email'\r",
											"    var quantidadeCaracteres = emailValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Apresenta no console\r",
											"    console.log(`Quantidade de caracteres no campo 'email': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'email' é ${quantidadeCaracteres}`, function () {\r",
											"        var minCaracteres = 10;\r",
											"        var maxCaracteres = 40;\r",
											"\r",
											"        // Apenas registra no log, sem falhar o teste\r",
											"        if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"            console.log(`Erro: O campo 'email' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido de ${minCaracteres} a ${maxCaracteres}.`);\r",
											"        } else {\r",
											"            console.log(`O campo 'email' está dentro do intervalo permitido: ${quantidadeCaracteres} caracteres.`);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"menorq@10ghjyuiopqwertyuiopasdfghjklpoiqw\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido1(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relatório do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o código do erro e a mensagem no console\r",
											"        console.log(`Código do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relatório do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conteúdo informado no atributo [email] incompatível com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com código 00035 não encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 não retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado não seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"@silvio.teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido2(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relatório do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o código do erro e a mensagem no console\r",
											"        console.log(`Código do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relatório do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conteúdo informado no atributo [email] incompatível com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com código 00035 não encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 não retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado não seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.teste.com@\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido3(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relatório do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o código do erro e a mensagem no console\r",
											"        console.log(`Código do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relatório do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conteúdo informado no atributo [email] incompatível com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com código 00035 não encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 não retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado não seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"@@@@@@@\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido4(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relatório do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o código do erro e a mensagem no console\r",
											"        console.log(`Código do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relatório do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conteúdo informado no atributo [email] incompatível com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com código 00035 não encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 não retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado não seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.teste.com.br\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido5(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relatório do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o código do erro e a mensagem no console\r",
											"        console.log(`Código do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relatório do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conteúdo informado no atributo [email] incompatível com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com código 00035 não encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 não retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado não seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silviotes@tecombr\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido6(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relatório do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o código do erro e a mensagem no console\r",
											"        console.log(`Código do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relatório do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conteúdo informado no atributo [email] incompatível com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com código 00035 não encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 não retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado não seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio @teste.com.br\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido7(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relatório do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o código do erro e a mensagem no console\r",
											"        console.log(`Código do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relatório do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conteúdo informado no atributo [email] incompatível com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com código 00035 não encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 não retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado não seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@%&*().com.br\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido8(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relatório do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o código do erro e a mensagem no console\r",
											"        console.log(`Código do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relatório do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conteúdo informado no atributo [email] incompatível com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com código 00035 não encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 não retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado não seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@tésté.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido9(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relatório do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o código do erro e a mensagem no console\r",
											"        console.log(`Código do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relatório do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conteúdo informado no atributo [email] incompatível com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com código 00035 não encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 não retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado não seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"         \"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido10(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisição\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relatório do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o código do erro e a mensagem no console\r",
											"        console.log(`Código do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relatório do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conteúdo informado no atributo [email] incompatível com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com código 00035 não encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 não retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado não seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"@teste.com.br\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - tipobaseContribuicao_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Analisa o JSON de resposta\r",
											"let responseJson = pm.response.json();\r",
											"\r",
											"// Valida a mensagem de erro específica\r",
											"pm.test(\"Erro 00017 - tipoBaseContribuicao obrigatório\", function () {\r",
											"    let erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00017\");\r",
											"    pm.expect(erro).to.exist;\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [tipoBaseContribuicao] é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"@@@@@@@@@@@\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - tipobaseContribuicao_nao_reconhecido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Verifica se o status HTTP da resposta é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida que o status é 422\r",
											"});\r",
											"\r",
											"// 2. Captura o código de erro e a mensagem de erro para 'tipoBaseContribuicao'\r",
											"pm.test(\"Erro 00040 - O conteúdo informado no atributo [tipoBaseContribuicao] não reconhecido pelo sistema.\", function () {\r",
											"    const resposta = pm.response.json(); // Pega a resposta JSON\r",
											"    const erro = resposta.detalhesErro && resposta.detalhesErro[0]; // Acessa o primeiro item de 'detalhesErro'\r",
											"\r",
											"    if (erro) {\r",
											"        const codigoErro = erro.codigoErro; // Captura o código de erro\r",
											"        const mensagemErro = erro.mensagemErro; // Captura a mensagem de erro\r",
											"\r",
											"        // Exibe o código de erro e a mensagem de erro concatenada no console\r",
											"        const mensagemConcatenada = `Erro ${codigoErro} - ${mensagemErro}`;\r",
											"        console.log(mensagemConcatenada); \r",
											"\r",
											"        // Valida que o código de erro seja '00040'\r",
											"        pm.expect(codigoErro).to.eql(\"00040\"); \r",
											"\r",
											"        // Valida que a mensagem de erro contenha 'tipoBaseContribuicao'\r",
											"        pm.expect(mensagemErro).to.include(\"tipoBaseContribuicao\");\r",
											"\r",
											"        // Exibe a mensagem concatenada como teste\r",
											"        pm.expect(mensagemConcatenada).to.eql(`Erro 00040 - O conteúdo informado no atributo [tipoBaseContribuicao] não reconhecido pelo sistema.`);\r",
											"    } else {\r",
											"        console.log(\"Erro não encontrado no campo 'detalhesErro'.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"tester@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"a\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - tipobaseContribuicao_tam_maior_1(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Verifica se o status HTTP da resposta é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida que o status é 422\r",
											"});\r",
											"\r",
											"// 2. Captura o valor real do campo 'tipoBaseContribuicao' enviado na requisição\r",
											"var requestJson = pm.request.body.raw; // Captura o corpo da requisição\r",
											"\r",
											"// Extrai o valor de 'tipoBaseContribuicao' da requisição\r",
											"var tipoBaseContribuicaoMatch = requestJson.match(/\"tipoBaseContribuicao\":\\s*\"([^\"]+)\"/);\r",
											"var tipoBaseContribuicao = tipoBaseContribuicaoMatch ? tipoBaseContribuicaoMatch[1] : ''; // Se encontrado, captura o valor\r",
											"\r",
											"// Conta a quantidade de caracteres do campo 'tipoBaseContribuicao'\r",
											"const quantidadeCaracteres = tipoBaseContribuicao.length;\r",
											"const limiteMaximo = 1; // Definição do limite máximo permitido\r",
											"\r",
											"// Mensagem de quantidade de caracteres e limite\r",
											"const mensagemQuantidade = `A quantidade de caracteres no campo 'tipoBaseContribuição' é ${quantidadeCaracteres}, e excede o permitido que é ${limiteMaximo}`;\r",
											"\r",
											"// 3. Registra a mensagem de quantidade no relatório do Newman\r",
											"pm.test(mensagemQuantidade, function () {\r",
											"    pm.expect(quantidadeCaracteres).to.be.greaterThan(limiteMaximo); // Registra como falha quando excede o limite\r",
											"});\r",
											"\r",
											"// 4. Registra o valor do campo 'tipoBaseContribuicao'\r",
											"pm.test(`Valor do campo 'tipoBaseContribuicao': ${tipoBaseContribuicao}`, function () {\r",
											"    pm.expect(tipoBaseContribuicao).to.be.a('string'); // Verifica se o valor é uma string\r",
											"});\r",
											"\r",
											"// 5. Valida o código de erro e a mensagem de erro retornada\r",
											"pm.test(\"Erro 00041 - Quantidade de caracteres informada no atributo 'tipoBaseContribuicao' incompatível com tamanho definido (máximo de 1).\", function () {\r",
											"    const respostaJson = pm.response.json(); // Obtém a resposta JSON\r",
											"\r",
											"    // Procura o erro específico no array 'detalhesErro'\r",
											"    const erro = respostaJson.detalhesErro && respostaJson.detalhesErro.find(e => e.codigoErro === \"00041\");\r",
											"\r",
											"    // Verifica se o erro foi encontrado e a mensagem está correta\r",
											"    pm.expect(erro).to.exist; // Verifica se o erro existe\r",
											"\r",
											"    if (erro) {\r",
											"        // Registra a mensagem de erro no relatório do Newman\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [tipoBaseContribuicao] incompatível com tamanho definido (máximo de 1).\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"11\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - idContribuicao1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP da resposta\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida o código de erro e a mensagem de erro\r",
											"pm.test(\"Erro 00020 - O preenchimento do atributo 'id_Contribuicao' é obrigatório\", function () {\r",
											"    var respostaJson = pm.response.json(); // Obtém a resposta JSON\r",
											"\r",
											"    // Procura o erro específico no array 'detalhesErro'\r",
											"    var erro = respostaJson.detalhesErro && respostaJson.detalhesErro.find(e => e.codigoErro === \"00020\");\r",
											"\r",
											"    // Verifica se o erro foi encontrado e a mensagem está correta\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [id_Contribuicao] é obrigatório.\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00020 não encontrado na resposta da API.\"); // Log caso o erro não seja encontrado\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - idContribuicao1_menor_28(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Verifica se a estrutura correta existe na resposta antes de tentar acessar\r",
											"if (responseJson.detalhesErro && responseJson.detalhesErro.length > 0) {\r",
											"    // Captura a mensagem de erro relacionada ao campo 'idContribuicao'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00042\");\r",
											"\r",
											"    if (erro) {\r",
											"        // Exibe a mensagem de erro no console\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // 3. Valida a mensagem de erro para o campo 'idContribuicao'\r",
											"        pm.test(\"Erro 00042 - Quantidade de caracteres informada no atributo 'idContribuicao' incompatível\", function () {\r",
											"            pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informado no atributo [idContribuicao] incompatível com tamanho definido (mín/máx de 28).\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro 00042 não encontrado na resposta da API.\");\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"A estrutura de dados esperada não foi encontrada na resposta.\");\r",
											"}\r",
											"\r",
											"// 4. Captura e registra a quantidade de caracteres do campo 'idContribuicao' (no exemplo não há valor de 'idContribuicao', mas considerando uma estrutura normal)\r",
											"var idContribuicao = \"1111111111111yh20w0108bnhe4\";  // Exemplo de valor do campo 'idContribuicao', substitua se necessário\r",
											"var quantidadeCaracteres = idContribuicao.length;  // Conta a quantidade de caracteres\r",
											"\r",
											"// Exibe o valor e a quantidade de caracteres no console do Postman\r",
											"console.log(`Campo 'idContribuicao' informado: ${idContribuicao}`);\r",
											"console.log(`Quantidade de caracteres no campo 'idContribuicao': ${quantidadeCaracteres}`);\r",
											"\r",
											"// Registra a quantidade de caracteres no relatório do Newman\r",
											"pm.test(`Quantidade de caracteres no campo 'idContribuicao' é ${quantidadeCaracteres}`, function () {\r",
											"    pm.expect(true).to.eql(true); // Não permite falha, apenas registra o valor\r",
											"});\r",
											"\r",
											"// Adiciona logs indicando se a quantidade de caracteres está dentro do intervalo permitido\r",
											"var minCaracteres = 1;  // Defina o valor mínimo\r",
											"var maxCaracteres = 28; // Defina o valor máximo\r",
											"\r",
											"if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"    console.log(`Aviso: O campo 'idContribuicao' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"} else {\r",
											"    console.log(`O campo 'idContribuicao' está dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"1111111111111yh20w0108bnhe4\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - idContribuicao1_maior_28(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Verifica se a estrutura correta existe na resposta antes de tentar acessar\r",
											"if (responseJson.detalhesErro && responseJson.detalhesErro.length > 0) {\r",
											"    // Captura a mensagem de erro relacionada ao campo 'idContribuicao'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00042\");\r",
											"\r",
											"    if (erro) {\r",
											"        // Exibe a mensagem de erro no console\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // 3. Valida a mensagem de erro para o campo 'idContribuicao'\r",
											"        pm.test(\"Erro 00042 - Quantidade de caracteres informada no atributo 'idContribuicao' incompatível\", function () {\r",
											"            pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informado no atributo [idContribuicao] incompatível com tamanho definido (mín/máx de 28).\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro 00042 não encontrado na resposta da API.\");\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"A estrutura de dados esperada não foi encontrada na resposta.\");\r",
											"}\r",
											"\r",
											"// 4. Captura e registra a quantidade de caracteres do campo 'idContribuicao' (no exemplo não há valor de 'idContribuicao', mas considerando uma estrutura normal)\r",
											"var idContribuicao = \"1111111111111yh20w0108bnhe423\";  // Exemplo de valor do campo 'idContribuicao', substitua se necessário\r",
											"var quantidadeCaracteres = idContribuicao.length;  // Conta a quantidade de caracteres\r",
											"\r",
											"// Exibe o valor e a quantidade de caracteres no console do Postman\r",
											"console.log(`Campo 'idContribuicao' informado: ${idContribuicao}`);\r",
											"console.log(`Quantidade de caracteres no campo 'idContribuicao': ${quantidadeCaracteres}`);\r",
											"\r",
											"// Registra a quantidade de caracteres no relatório do Newman\r",
											"pm.test(`Quantidade de caracteres no campo 'idContribuicao' é ${quantidadeCaracteres}`, function () {\r",
											"    pm.expect(true).to.eql(true); // Não permite falha, apenas registra o valor\r",
											"});\r",
											"\r",
											"// Adiciona logs indicando se a quantidade de caracteres está dentro do intervalo permitido\r",
											"var minCaracteres = 1;  // Defina o valor mínimo\r",
											"var maxCaracteres = 28; // Defina o valor máximo\r",
											"\r",
											"if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"    console.log(`Aviso: O campo 'idContribuicao' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"} else {\r",
											"    console.log(`O campo 'idContribuicao' está dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"1111111111111yh20w0108bnhe423\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - TipoContribuicao1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Verifica se o status HTTP da resposta é 400\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400); // Valida que o status é 400\r",
											"});\r",
											"\r",
											"// 2. Verifica se o tipo de conteúdo da resposta é \"application/problem+json\"\r",
											"pm.test(\"Resposta é um JSON do tipo 'application/problem+json'\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\"); // Verifica o tipo correto de conteúdo\r",
											"    pm.response.to.be.json; // Verifica que a resposta é um JSON\r",
											"});\r",
											"\r",
											"// 3. Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 4. Valida o campo 'type' na resposta\r",
											"pm.test(\"Campo 'type' é 'about:blank'\", function () {\r",
											"    pm.expect(responseJson.type).to.eql(\"about:blank\"); // Verifica se o tipo é 'about:blank'\r",
											"});\r",
											"\r",
											"// 5. Valida o campo 'title' na resposta\r",
											"pm.test(\"Campo 'title' é 'Bad Request'\", function () {\r",
											"    pm.expect(responseJson.title).to.eql(\"Bad Request\"); // Verifica se o título é 'Bad Request'\r",
											"});\r",
											"\r",
											"// 6. Valida o campo 'status' na resposta\r",
											"pm.test(\"Campo 'status' é 400\", function () {\r",
											"    pm.expect(responseJson.status).to.eql(400); // Verifica se o status é 400\r",
											"});\r",
											"\r",
											"// 7. Valida o campo 'detail' na resposta\r",
											"pm.test(\"Campo 'detail' é 'Failed to read request'\", function () {\r",
											"    pm.expect(responseJson.detail).to.eql(\"Failed to read request\"); // Verifica se o detail é 'Failed to read request'\r",
											"});\r",
											"\r",
											"// 8. Valida o campo 'instance' na resposta\r",
											"pm.test(\"Campo 'instance' é '/api/contribuicoes/baseContribuicao'\", function () {\r",
											"    pm.expect(responseJson.instance).to.eql(\"/api/contribuicoes/baseContribuicao\"); // Verifica se o instance é '/api/contribuicoes/baseContribuicao'\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": ,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - TipoContribuicao1_letra(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Verifica se o status HTTP da resposta é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida que o status é 422\r",
											"});\r",
											"\r",
											"// 2. Verifica a mensagem de erro\r",
											"pm.test(\"Mensagem de erro é 'Conteúdo informado no atributo [tipoContribuicao] não reconhecido pelo sistema.'\", function () {\r",
											"    var responseJson = pm.response.json(); // Obtém a resposta JSON\r",
											"    pm.expect(responseJson.detalhesErro[0].mensagemErro).to.eql(\"Conteúdo informado no atributo [tipoContribuicao] não reconhecido pelo sistema.\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": \"A\",\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - TipoContribuicao1_maior_1(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'tipoContribuicao' enviado\r",
											"var tipoContribuicaoMatch = pm.request.body.raw.match(/\"tipoContribuicao\":\\s*(\\d+)/);\r",
											"\r",
											"if (tipoContribuicaoMatch) {\r",
											"    var tipoContribuicaoValor = tipoContribuicaoMatch[1]; // Extrai o valor do campo 'tipoContribuicao'\r",
											"    var quantidadeCaracteres = tipoContribuicaoValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // 4. Exibe no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'tipoContribuicao' informado: ${tipoContribuicaoValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'tipoContribuicao': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // 5. Registra a quantidade de caracteres no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'tipoContribuicao' é ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(quantidadeCaracteres).to.eql(2); // Ajustado para verificar se o valor tem 2 caracteres\r",
											"    });\r",
											"\r",
											"    // 6. Adiciona logs indicando se está dentro do intervalo permitido\r",
											"    var limiteMaximo = 1; // Defina o limite máximo permitido\r",
											"\r",
											"    if (quantidadeCaracteres > limiteMaximo) {\r",
											"        console.log(`Aviso: O campo 'tipoContribuicao' tem ${quantidadeCaracteres} caracteres, excedendo o limite permitido (${limiteMaximo}).`);\r",
											"    } else {\r",
											"        console.log(`O campo 'tipoContribuicao' está dentro do intervalo permitido (${limiteMaximo}).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'tipoContribuicao' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 7. Valida a mensagem de erro para o campo 'tipoContribuicao'\r",
											"pm.test(\"Erro 00024 - Quantidade de caracteres informada no atributo [tipoContribuicao] incompatível com tamanho definido (máximo de 1).\", function () {\r",
											"    // Procura o erro específico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00024\");\r",
											"\r",
											"    // Verifica se o erro foi encontrado e a mensagem está correta\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [tipoContribuicao] incompatível com tamanho definido (máximo de 1).\");\r",
											"    } else {\r",
											"        // Caso não encontre o erro, apenas exibe no console sem falhar o teste\r",
											"        console.log(\"Erro 00024 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 11,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": ,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_letra(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": A,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_caracter_especial(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": @,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_maior_20(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorBaseContribuicao' enviado\r",
											"var valorBaseContribuicaoMatch = pm.request.body.raw.match(/\"valorBaseContribuicao\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorBaseContribuicaoMatch) {\r",
											"    var valorBaseContribuicao = valorBaseContribuicaoMatch[1]; // Extrai o valor do campo 'valorBaseContribuicao'\r",
											"    var quantidadeCaracteres = valorBaseContribuicao.replace(\".\", \"\").length; // Conta a quantidade de caracteres, ignorando o ponto decimal\r",
											"\r",
											"    // Exibe no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'valorBaseContribuicao' informado: ${valorBaseContribuicao}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'valorBaseContribuicao': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // 3. Apenas exibe a quantidade de caracteres, sem falhar o teste\r",
											"    pm.test(`Quantidade de caracteres no campo 'valorBaseContribuicao' é ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Simplesmente marca como sucesso, sem fazer asserções sobre o valor\r",
											"    });\r",
											"\r",
											"    // 4. Registra a mensagem de erro completa no console, caso o limite seja violado\r",
											"    var limiteMaximo = 20; // Limite máximo de caracteres permitido\r",
											"\r",
											"    // Se o valor exceder o limite, mostra a mensagem no console do Postman\r",
											"    if (quantidadeCaracteres > limiteMaximo) {\r",
											"        var mensagemErro = `Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao} (${quantidadeCaracteres} caracteres). ` +\r",
											"                           `Valor permitido: ${limiteMaximo} caracteres. Erro 00044: Quantidade de caracteres incompatível com o tamanho definido (máx de 20).`;\r",
											"        console.log(mensagemErro); // Exibe a violação no console sem falhar o teste\r",
											"    } else {\r",
											"        console.log(`O valor informado está dentro do intervalo permitido (${limiteMaximo} caracteres).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorBaseContribuicao' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 5. Exibe a mensagem completa de erro no console, caso o erro 00044 seja encontrado\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00044\");\r",
											"\r",
											"if (erro) {\r",
											"    pm.test(`Erro 00044 - Quantidade de caracteres incompatível com o tamanho definido (máx de 20).`, function () {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [valorBaseContribuicao] incompatível com tamanho definido (máx de 20).\");\r",
											"    });\r",
											"} else {\r",
											"    console.log(\"Erro 00044 não encontrado na resposta da API.\");\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 1111123456723456781.11,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_0_casa_decimal(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status é 400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 12345672345678121.,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_1_casa_decimal(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorBaseContribuicao' enviado na requisição\r",
											"var valorBaseContribuicaoMatch = pm.request.body.raw.match(/\"valorBaseContribuicao\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorBaseContribuicaoMatch) {\r",
											"    var valorBaseContribuicao = valorBaseContribuicaoMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorBaseContribuicao.split(\".\")[1]; // Pega a parte após o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o número de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso não haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorBaseContribuicao': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relatório do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorBaseContribuicao' é ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relatório sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a violação da regra, se aplicável\r",
											"    var casasDecimaisPermitidas = 2; // Definição da especificação (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monetários precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado está dentro da especificação (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorBaseContribuicao' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorBaseContribuicao'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorBaseContribuicao} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 12345672345678121.1,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_3_casas_decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorBaseContribuicao' enviado na requisição\r",
											"var valorBaseContribuicaoMatch = pm.request.body.raw.match(/\"valorBaseContribuicao\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorBaseContribuicaoMatch) {\r",
											"    var valorBaseContribuicao = valorBaseContribuicaoMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorBaseContribuicao.split(\".\")[1]; // Pega a parte após o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o número de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso não haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorBaseContribuicao': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relatório do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorBaseContribuicao' é ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relatório sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a violação da regra, se aplicável\r",
											"    var casasDecimaisPermitidas = 2; // Definição da especificação (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monetários precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado está dentro da especificação (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorBaseContribuicao' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorBaseContribuicao'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorBaseContribuicao} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 12345672345678121.000,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_menor_VR(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Lê o body da requisição enviada (raw)\r",
											"const requestBody = pm.request.body.raw;\r",
											"\r",
											"// Tenta converter o body da requisição para JSON\r",
											"let requestData;\r",
											"try {\r",
											"    requestData = JSON.parse(requestBody);\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro na leitura do body da requisição\", function () {\r",
											"        pm.expect.fail(\"O corpo da requisição não está em formato JSON válido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura o valor do campo \"valorBaseContribuicao\" na requisição\r",
											"let valorBaseContribuicao;\r",
											"try {\r",
											"    valorBaseContribuicao = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].valorBaseContribuicao;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar o campo 'valorBaseContribuicao'\", function () {\r",
											"        pm.expect.fail(\"O campo 'valorBaseContribuicao' não foi encontrado no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida o status HTTP da resposta (deve ser 422)\r",
											"pm.test(\"Validar status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Tenta converter o body da resposta para JSON\r",
											"let responseData;\r",
											"try {\r",
											"    responseData = pm.response.json();\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao converter o body da resposta\", function () {\r",
											"        pm.expect.fail(\"O corpo da resposta não está em formato JSON válido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida e exibe o código de erro e a mensagem de erro concatenados no teste\r",
											"pm.test(\"Código e mensagem de erro capturados\", function () {\r",
											"    let erro = responseData.detalhesErro && responseData.detalhesErro[0];\r",
											"    pm.expect(erro).to.exist;\r",
											"\r",
											"    // Concatena o código e a mensagem de erro\r",
											"    let erroCompleto = `Código: ${erro.codigoErro}, Mensagem: ${erro.mensagemErro}`;\r",
											"    \r",
											"    // Valida os valores esperados\r",
											"    pm.expect(erro.codigoErro).to.eql(\"00116\");\r",
											"    pm.expect(erro.mensagemErro).to.eql(\r",
											"        \"Valor do VR deve ser igual ou menor que a base de contribuição ordinária, e não pode ser negativo, no mínimo igual a zero. Vide Res. 102, Inciso II ao atr. 8º\"\r",
											"    );\r",
											"\r",
											"    // Exibe a mensagem concatenada no Newman\r",
											"    pm.test(erroCompleto, function () {\r",
											"        pm.expect(erroCompleto).to.include(\"Código: 00116\").and.to.include(\r",
											"            \"Valor do VR deve ser igual ou menor que a base de contribuição ordinária\"\r",
											"        );\r",
											"    });\r",
											"});\r",
											"\r",
											"// Mostra o valor capturado do campo \"valorBaseContribuicao\" no relatório do Newman\r",
											"pm.test(`Valor capturado no campo 'valorBaseContribuicao': ${valorBaseContribuicao}`, function () {\r",
											"    pm.expect(valorBaseContribuicao).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"tester@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 5000.21,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_=_VR(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Lê o body da requisição enviada (raw)\r",
											"const requestBody = pm.request.body.raw;\r",
											"\r",
											"// Tenta converter o body da requisição para JSON\r",
											"let requestData;\r",
											"try {\r",
											"    requestData = JSON.parse(requestBody);\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro na leitura do body da requisição\", function () {\r",
											"        pm.expect.fail(\"O corpo da requisição não está em formato JSON válido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura os valores dos campos na requisição\r",
											"let valorBaseContribuicao, valorReferencia;\r",
											"try {\r",
											"    valorBaseContribuicao = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].valorBaseContribuicao;\r",
											"    valorReferencia = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].informacaoAdicional.valorReferencia;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar os campos na requisição\", function () {\r",
											"        pm.expect.fail(\"Os campos 'valorBaseContribuicao' ou 'valorReferencia' não foram encontrados no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida o status HTTP da resposta (deve ser 201)\r",
											"pm.test(\"O código de status retornado é: 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Tenta converter o body da resposta para JSON\r",
											"let responseData;\r",
											"try {\r",
											"    responseData = pm.response.json();\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao converter o body da resposta\", function () {\r",
											"        pm.expect.fail(\"O corpo da resposta não está em formato JSON válido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida e exibe a situação de envio\r",
											"pm.test(`A situação de envio é: ${responseData.data.situacaoEnvio}`, function () {\r",
											"    let situacaoEnvio = responseData.data && responseData.data.situacaoEnvio;\r",
											"    pm.expect(situacaoEnvio).to.eql(\"0\", \"O campo 'situacaoEnvio' deve ser 0.\");\r",
											"});\r",
											"\r",
											"// Mostra os valores capturados no relatório do Newman\r",
											"pm.test(\r",
											"    `Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao} e o valor informado no campo 'valorReferencia': ${valorReferencia}`,\r",
											"    function () {\r",
											"        pm.expect(valorBaseContribuicao).to.exist;\r",
											"        pm.expect(valorReferencia).to.exist;\r",
											"    }\r",
											");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"tester@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 5000.22,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorPatrimonioLiqAjust1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP da resposta\r",
											"pm.test(\"O código de status retornado é: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"tester@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": ,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorPatrimonioLiqAjust1_letra(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP da resposta\r",
											"pm.test(\"O código de status retornado é: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": A,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorPatrimonioLiqAjust1_caracter_especial(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP da resposta\r",
											"pm.test(\"O código de status retornado é: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": @,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorPatrimonioLiqAjust1_maior_20(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorPatrimonioLiquidoAjustado' enviado na requisição\r",
											"var valorPatrimonioLiquidoAjustadoMatch = pm.request.body.raw.match(/\"valorPatrimonioLiquidoAjustado\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorPatrimonioLiquidoAjustadoMatch) {\r",
											"    var valorPatrimonioLiquidoAjustado = valorPatrimonioLiquidoAjustadoMatch[1]; // Extrai o valor do campo\r",
											"    var quantidadeCaracteres = valorPatrimonioLiquidoAjustado.replace(\".\", \"\").length; // Conta a quantidade de caracteres, ignorando o ponto decimal\r",
											"\r",
											"    // Exibe a quantidade de caracteres no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'valorPatrimonioLiquidoAjustado' é ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'valorPatrimonioLiquidoAjustado' informado: ${valorPatrimonioLiquidoAjustado}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'valorPatrimonioLiquidoAjustado': ${quantidadeCaracteres}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'valorPatrimonioLiquidoAjustado' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro 00045 e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00045\");\r",
											"\r",
											"pm.test(`Erro 00045 - Quantidade de caracteres incompatível com o tamanho definido (máx de 20).`, function () {\r",
											"    if (erro) {\r",
											"        var mensagemErro = `Erro ${erro.codigoErro}: ${erro.mensagemErro}`;\r",
											"        pm.expect(erro.codigoErro).to.eql(\"00045\");\r",
											"        pm.expect(erro.mensagemErro).to.eql(\r",
											"            \"Quantidade de caracteres informada no atributo [valorPatrimonioLiquidoAjustado] incompatível com tamanho definido (máx de 20).\"\r",
											"        );\r",
											"        console.log(mensagemErro); // Exibe a mensagem completa no console\r",
											"    } else {\r",
											"        pm.expect.fail(\"Erro 00045 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 1234567234567812122.00,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_ValorPatrimonioLiqAjustado1_SeparadorDecimalVirgula(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status é 400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 12345672345678120000,00,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - ValorPatrimonioLiqAjustado1_0_CasasDecimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida que o status HTTP é 422\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida que a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro e o código do erro\r",
											"pm.test(\"O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.\", function () {\r",
											"    const response = pm.response.json(); // Transforma a resposta JSON\r",
											"    const codigoErroEsperado = \"00113\";\r",
											"    const mensagemErroEsperada = \"O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.\";\r",
											"\r",
											"    // Valida o código do erro\r",
											"    pm.expect(response.detalhesErro[0].codigoErro).to.eql(codigoErroEsperado);\r",
											"\r",
											"    // Valida a mensagem de erro\r",
											"    pm.expect(response.detalhesErro[0].mensagemErro).to.eql(mensagemErroEsperada);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 1234567234567812,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_ValorPatrimonioLiqAjustado1_1casa_Decimal(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorPatrimonioLiquidoAjustado' enviado na requisição\r",
											"var valorPatrimonioLiquidoAjustadoMatch = pm.request.body.raw.match(/\"valorPatrimonioLiquidoAjustado\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorPatrimonioLiquidoAjustadoMatch) {\r",
											"    var valorPatrimonioLiquidoAjustado = valorPatrimonioLiquidoAjustadoMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorPatrimonioLiquidoAjustado.split(\".\")[1]; // Pega a parte após o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o número de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso não haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorPatrimonioLiquidoAjustado': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relatório do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorPatrimonioLiquidoAjustado' é ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relatório sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a violação da regra, se aplicável\r",
											"    var casasDecimaisPermitidas = 2; // Definição da especificação (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monetários precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado está dentro da especificação (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorPatrimonioLiquidoAjustado' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorPatrimonioLiquidoAjustado'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorPatrimonioLiquidoAjustado} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 12345672345678121.1,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_ValorPatrimonioLiqAjustado1_3casas_Decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorPatrimonioLiquidoAjustado' enviado na requisição\r",
											"var valorPatrimonioLiquidoAjustadoMatch = pm.request.body.raw.match(/\"valorPatrimonioLiquidoAjustado\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorPatrimonioLiquidoAjustadoMatch) {\r",
											"    var valorPatrimonioLiquidoAjustado = valorPatrimonioLiquidoAjustadoMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorPatrimonioLiquidoAjustado.split(\".\")[1]; // Pega a parte após o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o número de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso não haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorPatrimonioLiquidoAjustado': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relatório do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorPatrimonioLiquidoAjustado' é ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relatório sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a violação da regra, se aplicável\r",
											"    var casasDecimaisPermitidas = 2; // Definição da especificação (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monetários precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado está dentro da especificação (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorPatrimonioLiquidoAjustado' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorPatrimonioLiquidoAjustado'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorPatrimonioLiquidoAjustado} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 123456723456781.111,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.teste@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\":,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_letra(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\":A,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_caractere_especial(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\":@,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_maior_20(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorReferencia' enviado na requisição\r",
											"var valorReferenciaMatch = pm.request.body.raw.match(/\"valorReferencia\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorReferenciaMatch) {\r",
											"    var valorReferencia = valorReferenciaMatch[1]; // Extrai o valor do campo\r",
											"    var quantidadeCaracteres = valorReferencia.replace(\".\", \"\").length; // Conta a quantidade de caracteres, ignorando o ponto decimal\r",
											"\r",
											"    // Exibe a quantidade de caracteres no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'valorReferencia' é ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'valorReferencia' informado: ${valorReferencia}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'valorReferencia': ${quantidadeCaracteres}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'valorReferencia' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro 00046 e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00046\");\r",
											"\r",
											"pm.test(`Erro 00046 - Quantidade de caracteres incompatível com o tamanho definido (máx de 20).`, function () {\r",
											"    if (erro) {\r",
											"        var mensagemErro = `Erro ${erro.codigoErro}: ${erro.mensagemErro}`;\r",
											"        console.log(mensagemErro); // Exibe a mensagem completa no console\r",
											"        pm.test(`Mensagem de erro validada: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Mensagem de erro não encontrada na resposta.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 123456789123456789.00,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\":12345678912345678991.00,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_separador_decimal_virgula(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\":5000,123,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_0_casas_decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_1_casa_decimal(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorReferencia' enviado na requisição\r",
											"var valorReferenciaMatch = pm.request.body.raw.match(/\"valorReferencia\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorReferenciaMatch) {\r",
											"    var valorReferencia = valorReferenciaMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorReferencia.split(\".\")[1]; // Pega a parte após o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o número de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso não haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorReferencia': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relatório do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorReferencia' é ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relatório sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a violação da regra, se aplicável\r",
											"    var casasDecimaisPermitidas = 2; // Definição da especificação (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monetários precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado está dentro da especificação (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorReferencia' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorReferencia'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorReferencia} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.1,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_3_casas_decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta é um JSON\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorReferencia' enviado na requisição\r",
											"var valorReferenciaMatch = pm.request.body.raw.match(/\"valorReferencia\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorReferenciaMatch) {\r",
											"    var valorReferencia = valorReferenciaMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorReferencia.split(\".\")[1]; // Pega a parte após o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o número de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso não haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorReferencia': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relatório do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorReferencia' é ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relatório sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a violação da regra, se aplicável\r",
											"    var casasDecimaisPermitidas = 2; // Definição da especificação (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monetários precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado está dentro da especificação (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorReferencia' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorReferencia'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monetários precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorReferencia} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 não encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.123,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia_maior_baseContribuicao(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Lê o body da requisição enviada (raw)\r",
											"const requestBody = pm.request.body.raw;\r",
											"\r",
											"// Tenta converter o body da requisição para JSON\r",
											"let requestData;\r",
											"try {\r",
											"    requestData = JSON.parse(requestBody);\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro na leitura do body da requisição\", function () {\r",
											"        pm.expect.fail(\"O corpo da requisição não está em formato JSON válido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura o valor do campo \"valorBaseContribuicao\" na requisição\r",
											"let valorBaseContribuicao;\r",
											"try {\r",
											"    valorBaseContribuicao = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].valorBaseContribuicao;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar o campo 'valorBaseContribuicao'\", function () {\r",
											"        pm.expect.fail(\"O campo 'valorBaseContribuicao' não foi encontrado no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura o valor do campo \"valorReferencia\" na requisição\r",
											"let valorReferencia;\r",
											"try {\r",
											"    valorReferencia = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].informacaoAdicional.valorReferencia;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar o campo 'valorReferencia'\", function () {\r",
											"        pm.expect.fail(\"O campo 'valorReferencia' não foi encontrado no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida o status HTTP da resposta (deve ser 422)\r",
											"pm.test(\"Validar status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Tenta converter o body da resposta para JSON\r",
											"let responseData;\r",
											"try {\r",
											"    responseData = pm.response.json();\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao converter o body da resposta\", function () {\r",
											"        pm.expect.fail(\"O corpo da resposta não está em formato JSON válido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida e exibe o código de erro e a mensagem de erro concatenados no teste\r",
											"pm.test(`Código: ${responseData.detalhesErro[0].codigoErro}, Mensagem: ${responseData.detalhesErro[0].mensagemErro}`, function () {\r",
											"    pm.expect(true).to.eql(true); // Apenas registra no relatório sem causar falha\r",
											"});\r",
											"\r",
											"// Mostra o valor informado no campo \"valorBaseContribuicao\" no relatório do Newman\r",
											"pm.test(`Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao}`, function () {\r",
											"    pm.expect(true).to.eql(true); // Registro no relatório sem causar falha\r",
											"    console.log(`Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao}`);\r",
											"});\r",
											"\r",
											"// Mostra o valor informado no campo \"valorReferencia\" no relatório do Newman\r",
											"pm.test(`Valor informado no campo 'valorReferencia': ${valorReferencia}`, function () {\r",
											"    pm.expect(true).to.eql(true); // Registro no relatório sem causar falha\r",
											"    console.log(`Valor informado no campo 'valorReferencia': ${valorReferencia}`);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 134100.99,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_negativo(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// 1. Valida o status HTTP 201\r",
											"pm.test(\"Status HTTP é 201 - Criado\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// 2. Verifica se a resposta é um JSON\r",
											"pm.test(\"Resposta está no formato JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Valida o campo 'situacaoEnvio' igual a \"0\"\r",
											"pm.test(\"Campo 'situacaoEnvio' é 0\", function () {\r",
											"    var situacaoEnvio = responseJson.data && responseJson.data.situacaoEnvio;\r",
											"    pm.expect(situacaoEnvio).to.eql(\"0\");\r",
											"\r",
											"    // Exibe o valor do campo no console\r",
											"    console.log(`Campo 'situacaoEnvio' informado: ${situacaoEnvio}`);\r",
											"});\r",
											"\r",
											"// 4. Valida se os campos principais estão presentes na resposta\r",
											"pm.test(\"Resposta contém os campos esperados\", function () {\r",
											"    pm.expect(responseJson).to.have.property(\"codigoTransacao\");\r",
											"    pm.expect(responseJson).to.have.property(\"data\");\r",
											"\r",
											"    var data = responseJson.data;\r",
											"    pm.expect(data).to.have.property(\"codigoLeiaute\");\r",
											"    pm.expect(data).to.have.property(\"dataProcessamento\");\r",
											"    pm.expect(data).to.have.property(\"competencias\");\r",
											"\r",
											"    var competencias = data.competencias;\r",
											"    pm.expect(competencias).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    var protocolo = competencias[0].protocoloRecebimento;\r",
											"    pm.expect(protocolo).to.have.property(\"numeroControle\");\r",
											"    pm.expect(protocolo).to.have.property(\"grupoIdContribuicao\");\r",
											"\r",
											"    console.log(`Número de Controle: ${protocolo.numeroControle}`);\r",
											"});\r",
											"\r",
											"// 5. Valida os IDs de contribuição\r",
											"pm.test(\"IDs de contribuição estão presentes e válidos\", function () {\r",
											"    var idsContribuicao = responseJson.data.competencias[0].protocoloRecebimento.grupoIdContribuicao;\r",
											"\r",
											"    pm.expect(idsContribuicao).to.be.an(\"array\").that.has.lengthOf(3);\r",
											"\r",
											"    idsContribuicao.forEach(function (item, index) {\r",
											"        pm.expect(item).to.have.property(\"idContribuicao\");\r",
											"        console.log(`ID Contribuição ${index + 1}: ${item.idContribuicao}`);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@sqatest.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": -1341.98,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_Zero(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Lê o body da requisição enviada (raw)\r",
											"const requestBody = pm.request.body.raw;\r",
											"\r",
											"// Tenta converter o body da requisição para JSON\r",
											"let requestData;\r",
											"try {\r",
											"    requestData = JSON.parse(requestBody);\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro na leitura do body da requisição\", function () {\r",
											"        pm.expect.fail(\"O corpo da requisição não está em formato JSON válido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura o valor do campo \"valorBaseContribuicao\" na requisição\r",
											"let valorBaseContribuicao;\r",
											"try {\r",
											"    valorBaseContribuicao = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].valorBaseContribuicao;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar o campo 'valorBaseContribuicao'\", function () {\r",
											"        pm.expect.fail(\"O campo 'valorBaseContribuicao' não foi encontrado no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura o valor do campo \"valorReferencia\" na requisição\r",
											"let valorReferencia;\r",
											"try {\r",
											"    valorReferencia = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].informacaoAdicional.valorReferencia;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar o campo 'valorReferencia'\", function () {\r",
											"        pm.expect.fail(\"O campo 'valorReferencia' não foi encontrado no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida o status HTTP da resposta (deve ser 422)\r",
											"pm.test(\"Validar status HTTP 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Tenta converter o body da resposta para JSON\r",
											"let responseData;\r",
											"try {\r",
											"    responseData = pm.response.json();\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao converter o body da resposta\", function () {\r",
											"        pm.expect.fail(\"O corpo da resposta não está em formato JSON válido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida se os campos \"valorBaseContribuicao\" e \"valorReferencia\" são positivos\r",
											"pm.test(\"Os valores nos campos não devem ser negativos\", function () {\r",
											"    if (valorBaseContribuicao < 0 || valorReferencia < 0) {\r",
											"        console.log(`Erro: Um ou mais valores são negativos. valorBaseContribuicao: ${valorBaseContribuicao}, valorReferencia: ${valorReferencia}`);\r",
											"        pm.expect.fail(`Valores inválidos detectados: valorBaseContribuicao = ${valorBaseContribuicao}, valorReferencia = ${valorReferencia}`);\r",
											"    } else {\r",
											"        console.log(`Os valores são válidos. valorBaseContribuicao: ${valorBaseContribuicao}, valorReferencia: ${valorReferencia}`);\r",
											"        pm.expect(true).to.eql(true); // Apenas registra como sucesso\r",
											"    }\r",
											"});\r",
											"\r",
											"// Exibe no console o erro concatenado da resposta (se existir)\r",
											"let erro = responseData.detalhesErro && responseData.detalhesErro[0];\r",
											"if (erro) {\r",
											"    let erroCompleto = `Código: ${erro.codigoErro}, Mensagem: ${erro.mensagemErro}`;\r",
											"    console.log(erroCompleto);\r",
											"}\r",
											"\r",
											"// Mostra o valor informado no campo \"valorBaseContribuicao\" no relatório do Newman\r",
											"pm.test(`Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao}`, function () {\r",
											"    pm.expect(true).to.eql(true);\r",
											"    console.log(`Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao}`);\r",
											"});\r",
											"\r",
											"// Mostra o valor informado no campo \"valorReferencia\" no relatório do Newman\r",
											"pm.test(`Valor informado no campo 'valorReferencia': ${valorReferencia}`, function () {\r",
											"    pm.expect(true).to.eql(true);\r",
											"    console.log(`Valor informado no campo 'valorReferencia': ${valorReferencia}`);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"tester@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 0.00,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_idContribuicao1_todos_valores_zerados(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o código de status HTTP\r",
											"pm.test(\"Código HTTP é 201\", function() {\r",
											"    pm.response.to.have.status(201); // Verifica se a resposta tem o status 201\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"tester@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 0.00,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 0.00,\r\n                                \"valorReferencia\": 0.00,\r\n                                \"valorCaptacaoReferenciaAnterior\": 0.00\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": \r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_Letra(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": A \r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_caracter_especial(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": @\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_maior_20(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorCaptacaoReferenciaAnterior' enviado na requisição\r",
											"var valorCaptacaoReferenciaAnteriorMatch = pm.request.body.raw.match(/\"valorCaptacaoReferenciaAnterior\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorCaptacaoReferenciaAnteriorMatch) {\r",
											"    var valorCaptacaoReferenciaAnterior = valorCaptacaoReferenciaAnteriorMatch[1]; // Extrai o valor do campo\r",
											"    var quantidadeCaracteres = valorCaptacaoReferenciaAnterior.replace(\".\", \"\").length; // Conta a quantidade de caracteres, ignorando o ponto decimal\r",
											"\r",
											"    // Exibe a quantidade de caracteres no relatório do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'valorCaptacaoReferenciaAnterior' é ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'valorCaptacaoReferenciaAnterior' informado: ${valorCaptacaoReferenciaAnterior}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'valorCaptacaoReferenciaAnterior': ${quantidadeCaracteres}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'valorCaptacaoReferenciaAnterior' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o código de erro 00047 e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00047\");\r",
											"\r",
											"pm.test(`Erro 00047 - Quantidade de caracteres incompatível com o tamanho definido (máx de 20).`, function () {\r",
											"    if (erro) {\r",
											"        var mensagemErro = `Erro ${erro.codigoErro}: ${erro.mensagemErro}`;\r",
											"        console.log(mensagemErro); // Exibe a mensagem completa no console\r",
											"        pm.test(`Mensagem de erro validada: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Mensagem de erro não encontrada na resposta.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 1234567891123456789.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_separador_decimal_virgula(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 1234567891123456,33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_0_casas_decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 1234567891123456\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_1_casa_decimal(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorCaptacaoReferenciaAnterior' enviado na requisição\r",
											"var valorCaptacaoReferenciaAnteriorMatch = pm.request.body.raw.match(/\"valorCaptacaoReferenciaAnterior\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorCaptacaoReferenciaAnteriorMatch) {\r",
											"    var valorCaptacaoReferenciaAnterior = valorCaptacaoReferenciaAnteriorMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // Conta as casas decimais\r",
											"    var casasDecimais = valorCaptacaoReferenciaAnterior.split(\".\")[1]; // Pega a parte após o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o número de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso não haja casas decimais\r",
											"    }\r",
											"\r",
											"    // Registra a quantidade de casas decimais no relatório do Newman\r",
											"    pm.test(`Quantidade de casas decimais no campo 'valorCaptacaoReferenciaAnterior': ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando a validação\r",
											"    var casasDecimaisPermitidas = 1; // Apenas uma casa decimal permitida\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento do campo 'valorCaptacaoReferenciaAnterior' precisa ter exatamente ${casasDecimaisPermitidas} casa decimal. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado está dentro da especificação (${casasDecimaisPermitidas} casa decimal).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorCaptacaoReferenciaAnterior' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida a mensagem de erro para o campo 'valorCaptacaoReferenciaAnterior'\r",
											"var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"if (erro) {\r",
											"    pm.test(`Erro ${erro.codigoErro}: ${erro.mensagemErro}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra no relatório sem causar falha\r",
											"    });\r",
											"\r",
											"    // Log detalhado no console\r",
											"    console.log(`Erro detectado: Código ${erro.codigoErro}, Mensagem: ${erro.mensagemErro}`);\r",
											"} else {\r",
											"    console.log(\"Erro 00113 não encontrado na resposta da API.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 1234567891123456.3\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_3_casas_decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP é 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorCaptacaoReferenciaAnterior' enviado na requisição\r",
											"var valorCaptacaoReferenciaAnteriorMatch = pm.request.body.raw.match(/\"valorCaptacaoReferenciaAnterior\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorCaptacaoReferenciaAnteriorMatch) {\r",
											"    var valorCaptacaoReferenciaAnterior = valorCaptacaoReferenciaAnteriorMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // Conta as casas decimais\r",
											"    var casasDecimais = valorCaptacaoReferenciaAnterior.split(\".\")[1]; // Pega a parte após o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o número de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso não haja casas decimais\r",
											"    }\r",
											"\r",
											"    // Registra a quantidade de casas decimais no relatório do Newman\r",
											"    pm.test(`Quantidade de casas decimais no campo 'valorCaptacaoReferenciaAnterior': ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando a validação\r",
											"    var casasDecimaisPermitidas = 1; // Apenas uma casa decimal permitida\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento do campo 'valorCaptacaoReferenciaAnterior' precisa ter exatamente ${casasDecimaisPermitidas} casa decimal. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado está dentro da especificação (${casasDecimaisPermitidas} casa decimal).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorCaptacaoReferenciaAnterior' não encontrado no corpo da requisição.\");\r",
											"}\r",
											"\r",
											"// 3. Valida a mensagem de erro para o campo 'valorCaptacaoReferenciaAnterior'\r",
											"var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"if (erro) {\r",
											"    pm.test(`Erro ${erro.codigoErro}: ${erro.mensagemErro}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra no relatório sem causar falha\r",
											"    });\r",
											"\r",
											"    // Log detalhado no console\r",
											"    console.log(`Erro detectado: Código ${erro.codigoErro}, Mensagem: ${erro.mensagemErro}`);\r",
											"} else {\r",
											"    console.log(\"Erro 00113 não encontrado na resposta da API.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 1234567891123456.377\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "1_FGC406 - codigoTransacao_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o código de status HTTP\r",
											"pm.test(\"Valida o código de status HTTP\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro\r",
											"pm.test(\"Valida a mensagem de erro\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.detalhesErro).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    const erroDetalhes = jsonData.detalhesErro[0];\r",
											"    pm.expect(erroDetalhes.mensagemErro).to.eql(\r",
											"        \"O preenchimento do parâmetro de entrada [codigoTransacao ] é obrigatório.\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle={{var_numeroControle}}&codTransacao=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codTransacao",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5_FGC406 - consultar_CNPJ_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar código de status HTTP\", function () {\r",
											"    pm.response.to.have.status(422); // Valida se o código de status é 422\r",
											"});\r",
											"\r",
											"pm.test(\"Validar o código da transação\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.codigoTransacao).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.codigoTransacao).to.have.lengthOf(36); // Exemplo: valida tamanho típico de UUID\r",
											"});\r",
											"\r",
											"pm.test(\"Validar estrutura da resposta\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"codigoHttp\", \"422\");\r",
											"    pm.expect(jsonData).to.have.property(\"codigoLeiaute\", \"FGC406R\");\r",
											"    pm.expect(jsonData).to.have.property(\"situacaoEnvio\", \"1\");\r",
											"    pm.expect(jsonData).to.have.property(\"dataErro\");\r",
											"    pm.expect(jsonData.detalhesErro).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem de erro detalhada\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00059\");\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"mensagemErro\", \"O preenchimento do parâmetro de entrada [cnpj] é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj=&numeroControle={{var_numeroControle}}&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": ""
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6_FGC406 - consultar_CNPJ_<_8(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar código de status HTTP\", function () {\r",
											"    pm.response.to.have.status(422); // Valida se o código de status é 422\r",
											"});\r",
											"\r",
											"pm.test(\"Validar código e mensagem de erro detalhada\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00060\"); // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"mensagemErro\", \"Quantidade de caracteres informada no parâmetro de entrada [cnpj] incompatível com tamanho definido, verifique se está com 8 caracteres e zeros a esquerda (mín e máx de 8).\"); // Valida a mensagem de erro\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj=065147&numeroControle={{var_numeroControle}}&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "065147"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7_FGC406 - consultar_CNPJ_>_8(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar código de status HTTP\", function () {\r",
											"    pm.response.to.have.status(422); // Valida se o código de status é 422\r",
											"});\r",
											"\r",
											"pm.test(\"Validar código e mensagem de erro detalhada\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00060\"); // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"mensagemErro\", \"Quantidade de caracteres informada no parâmetro de entrada [cnpj] incompatível com tamanho definido, verifique se está com 8 caracteres e zeros a esquerda (mín e máx de 8).\"); // Valida a mensagem de erro\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj=0651474567&numeroControle={{var_numeroControle}}&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "0651474567"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8_FGC406 - consultar_CNPJ_inexistente(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Capturar e validar o código HTTP\r",
											"pm.test(\"Validar código de status HTTP\", function () {\r",
											"    pm.response.to.have.status(422); // Valida se o status retornado é 422\r",
											"    console.log(\"Status HTTP:\", pm.response.code); // Exibe o código HTTP no console\r",
											"});\r",
											"\r",
											"// Capturar e validar o código de erro e a mensagem de erro\r",
											"pm.test(\"Capturar e validar código e mensagem de erro\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    \r",
											"    // Validar e capturar código de erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00008\");\r",
											"    console.log(\"Código de Erro:\", jsonData.detalhesErro[0].codigoErro); // Exibe o código de erro no console\r",
											"    \r",
											"    // Validar e capturar mensagem de erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"mensagemErro\", \"CNPJ não reconhecido.\");\r",
											"    console.log(\"Mensagem de Erro:\", jsonData.detalhesErro[0].mensagemErro); // Exibe a mensagem de erro no console\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj=06514796&numeroControle={{var_numeroControle}}&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "06514796"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9_FGC406 - consultar_CNPJ_caracteres_especiais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Capturar e validar o código HTTP\r",
											"pm.test(\"Validar código de status HTTP\", function () {\r",
											"    pm.response.to.have.status(422); // Valida se o status retornado é 422\r",
											"    console.log(\"Status HTTP:\", pm.response.code); // Exibe o código HTTP no console\r",
											"});\r",
											"\r",
											"// Capturar e validar o código de erro e a mensagem de erro\r",
											"pm.test(\"Capturar e validar código e mensagem de erro\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    \r",
											"    // Validar e capturar código de erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00008\");\r",
											"    console.log(\"Código de Erro:\", jsonData.detalhesErro[0].codigoErro); // Exibe o código de erro no console\r",
											"    \r",
											"    // Validar e capturar mensagem de erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"mensagemErro\", \"CNPJ não reconhecido.\");\r",
											"    console.log(\"Mensagem de Erro:\", jsonData.detalhesErro[0].mensagemErro); // Exibe a mensagem de erro no console\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj=%23%23%23%23%23%23%23%23&numeroControle={{var_numeroControle}}&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "%23%23%23%23%23%23%23%23"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10_FGC406 - consultar_numero_controle_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar mensagem de retorno para códigoErro 00062\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00062\"); // Código do erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\r",
											"        \"mensagemErro\",\r",
											"        \"Parâmetro de entrada [numeroControle] não reconhecido.\"\r",
											"    ); // Mensagem do erro\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem de retorno para códigoErro 00063\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detalhesErro[1]).to.have.property(\"codigoErro\", \"00063\"); // Código do erro\r",
											"    pm.expect(jsonData.detalhesErro[1]).to.have.property(\r",
											"        \"mensagemErro\",\r",
											"        \"Quantidade de caracteres informada no parâmetro de entrada [numeroControle] incompatível com tamanho definido. (mín e máx de 30 caracteres).\"\r",
											"    ); // Mensagem do erro\r",
											"});\r",
											"\r",
											"pm.test(\"Validar código de status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida se o código de status é 422\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle=&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": ""
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11_FGC406 - consultar_numero_controle_desconhecido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar número de controle não reconhecido\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00062\");\r",
											"    \r",
											"    // Valida a mensagem de erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\r",
											"        \"mensagemErro\",\r",
											"        \"Parâmetro de entrada [numeroControle] não reconhecido.\"\r",
											"    );\r",
											"});\r",
											"\r",
											"pm.test(\"Validar código de status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida se o código de status é 422\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle=&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": ""
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "12_FGC406 - consultar_numero_controle_>_30(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar número de controle não reconhecido\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00062\");\r",
											"    \r",
											"    // Valida a mensagem de erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\r",
											"        \"mensagemErro\",\r",
											"        \"Parâmetro de entrada [numeroControle] não reconhecido.\"\r",
											"    );\r",
											"});\r",
											"\r",
											"pm.test(\"Validar número de controle maior que 30 caracteres\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[1]).to.have.property(\"codigoErro\", \"00063\");\r",
											"    \r",
											"    // Valida a mensagem de erro\r",
											"    pm.expect(jsonData.detalhesErro[1]).to.have.property(\r",
											"        \"mensagemErro\",\r",
											"        \"Quantidade de caracteres informada no parâmetro de entrada [numeroControle] incompatível com tamanho definido. (mín e máx de 30 caracteres).\"\r",
											"    );\r",
											"});\r",
											"\r",
											"pm.test(\"Validar código de status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida se o código de status é 422\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle=1234567891123456781234567654321&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "1234567891123456781234567654321"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "13_FGC406 - consultar_numero_controle_<_30(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar número de controle não reconhecido\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00062\");\r",
											"    \r",
											"    // Valida a mensagem de erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\r",
											"        \"mensagemErro\",\r",
											"        \"Parâmetro de entrada [numeroControle] não reconhecido.\"\r",
											"    );\r",
											"});\r",
											"\r",
											"pm.test(\"Validar número de controle maior que 30 caracteres\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[1]).to.have.property(\"codigoErro\", \"00063\");\r",
											"    \r",
											"    // Valida a mensagem de erro\r",
											"    pm.expect(jsonData.detalhesErro[1]).to.have.property(\r",
											"        \"mensagemErro\",\r",
											"        \"Quantidade de caracteres informada no parâmetro de entrada [numeroControle] incompatível com tamanho definido. (mín e máx de 30 caracteres).\"\r",
											"    );\r",
											"});\r",
											"\r",
											"pm.test(\"Validar código de status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida se o código de status é 422\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://internal-contribuicoes-api-ecs-lb-2017763910.us-east-1.elb.amazonaws.com:1000/api/contribuicoes/valorContribuicao?cnpj={{var_cnpj}}&numeroControle=12345678911234567812345676543&codigoTransacao={{var_new_codTransacao}}",
									"protocol": "http",
									"host": [
										"internal-contribuicoes-api-ecs-lb-2017763910",
										"us-east-1",
										"elb",
										"amazonaws",
										"com"
									],
									"port": "1000",
									"path": [
										"api",
										"contribuicoes",
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "12345678911234567812345676543"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "14_FGC406 - numero_controle_<>_numerico(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar número de controle obrigatório\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00061\");\r",
											"    \r",
											"    // Valida a mensagem de erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\r",
											"        \"mensagemErro\",\r",
											"        \"O preenchimento do parâmetro de entrada [numeroControle] é obrigatório.\"\r",
											"    );\r",
											"});\r",
											"\r",
											"pm.test(\"Validar número de controle não reconhecido\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[1]).to.have.property(\"codigoErro\", \"00062\");\r",
											"    \r",
											"    // Valida a mensagem de erro\r",
											"    pm.expect(jsonData.detalhesErro[1]).to.have.property(\r",
											"        \"mensagemErro\",\r",
											"        \"Parâmetro de entrada [numeroControle] não reconhecido.\"\r",
											"    );\r",
											"});\r",
											"\r",
											"pm.test(\"Validar código de status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida se o código de status é 422\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle=aaaaaaaaaagggggggggggghjuyt@$%&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "aaaaaaaaaagggggggggggghjuyt@$%"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "15_FGC406 - codTransacao_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar código de status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida se o código de status é 422\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem e código de erro para código de transação vazio\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00056\");\r",
											"    \r",
											"    // Valida a mensagem de erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\r",
											"        \"mensagemErro\",\r",
											"        \"O preenchimento do parâmetro de entrada [codigoTransacao ] é obrigatório.\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle={{var_numeroControle}}&codigoTransacao=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "16_FGC406 - codTransacao_<_36(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP retornado\r",
											"pm.test(\"Validar código de status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422); // Verifica se o status retornado é 422\r",
											"});\r",
											"\r",
											"// Valida o código de erro, a mensagem e o valor informado\r",
											"pm.test(`Quantidade de caracteres informada no parâmetro de entrada [codigoTransacao] = ${pm.response.json().codigoTransacao.length}, incompatível com tamanho definido (mín/max de 36).`, function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const codigoTransacao = jsonData.codigoTransacao || \"\"; // Captura o valor informado\r",
											"    const tamanho = codigoTransacao.length; // Calcula o tamanho do valor informado\r",
											"\r",
											"    // Constrói a mensagem esperada\r",
											"    const mensagemEsperada = `Quantidade de caracteres informada no parâmetro de entrada [codigoTransacao] incompatível com tamanho definido (mín/max de 36).`;\r",
											"\r",
											"    // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00057\");\r",
											"\r",
											"    // Valida a mensagem retornada pela API\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"mensagemErro\", mensagemEsperada);\r",
											"\r",
											"    // Exibe a quantidade de caracteres informada diretamente no relatório\r",
											"    pm.test(`Valor informado: \"${codigoTransacao}\" (${tamanho} caracteres).`, function () {\r",
											"        pm.expect(codigoTransacao).to.be.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle={{var_numeroControle}}&codigoTransacao=12",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "17_FGC406 - codTransacao_>_36(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP retornado\r",
											"pm.test(\"Validar código de status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422); // Verifica se o status retornado é 422\r",
											"});\r",
											"\r",
											"// Valida o código de erro, a mensagem e o valor informado\r",
											"pm.test(`Quantidade de caracteres informada no parâmetro de entrada [codigoTransacao] = ${pm.response.json().codigoTransacao.length}, incompatível com tamanho definido (mín/max de 36).`, function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const codigoTransacao = jsonData.codigoTransacao || \"\"; // Captura o valor informado\r",
											"    const tamanho = codigoTransacao.length; // Calcula o tamanho do valor informado\r",
											"\r",
											"    // Constrói a mensagem esperada\r",
											"    const mensagemEsperada = `Quantidade de caracteres informada no parâmetro de entrada [codigoTransacao] incompatível com tamanho definido (mín/max de 36).`;\r",
											"\r",
											"    // Valida o código do erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00057\");\r",
											"\r",
											"    // Valida a mensagem retornada pela API\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"mensagemErro\", mensagemEsperada);\r",
											"\r",
											"    // Exibe a quantidade de caracteres informada diretamente no relatório\r",
											"    pm.test(`Valor informado: \"${codigoTransacao}\" (${tamanho} caracteres).`, function () {\r",
											"        pm.expect(codigoTransacao).to.be.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle={{var_numeroControle}}&codigoTransacao=12345678910112345789045678492345678952",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "12345678910112345789045678492345678952"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "18_FGC406 - codTransacao_<>_numerico(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP retornado\r",
											"pm.test(\"Validar código de status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422); // Verifica se o status retornado é 422\r",
											"});\r",
											"\r",
											"// Captura o valor do campo enviado nos params e exibe no relatório\r",
											"pm.test(\"Validar erro relacionado ao campo codigoTransacao <> numerico\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const codigoTransacaoEnviado = pm.request.url.query.find(q => q.key === \"codigoTransacao\")?.value || \"(não informado)\"; // Captura o valor enviado nos params\r",
											"\r",
											"    // Valida o código de erro\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"codigoErro\", \"00056\");\r",
											"\r",
											"    // Valida a mensagem de erro retornada pela API\r",
											"    const mensagemEsperada = `O preenchimento do parâmetro de entrada [codigoTransacao ] é obrigatório.`;\r",
											"    pm.expect(jsonData.detalhesErro[0]).to.have.property(\"mensagemErro\", mensagemEsperada);\r",
											"\r",
											"    // Adiciona no relatório o valor enviado nos params e o erro retornado\r",
											"    pm.test(`Valor enviado para codigoTransacao: \"${codigoTransacaoEnviado}\"`, function () {\r",
											"        pm.expect(codigoTransacaoEnviado).to.be.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle={{var_numeroControle}}&codigoTransacao=qqqqqqqqqqqqqqqqqqqq$$$$$$$@%23$%¨%26*()",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "qqqqqqqqqqqqqqqqqqqq$$$$$$$@%23$%¨%26*()"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "funcional",
					"item": [
						{
							"name": "1_FGC405 - IncluirContribuição(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o código de status HTTP\r",
											"pm.test(\"Código HTTP é 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status é 200 ou 201\r",
											"});\r",
											"\r",
											"try {\r",
											"    // Parse a resposta JSON\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    // Extraia o valor de codigoTransacao\r",
											"    const codigoTransacao = response.codigoTransacao;\r",
											"\r",
											"    // Extraia o valor de numeroControle dentro de data > competencias[0] > protocoloRecebimento\r",
											"    const numeroControle = response.data.competencias[0].protocoloRecebimento.numeroControle;\r",
											"\r",
											"    // Extraia o valor do cnpj do corpo da requisição\r",
											"    const requestBody = JSON.parse(pm.request.body.raw); // Parse o body da requisição\r",
											"    const cnpj = requestBody.data.cnpj;\r",
											"\r",
											"    // Salve os valores como variáveis globais\r",
											"    pm.globals.set(\"var_codigoTransacao\", codigoTransacao);\r",
											"    pm.globals.set(\"var_numeroControle\", numeroControle);\r",
											"    pm.globals.set(\"var_cnpj\", cnpj);\r",
											"\r",
											"    // Exiba no console os valores gerados\r",
											"    console.log(\"Valor gerado no codigoTransacao:\", codigoTransacao);\r",
											"    console.log(\"Valor gerado no numeroControle:\", numeroControle);\r",
											"    console.log(\"Valor gerado no CNPJ:\", cnpj);\r",
											"\r",
											"} catch (e) {\r",
											"    console.error(\"Erro ao processar a resposta ou o request JSON:\", e);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado no ambiente como \"randomCodigoTransacao\"\r",
											"pm.environment.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados no ambiente do Postman\r",
											"pm.environment.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.environment.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.environment.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"apitesting@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 9079335420.26,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 1207656446.94,\r\n                                \"valorReferencia\": 8585370777.53,\r\n                                \"valorCaptacaoReferenciaAnterior\": 11405530851.40\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - validar_Schema(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o código de status é 422 (Unprocessable Entity)\r",
											"pm.test(\"Validar código de status 422\", function () {\r",
											"    pm.response.to.have.status(422);  // Verifica que o status é 422\r",
											"});\r",
											"\r",
											"// Validar a estrutura do corpo da requisição com o schema\r",
											"pm.test(\"Validar estrutura do corpo da requisição\", function () {\r",
											"    const schema = {\r",
											"        \r",
											"        \"$id\": \"http://example.com/example.json\",\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"status\": {\r",
											"                \"type\": \"string\",\r",
											"                \"examples\": [\"success\"]\r",
											"            },\r",
											"            \"data\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"codigoTransacao\",\r",
											"                    \"codigoLeiaute\",\r",
											"                    \"versaoLeiaute\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"codigoTransacao\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"examples\": [\"h02d5347-719g-5e65-667d-22811f422672\"]\r",
											"                    },\r",
											"                    \"codigoLeiaute\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"examples\": [\"FGC405\"]\r",
											"                    },\r",
											"                    \"versaoLeiaute\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"examples\": [\"1\"]\r",
											"                    },\r",
											"                    \"cnpj\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"examples\": [\"60701190\"]\r",
											"                    },\r",
											"                    \"parte\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"examples\": [\"teste jd\"]\r",
											"                    },\r",
											"                    \"contato\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\"nome\", \"telefone\", \"email\"],\r",
											"                        \"properties\": {\r",
											"                            \"nome\": {\r",
											"                                \"type\": \"string\",\r",
											"                                \"examples\": [\"teste\"]\r",
											"                            },\r",
											"                            \"telefone\": {\r",
											"                                \"type\": \"string\",\r",
											"                                \"examples\": [\"11999999999\"]\r",
											"                            },\r",
											"                            \"email\": {\r",
											"                                \"type\": \"string\",\r",
											"                                \"examples\": [\"teste.teste@teste.com\"]\r",
											"                            }\r",
											"                        }\r",
											"                    },\r",
											"                    \"contribuicao\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\"competencias\"],\r",
											"                        \"properties\": {\r",
											"                            \"competencias\": {\r",
											"                                \"type\": \"array\",\r",
											"                                \"items\": {\r",
											"                                    \"type\": \"object\",\r",
											"                                    \"required\": [\"mmCompetencia\", \"baseCompetencia\", \"tipoBaseContribuicao\"],\r",
											"                                    \"properties\": {\r",
											"                                        \"mmCompetencia\": {\r",
											"                                            \"type\": \"string\",\r",
											"                                            \"examples\": [\"202410\"]\r",
											"                                        },\r",
											"                                        \"baseCompetencia\": {\r",
											"                                            \"type\": \"string\",\r",
											"                                            \"examples\": [\"202411\"]\r",
											"                                        },\r",
											"                                        \"tipoBaseContribuicao\": {\r",
											"                                            \"type\": \"string\",\r",
											"                                            \"examples\": [\"1\"]\r",
											"                                        }\r",
											"                                    }\r",
											"                                }\r",
											"                            }\r",
											"                        }\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    };\r",
											"\r",
											"\r",
											"\r",
											"    // Verificar se o corpo da resposta é válido conforme o schema\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta é um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Exibir cabeçalhos de envio e resposta\", function () {\r",
											"    // Cabeçalhos de envio\r",
											"    var requestHeaders = pm.request.headers.all();\r",
											"    console.log(\"Cabeçalhos de envio:\");\r",
											"    requestHeaders.forEach(function(header) {\r",
											"        console.log(header.key + \": \" + header.value);\r",
											"    });\r",
											"\r",
											"    // Cabeçalhos de resposta\r",
											"    var responseHeaders = pm.response.headers.all();\r",
											"    console.log(\"Cabeçalhos de resposta:\");\r",
											"    responseHeaders.forEach(function(header) {\r",
											"        console.log(header.key + \": \" + header.value);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"@@@@@@@@@\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202410\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - idContribuicao_codigoTransacao_existente(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validação de código HTTP\r",
											"pm.test(\"Código HTTP é 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"\r",
											"// Validação de erro 00027 - codigoTransacao já existente\r",
											"pm.test(\"Erro 00027 - codigoTransacao já existente\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro27 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00027\");\r",
											"    pm.expect(erro27).to.exist;\r",
											"    pm.expect(erro27.mensagemErro).to.eql(\r",
											"        \"Conteúdo informado no atributo [codigoTransacao] já existente, este deve ser único por mensagem enviada.\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": {{var_codigoTransacao}},\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202411\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "2_FGC406 - consultar_contribuicao(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle={{var_numeroControle}}&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3_FGC406 - validar_schema(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Importa o Ajv (Another JSON Validator)\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"// Define o schema (cole o schema gerado aqui)\r",
											"const schema = {\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"required\": [\"codigoTransacao\", \"data\"],\r",
											"    \"properties\": {\r",
											"        \"codigoTransacao\": { \"type\": \"string\" },\r",
											"        \"data\": {\r",
											"            \"type\": \"object\",\r",
											"            \"required\": [\"codigoLeiaute\", \"versaoLeiaute\", \"cnpj\", \"contribuicao\"],\r",
											"            \"properties\": {\r",
											"                \"codigoLeiaute\": { \"type\": \"string\" },\r",
											"                \"versaoLeiaute\": { \"type\": \"integer\" },\r",
											"                \"cnpj\": { \"type\": \"string\" },\r",
											"                \"contribuicao\": {\r",
											"                    \"type\": \"object\",\r",
											"                    \"required\": [\"competencia\"],\r",
											"                    \"properties\": {\r",
											"                        \"competencia\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"required\": [\"numeroControle\", \"baseContribuicoes\"],\r",
											"                            \"properties\": {\r",
											"                                \"numeroControle\": { \"type\": \"string\" },\r",
											"                                \"baseContribuicoes\": {\r",
											"                                    \"type\": \"array\",\r",
											"                                    \"items\": {\r",
											"                                        \"type\": \"object\",\r",
											"                                        \"required\": [\r",
											"                                            \"idContribuicao\",\r",
											"                                            \"statusContribuicao\",\r",
											"                                            \"multa\"\r",
											"                                        ],\r",
											"                                        \"properties\": {\r",
											"                                            \"idContribuicao\": { \"type\": \"string\" },\r",
											"                                            \"valorContribuicao\": { \"type\": [\"null\", \"number\"] },\r",
											"                                            \"statusContribuicao\": { \"type\": \"integer\" },\r",
											"                                            \"multa\": {\r",
											"                                                \"type\": \"object\",\r",
											"                                                \"required\": [\"idContribuicaoMulta\", \"statusMulta\"],\r",
											"                                                \"properties\": {\r",
											"                                                    \"idContribuicaoMulta\": { \"type\": \"string\" },\r",
											"                                                    \"statusMulta\": { \"type\": \"integer\" }\r",
											"                                                }\r",
											"                                            }\r",
											"                                        }\r",
											"                                    }\r",
											"                                }\r",
											"                            }\r",
											"                        }\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"// Obtém o corpo da resposta da API\r",
											"const response = pm.response.json();\r",
											"\r",
											"// Compila o schema\r",
											"const validate = ajv.compile(schema);\r",
											"\r",
											"// Valida o corpo da resposta contra o schema\r",
											"const valid = validate(response);\r",
											"\r",
											"// Se a validação falhar, exibe os erros no console\r",
											"if (!valid) {\r",
											"    console.error('Erros de validação do schema:', validate.errors);\r",
											"}\r",
											"\r",
											"// Testa se o corpo da resposta é válido\r",
											"pm.test('O corpo da resposta está de acordo com o schema', function () {\r",
											"    pm.expect(valid).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleatória\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra minúscula 'a' a 'z'\r",
											"\r",
											"// Gera 6 números aleatórios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 dígitos\r",
											"\r",
											"// Combina letra e números\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na variável \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle={{var_numeroControle}}&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4_FGC406 - consultar_contribuicao_existente(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica o status HTTP\r",
											"pm.test(\"Valida o código de status HTTP\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Verifica a mensagem de erro\r",
											"pm.test(\"Valida a mensagem de erro\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.detalhesErro).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    const erroDetalhes = jsonData.detalhesErro[0];\r",
											"    pm.expect(erroDetalhes.mensagemErro).to.eql(\r",
											"        \"Conteúdo informado no parâmetro de entrada [codigoTransacao] já existente, este deve ser único por mensagem enviada.\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/valorContribuicao?cnpj={{var_cnpj}}&numeroControle={{var_numeroControle}}&codigoTransacao={{var_codigoTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_codigoTransacao}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negocio",
					"item": [
						{
							"name": "FGC405_CT1 - IncluirContribuição_sem_adicional(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o código de status HTTP\r",
											"pm.test(\"Código HTTP é 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status é 200 ou 201\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"apitesting@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 2196437422.61,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 264768946.34,\r\n                                \"valorReferencia\": 1967309107.67,\r\n                                \"valorCaptacaoReferenciaAnterior\": 2091503547.84\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_CT2 - IncluirContribuição_com_adicional(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o código de status HTTP\r",
											"pm.test(\"Código HTTP é 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status é 200 ou 201\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"apitesting@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 9079335420.26,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 1207656446.94,\r\n                                \"valorReferencia\": 8585370777.53,\r\n                                \"valorCaptacaoReferenciaAnterior\": 11405530851.40\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_CT3 - IncluirContribuição_com_tipo_2_ DPGE I+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o código de status HTTP\r",
											"pm.test(\"Código HTTP é 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status é 200 ou 201\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"apitesting@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 9079335420.26,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 1207656446.94,\r\n                                \"valorReferencia\": 8585370777.53,\r\n                                \"valorCaptacaoReferenciaAnterior\": 11405530851.40\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_CT3 - IncluirContribuição_com_tipo_4_ DPGE II(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o código de status HTTP\r",
											"pm.test(\"Código HTTP é 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status é 200 ou 201\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar número aleatório de 6 dígitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o número gerado na variável \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"Número aleatório CódigoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar número aleatório de 6 dígitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o número tenha 6 dígitos (completa com zeros à esquerda, se necessário)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o número subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o número subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os números gerados nas variáveis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depuração)\r",
											"console.log(\"Número aleatório idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"Número aleatório idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"Número aleatório idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"apitesting@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202412\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 9079335420.26,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 1207656446.94,\r\n                                \"valorReferencia\": 8585370777.53,\r\n                                \"valorCaptacaoReferenciaAnterior\": 11405530851.40\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"baseContribuicao"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}