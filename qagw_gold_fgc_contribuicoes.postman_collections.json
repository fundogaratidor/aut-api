{
	"info": {
		"_postman_id": "95cb6abb-ce1f-47b4-849f-4453d84df73a",
		"name": "Contribui√ß√µes 2.0 - DEV LB_todas_Suites",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40178538",
		"_collection_link": "https://www.postman.com/gftadeu/workspace/my-workspace/collection/40178538-95cb6abb-ce1f-47b4-849f-4453d84df73a?action=share&source=collection_link&creator=40178538"
	},
	"item": [
		{
			"name": "Sprints_1_3",
			"item": [
				{
					"name": "unitario 405",
					"item": [
						{
							"name": "FGC405 - IncluirContribui√ß√£o(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o c√≥digo de status HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status √© 200 ou 201\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// üîπ Fun√ß√£o para gerar um n√∫mero aleat√≥rio de 6 d√≠gitos\r",
											"function gerarNumeroAleatorio() {\r",
											"    return Math.floor(Math.random() * 1000000).toString().padStart(6, '0');\r",
											"}\r",
											"\r",
											"// üîπ Gera√ß√£o do c√≥digo de transa√ß√£o\r",
											"let randomCodigoTransacao = gerarNumeroAleatorio();\r",
											"pm.variables.set(\"randomCodigoTransacao\", randomCodigoTransacao);\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao:\", randomCodigoTransacao);\r",
											"\r",
											"// üîπ Gera√ß√£o dos IDs de contribui√ß√£o\r",
											"let idContribuicao1 = gerarNumeroAleatorio();\r",
											"let idContribuicao2 = (parseInt(idContribuicao1) + 1).toString().padStart(6, '0');\r",
											"let idContribuicao3 = (parseInt(idContribuicao2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"pm.variables.set(\"idContribuicao1\", idContribuicao1);\r",
											"pm.variables.set(\"idContribuicao2\", idContribuicao2);\r",
											"pm.variables.set(\"idContribuicao3\", idContribuicao3);\r",
											"\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1:\", idContribuicao1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2:\", idContribuicao2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3:\", idContribuicao3);\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"1199521455\",\r\n            \"email\": \"apitest@gftfgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202502\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContribuicao<>mescompetencia_irregular(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida√ß√£o de c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida√ß√£o de erro 00018\r",
											"pm.test(\"Erro 00018 - tipoBaseContribuicao requer mmCompetencia v√°lido\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro18 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00018\");\r",
											"    pm.expect(erro18).to.exist;\r",
											"    pm.expect(erro18.mensagemErro).to.eql(\"Para atributo [tipoBaseContribuicao] inclus√£o (1) necess√°rio que atributo [mmCompetencia] seja o m√™s regular da contribui√ß√£o.\");\r",
											"});\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202501\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContrib_Preenchido_MesCompetencia_Vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida√ß√£o de c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Valida√ß√£o de erro 00013\r",
											"pm.test(\"Erro 00013 - mmCompetencia √© obrigat√≥rio\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro13 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00013\");\r",
											"    pm.expect(erro13).to.exist;\r",
											"    pm.expect(erro13.mensagemErro).to.eql(\"O preenchimento do atributo [mmCompetencia] √© obrigat√≥rio.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"\",\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContrib_vazio_MesCompetencia_preenchido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida√ß√£o de c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida√ß√£o de erro 00015\r",
											"pm.test(\"Erro 00015 - baseCompetencia √© obrigat√≥rio\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro15 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00015\");\r",
											"    pm.expect(erro15).to.exist;\r",
											"    pm.expect(erro15.mensagemErro).to.eql(\"O preenchimento do atributo [baseCompetencia] √© obrigat√≥rio.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202501\",\r\n                    \"baseCompetencia\": \"\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContrib_e_mesCompetencia_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida√ß√£o de c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Erro 00013 - mmCompetencia √© obrigat√≥rio\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro13 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00013\");\r",
											"    pm.expect(erro13).to.exist;\r",
											"    pm.expect(erro13.mensagemErro).to.eql(\"O preenchimento do atributo [mmCompetencia] √© obrigat√≥rio.\");\r",
											"});\r",
											"// Valida√ß√£o de erro 00015\r",
											"pm.test(\"Erro 00015 - baseCompetencia √© obrigat√≥rio\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro15 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00015\");\r",
											"    pm.expect(erro15).to.exist;\r",
											"    pm.expect(erro15.mensagemErro).to.eql(\"O preenchimento do atributo [baseCompetencia] √© obrigat√≥rio.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"\",\r\n                    \"baseCompetencia\": \"\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContrib_e_mesCompetencia_letras(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida√ß√£o de c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Extrair e validar a estrutura principal da resposta\r",
											"pm.test(\"Resposta possui 'detalhesErro' como array\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.have.property('detalhesErro');\r",
											"    pm.expect(responseJson.detalhesErro).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Valida√ß√£o de erro 00037 - Formato incompat√≠vel para mmCompetencia\r",
											"pm.test(\"Erro 00037 - Formato mmCompetencia incompat√≠vel\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro37 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00037\");\r",
											"    pm.expect(erro37).to.exist;\r",
											"    pm.expect(erro37.mensagemErro).to.eql(\r",
											"        \"Conte√∫do informado no atributo [mmCompetencia] incompat√≠vel com o formato definido: \\\"AAAAMM\\\", onde AAAA = Ano e MM = M√™s.\"\r",
											"    );\r",
											"});\r",
											"\r",
											"// Valida√ß√£o de erro 00038 - Formato incompat√≠vel para baseCompetencia\r",
											"pm.test(\"Erro 00038 - Formato baseCompetencia incompat√≠vel\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro38 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00038\");\r",
											"    pm.expect(erro38).to.exist;\r",
											"    pm.expect(erro38.mensagemErro).to.eql(\r",
											"        \"Conte√∫do informado no atributo [baseCompetencia] incompat√≠vel com o formato definido: \\\"AAAAMM\\\", onde AAAA = Ano e MM = M√™s.\"\r",
											"    );\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"aaaaaa\",\r\n                    \"baseCompetencia\": \"aaaaaa\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - baseContrib_e_mesCompetencia_formato_invalido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida√ß√£o de c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida√ß√£o de erro 00037 - Formato incompat√≠vel para mmCompetencia\r",
											"pm.test(\"Erro 00037 - Formato mmCompetencia incompat√≠vel\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro37 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00037\");\r",
											"    pm.expect(erro37).to.exist;\r",
											"    pm.expect(erro37.mensagemErro).to.eql(\r",
											"        \"Conte√∫do informado no atributo [mmCompetencia] incompat√≠vel com o formato definido: \\\"AAAAMM\\\", onde AAAA = Ano e MM = M√™s.\"\r",
											"    );\r",
											"});\r",
											"\r",
											"// Valida√ß√£o de erro 00038 - Formato incompat√≠vel para baseCompetencia\r",
											"pm.test(\"Erro 00038 - Formato baseCompetencia incompat√≠vel\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro38 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00038\");\r",
											"    pm.expect(erro38).to.exist;\r",
											"    pm.expect(erro38.mensagemErro).to.eql(\r",
											"        \"Conte√∫do informado no atributo [baseCompetencia] incompat√≠vel com o formato definido: \\\"AAAAMM\\\", onde AAAA = Ano e MM = M√™s.\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"1199521455\",\r\n            \"email\": \"apitest@gftfgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"102024\",\r\n                    \"baseCompetencia\": \"102024\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - mesContribuicao_irregular(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida√ß√£o de c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida√ß√£o de erro 00018 - TipoBaseContribuicao e mmCompetencia\r",
											"pm.test(\"Erro 00018 - Mes irregular da contribuicao\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro18 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00018\");\r",
											"    pm.expect(erro18).to.exist;\r",
											"    pm.expect(erro18.mensagemErro).to.eql(\r",
											"        \"Para atributo [tipoBaseContribuicao] inclus√£o (1) necess√°rio que atributo [mmCompetencia] seja o m√™s regular da contribui√ß√£o.\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"1199521455\",\r\n            \"email\": \"apitest@gftfgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202401\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - idContribuicao_existente(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida√ß√£o de c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida√ß√£o de erro 00021 - idContribuicao j√° existente\r",
											"pm.test(\"Erro 00021 - idContribuicao j√° existente\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro21 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00021\");\r",
											"    pm.expect(erro21).to.exist;\r",
											"    pm.expect(erro21.mensagemErro).to.eql(\r",
											"        \"Conte√∫do informado no atributo [idContribuicao] j√° existente.\"\r",
											"    );\r",
											"});\r",
											"\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos\r",
											"var randomNumber = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber = randomNumber.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumber);\r",
											"\r",
											"// Mostrar no console o valor gerado (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransa√ß√£o: \" + formattedNumber);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - sem_idtrans_e_mmComp(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida√ß√£o de c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Erro 00013 - mmCompetencia √© obrigat√≥rio\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro13 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00013\");\r",
											"    pm.expect(erro13).to.exist;\r",
											"    pm.expect(erro13.mensagemErro).to.eql(\"O preenchimento do atributo [mmCompetencia] √© obrigat√≥rio.\");\r",
											"});\r",
											"// Valida√ß√£o de erro 00015\r",
											"pm.test(\"Erro 00015 - baseCompetencia √© obrigat√≥rio\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro15 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00015\");\r",
											"    pm.expect(erro15).to.exist;\r",
											"    pm.expect(erro15.mensagemErro).to.eql(\"O preenchimento do atributo [baseCompetencia] √© obrigat√≥rio.\");\r",
											"});\r",
											"\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"\",\r\n                    \"baseCompetencia\": \"\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - sem_codigotransa√ß√£o(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida que a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Valida dinamicamente a mensagem e o c√≥digo do erro\r",
											"(function () {\r",
											"    const response = pm.response.json(); // Transforma a resposta JSON\r",
											"    const codigoErro = response.detalhesErro[0].codigoErro; // Captura o c√≥digo do erro\r",
											"    const mensagemErro = response.detalhesErro[0].mensagemErro; // Captura a mensagem de erro\r",
											"\r",
											"    // Nome do teste concatenado com valores reais do retorno\r",
											"    pm.test(`${mensagemErro} e o c√≥digo do erro √©: ${codigoErro}`, function () {\r",
											"        // Valida o c√≥digo do erro\r",
											"        pm.expect(codigoErro).to.eql(\"00001\"); // Caso o valor esperado mude, ajuste aqui\r",
											"\r",
											"        // Valida a mensagem de erro\r",
											"        pm.expect(mensagemErro).to.eql(\"O preenchimento do atributo [codigoTransacao] √© obrigat√≥rio.\"); // Ajuste se necess√°rio\r",
											"    });\r",
											"})();\r",
											"\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codtransa√ß√£o_tam_menor_36(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar se o c√≥digo de status √© 422\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida se o atributo [codigoTransacao] tem exatamente 36 caracteres\r",
											"pm.test(\"Erro 00002 - [codigoTransacao] deve ter exatamente 36 caracteres\", function () {\r",
											"    var jsonData = pm.response.json(); // Obt√©m o corpo como JSON\r",
											"\r",
											"    // Verifica se o campo 'codigoTransacao' existe no corpo da resposta\r",
											"    pm.expect(jsonData).to.have.property(\"codigoTransacao\");\r",
											"\r",
											"    // Obt√©m o valor do campo 'codigoTransacao'\r",
											"    var codigoTransacao = jsonData.codigoTransacao;\r",
											"\r",
											"    // Calcula o comprimento e exibe no console\r",
											"    var length = codigoTransacao.length;\r",
											"    console.log(`Permiss√£o: 36 caracteres. Tamanho atual: ${length}.`);\r",
											"\r",
											"    // Valida se o comprimento do campo est√° incorreto\r",
											"    pm.expect(length).to.not.eql(36);\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00002\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [codigoTransacao] incompat√≠vel com tamanho definido (m√≠n/max de 36).\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"codigoinvalido\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codtransa√ß√£o_tam_maior_36(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar se o c√≥digo de status √© 422\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida se o atributo [codigoTransacao] tem exatamente 36 caracteres\r",
											"pm.test(\"Erro 00002 - [codigoTransacao] deve ter exatamente 36 caracteres\", function () {\r",
											"    var jsonData = pm.response.json(); // Obt√©m o corpo como JSON\r",
											"\r",
											"    // Verifica se o campo 'codigoTransacao' existe no corpo da resposta\r",
											"    pm.expect(jsonData).to.have.property(\"codigoTransacao\");\r",
											"\r",
											"    // Obt√©m o valor do campo 'codigoTransacao'\r",
											"    var codigoTransacao = jsonData.codigoTransacao;\r",
											"\r",
											"    // Calcula o comprimento e exibe no console\r",
											"    var length = codigoTransacao.length;\r",
											"    console.log(`Permiss√£o: 36 caracteres. Tamanho atual: ${length}.`);\r",
											"\r",
											"    // Valida se o comprimento do campo est√° incorreto\r",
											"    pm.expect(length).to.not.eql(36);\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00002\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [codigoTransacao] incompat√≠vel com tamanho definido (m√≠n/max de 36).\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"codigoinvalidoestetamanhoesuperiora36\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codigoLeiaute_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo HTTP √© 422\r",
											"pm.test(\"Erro 422 - O atributo [codigoLeiaute] √© obrigat√≥rio\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida se a mensagem de erro '00003' √© retornada corretamente\r",
											"pm.test(\"Erro 00003 - Preenchimento obrigat√≥rio do [codigoLeiaute]\", function () {\r",
											"    var jsonData = pm.response.json(); // Obt√©m o corpo como JSON\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00003\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [codigoLeiaute] √© obrigat√≥rio.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codigoLeiaute_invalido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo HTTP √© 422\r",
											"pm.test(\"Erro 422 - O atributo [codigoLeiaute] √© diferente do previsto\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida se a mensagem de erro '00004' √© retornada corretamente\r",
											"pm.test(\"Erro 00004 - Atributo [codigoLeiaute] com valor diferente do previsto\", function () {\r",
											"    var jsonData = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00004\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [codigoLeiaute] √© diferente do previsto.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"wwwwww\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codigoLeiaute_tam_menor_6(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo HTTP √© 422\r",
											"pm.test(\"Erro 422 - Atributo [codigoLeiaute] com quantidade de caracteres incompat√≠vel\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00028' sobre o campo 'codigoLeiaute'\r",
											"pm.test(\"Erro 00028 - Quantidade de caracteres no atributo [codigoLeiaute] incompat√≠vel\", function () {\r",
											"    var jsonData = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00028\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [codigoLeiaute] incompat√≠vel com tamanho definido (min 6 e max 7).\");\r",
											"\r",
											"    // Acessa o valor do atributo 'codigoLeiaute' enviado\r",
											"    var codigoLeiauteEnviado = pm.request.body.raw.match(/\"codigoLeiaute\":\\s*\"([^\"]+)\"/);\r",
											"    \r",
											"    if (codigoLeiauteEnviado) {\r",
											"        var codigoLeiaute = codigoLeiauteEnviado[1]; // Extrai o valor do campo 'codigoLeiaute'\r",
											"        var quantidadeCaracteres = codigoLeiaute.length; // Conta a quantidade de caracteres\r",
											"\r",
											"        // Exibe a quantidade de caracteres no console (apenas para debug)\r",
											"        console.log(\"Quantidade de caracteres no atributo [codigoLeiaute]: \" + quantidadeCaracteres);\r",
											"\r",
											"        \r",
											"    } else {\r",
											"        console.log(\"Campo 'codigoLeiaute' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - codigoLeiaute_tam_maior_7(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo HTTP √© 422\r",
											"pm.test(\"Erro 422 - Atributo [codigoLeiaute] com quantidade de caracteres incompat√≠vel\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00028' sobre o campo 'codigoLeiaute'\r",
											"pm.test(\"Erro 00028 - Quantidade de caracteres no atributo [codigoLeiaute] incompat√≠vel\", function () {\r",
											"    var jsonData = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00028\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [codigoLeiaute] incompat√≠vel com tamanho definido (min 6 e max 7).\");\r",
											"\r",
											"    // Acessa o valor do atributo 'codigoLeiaute' enviado\r",
											"    var codigoLeiauteEnviado = pm.request.body.raw.match(/\"codigoLeiaute\":\\s*\"([^\"]+)\"/);\r",
											"    \r",
											"    if (codigoLeiauteEnviado) {\r",
											"        var codigoLeiaute = codigoLeiauteEnviado[1]; // Extrai o valor do campo 'codigoLeiaute'\r",
											"        var quantidadeCaracteres = codigoLeiaute.length; // Conta a quantidade de caracteres\r",
											"\r",
											"        // Exibe a quantidade de caracteres no console (apenas para debug)\r",
											"        console.log(\"Quantidade de caracteres no atributo [codigoLeiaute]: \" + quantidadeCaracteres);\r",
											"\r",
											"        \r",
											"    } else {\r",
											"        console.log(\"Campo 'codigoLeiaute' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"111121uu\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - versaoLeiaute_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo de status HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Verifica se o c√≥digo de erro √© 00005 e a mensagem de erro est√° correta\r",
											"pm.test(\"Erro de valida√ß√£o de atributo 'versaoLeiaute' obrigat√≥rio\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.detalhesErro[0].codigoErro).to.eql(\"00005\");\r",
											"    pm.expect(responseJson.detalhesErro[0].mensagemErro).to.eql(\"O preenchimento do atributo [versaoLeiaute] √© obrigat√≥rio.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - versaoLeiaute_diferente(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo de status HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Verifica se o c√≥digo de erro √© 00006 e a mensagem de erro est√° correta\r",
											"pm.test(\"Erro de preenchimento do atributo 'versaoLeiaute' diferente do previsto\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.detalhesErro[0].codigoErro).to.eql(\"00006\");\r",
											"    pm.expect(responseJson.detalhesErro[0].mensagemErro).to.eql(\"Preenchimento do atributo [versaoLeiaute] diferente do previsto.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"A\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": \"202501\",\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - versaoLeiaute_tam_maior_1(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/// Verifica se o c√≥digo de status HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Verifica se o c√≥digo de erro √© 00006 e a mensagem de erro est√° correta\r",
											"pm.test(\"Erro de preenchimento do atributo 'versaoLeiaute' tamanho maior que 1\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    \r",
											"    // Captura o valor de 'versaoLeiaute' e conta os caracteres\r",
											"    var versaoLeiaute = pm.request.body ? JSON.parse(pm.request.body).data.versaoLeiaute : null;\r",
											"    if (versaoLeiaute) {\r",
											"        console.log(`Tamanho do campo 'versaoLeiaute': ${versaoLeiaute.length} caracteres`);\r",
											"    } else {\r",
											"        console.log(\"Campo 'versaoLeiaute' n√£o encontrado na requisi√ß√£o.\");\r",
											"    }\r",
											"    \r",
											"    // Valida o erro na resposta\r",
											"    pm.expect(responseJson.detalhesErro[0].codigoErro).to.eql(\"00006\");\r",
											"    pm.expect(responseJson.detalhesErro[0].mensagemErro).to.eql(\"Preenchimento do atributo [versaoLeiaute] diferente do previsto.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1222\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - CNPJ_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo de status HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Verifica se os erros est√£o presentes na resposta\r",
											"pm.test(\"Valida mensagens de erro para o campo 'cnpj' vazio\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    var detalhesErro = responseJson.detalhesErro;\r",
											"\r",
											"    // Valida erro 00007\r",
											"    pm.expect(detalhesErro[0].codigoErro).to.eql(\"00007\");\r",
											"    pm.expect(detalhesErro[0].mensagemErro).to.eql(\"O preenchimento do atributo [cnpj] √© obrigat√≥rio.\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - CNPJ_nao_reconhecido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo de status HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    // Exibe no console o status HTTP para confer√™ncia\r",
											"    console.log(\"Status HTTP:\", pm.response.status);\r",
											"});\r",
											"\r",
											"// Verifica se o c√≥digo de erro √© 00008 e a mensagem de erro est√° correta\r",
											"pm.test(\"Erro: CNPJ n√£o reconhecido\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"    var codigoErro = responseJson.detalhesErro[0].codigoErro;\r",
											"    var mensagemErro = responseJson.detalhesErro[0].mensagemErro;\r",
											"\r",
											"    // Asser√ß√µes\r",
											"    pm.expect(codigoErro).to.eql(\"00008\");\r",
											"    pm.expect(mensagemErro).to.eql(\"CNPJ n√£o reconhecido.\");\r",
											"\r",
											"    // Exibe no console os valores de detalhes do erro para confer√™ncia\r",
											"    console.log(\"C√≥digo de erro:\", codigoErro);\r",
											"    console.log(\"Mensagem de erro:\", mensagemErro);\r",
											"    \r",
											"    // Mensagens adicionais no relat√≥rio\r",
											"    pm.test(\"Mensagem de erro detalhada\", function () {\r",
											"        pm.expect(codigoErro).to.eql(\"00008\");\r",
											"        pm.expect(mensagemErro).to.eql(\"CNPJ n√£o reconhecido.\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// Armazenar detalhes no ambiente ou como vari√°veis globais, se necess√°rio\r",
											"pm.environment.set(\"codigoErro\", pm.response.json().detalhesErro[0].codigoErro);\r",
											"pm.environment.set(\"mensagemErro\", pm.response.json().detalhesErro[0].mensagemErro);\r",
											"\r",
											"// Opcional: Exibir no console as vari√°veis\r",
											"console.log(\"C√≥digo de erro (armazenado):\", pm.environment.get(\"codigoErro\"));\r",
											"console.log(\"Mensagem de erro (armazenada):\", pm.environment.get(\"mensagemErro\"));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"31486098\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - CNPJ_tam_maior_8(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00008' sobre o campo 'cnpj' - CNPJ n√£o reconhecido\r",
											"pm.test(\"Erro 00008 - CNPJ n√£o reconhecido\", function () {\r",
											"    var jsonData = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00008\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"CNPJ n√£o reconhecido.\");\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00029' sobre o campo 'cnpj' - Quantidade de caracteres incompat√≠vel\r",
											"pm.test(\"Erro 00029 - Quantidade de caracteres no atributo [cnpj] incompat√≠vel\", function () {\r",
											"    var jsonData = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00029\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [cnpj] incompat√≠vel com tamanho definido, verifique se est√° com 8 caracteres e zeros a esquerda (m√≠n e m√°x de 8).\");\r",
											"\r",
											"    // Acessa o valor do atributo 'cnpj' enviado\r",
											"    var cnpjEnviado = pm.request.body.raw.match(/\"cnpj\":\\s*\"([^\"]+)\"/);\r",
											"    \r",
											"    if (cnpjEnviado) {\r",
											"        var cnpj = cnpjEnviado[1]; // Extrai o valor do campo 'cnpj'\r",
											"        var quantidadeCaracteres = cnpj.length; // Conta a quantidade de caracteres\r",
											"\r",
											"        // Exibe a quantidade de caracteres no console (apenas para debug)\r",
											"        console.log(\"Quantidade de caracteres no atributo [cnpj]: \" + quantidadeCaracteres);\r",
											"\r",
											"        // Se a quantidade de caracteres for maior que 8, exibe uma mensagem espec√≠fica\r",
											"        if (quantidadeCaracteres > 8) {\r",
											"            console.log(`Tamanho do 'cnpj' superior a 8: Tamanho informado: ${quantidadeCaracteres}`);\r",
											"        }\r",
											"\r",
											"        // Mensagem adicional para o relat√≥rio do Newman\r",
											"        pm.test(`Quantidade de caracteres no atributo 'cnpj' √© ${quantidadeCaracteres}`, function () {\r",
											"            // N√ÉO espera que seja no m√°ximo 8, apenas registra o erro\r",
											"            if (quantidadeCaracteres > 8) {\r",
											"                console.log(\"Aviso: O n√∫mero de caracteres no campo 'cnpj' √© maior que o esperado (8 caracteres).\");\r",
											"            }\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Campo 'cnpj' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"607011900\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - PARTE_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00009' sobre o campo 'parte' - Atributo obrigat√≥rio\r",
											"pm.test(\"Erro 00009 - Atributo [parte] √© obrigat√≥rio\", function () {\r",
											"    var jsonData = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00009\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [parte] √© obrigat√≥rio.\");\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00030' sobre o campo 'parte' - Quantidade de caracteres incompat√≠vel\r",
											"pm.test(\"Erro 00030 - Quantidade de caracteres no atributo [parte] incompat√≠vel\", function () {\r",
											"    var jsonData = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00030\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [parte] incompat√≠vel com tamanho definido (m√≠n de 5 m√°x 100).\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - PARTE_tam_menor_5(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro '00030' sobre o campo 'parte' - Quantidade de caracteres incompat√≠vel\r",
											"pm.test(\"Erro 00030 - Quantidade de caracteres no atributo [parte] incompat√≠vel menor que 5\", function () {\r",
											"    var jsonData = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(jsonData).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = jsonData.detalhesErro.find(e => e.codigoErro === \"00030\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [parte] incompat√≠vel com tamanho definido (m√≠n de 5 m√°x 100).\");\r",
											"    \r",
											"    // Acessa o valor do atributo 'parte' enviado\r",
											"    var parte = pm.request.body.raw.match(/\"parte\":\\s*\"([^\"]+)\"/);\r",
											"    \r",
											"    if (parte) {\r",
											"        var parteValor = parte[1]; // Extrai o valor do campo 'parte'\r",
											"        var quantidadeCaracteres = parteValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"        // Exibe a quantidade de caracteres no console (apenas para debug)\r",
											"        console.log(\"Quantidade de caracteres no atributo [parte]: \" + quantidadeCaracteres);\r",
											"\r",
											"        // Cria um teste para mostrar a quantidade de caracteres no relat√≥rio\r",
											"        pm.test(`Quantidade de caracteres no atributo 'parte' √© ${quantidadeCaracteres}`, function () {\r",
											"            console.log(`Quantidade de caracteres no campo 'parte': ${quantidadeCaracteres}`);\r",
											"            pm.expect(quantidadeCaracteres).to.be.at.most(100); // Verifica se est√° dentro do limite m√°ximo\r",
											"        });\r",
											"\r",
											"        // Verifica se a quantidade de caracteres est√° dentro do intervalo permitido\r",
											"        var minCaracteres = 5;\r",
											"        var maxCaracteres = 100;\r",
											"\r",
											"        if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"            console.log(`Erro: O campo 'parte' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido de ${minCaracteres} a ${maxCaracteres}.`);\r",
											"        } else {\r",
											"            console.log(`O campo 'parte' est√° dentro do intervalo permitido: ${quantidadeCaracteres} caracteres.`);\r",
											"        }\r",
											"    } else {\r",
											"        console.log(\"Campo 'parte' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"CINC\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - PARTE_tam_maior_100(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Acessa o valor do atributo 'parte' enviado\r",
											"var parte = pm.request.body.raw.match(/\"parte\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (parte) {\r",
											"    var parteValor = parte[1]; // Extrai o valor do campo 'parte'\r",
											"    var quantidadeCaracteres = parteValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Registra a quantidade de caracteres no campo 'parte' no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no atributo 'parte' √© ${quantidadeCaracteres}`, function () {\r",
											"        // Define o limite m√°ximo de caracteres permitido\r",
											"        var maxCaracteres = 100;\r",
											"\r",
											"        // Registra a quantidade de caracteres, mas n√£o faz falhar a asser√ß√£o\r",
											"        console.log(`Quantidade de caracteres no campo 'parte' √© ${quantidadeCaracteres}, limite m√°ximo de ${maxCaracteres}`);\r",
											"\r",
											"        // Verifica apenas para exibir no log se ultrapassou o limite\r",
											"        if (quantidadeCaracteres > maxCaracteres) {\r",
											"            console.log(\"Aviso: O n√∫mero de caracteres no campo 'parte' √© maior que o esperado (100 caracteres).\");\r",
											"        }\r",
											"        \r",
											"        // N√£o falha a asser√ß√£o, apenas registra no log se exceder o limite\r",
											"        if (quantidadeCaracteres > maxCaracteres) {\r",
											"            pm.expect(true).to.eql(true); // N√£o falha, s√≥ loga o erro\r",
											"        } else {\r",
											"            pm.expect(quantidadeCaracteres).to.be.at.most(maxCaracteres); // Verifica se est√° no limite\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    console.log(\"Campo 'parte' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para a quantidade de caracteres no campo 'parte'\r",
											"pm.test(\"Erro 00030 - Quantidade de caracteres no atributo 'parte' incompat√≠vel\", function () {\r",
											"    var responseJson = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(responseJson).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00030\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [parte] incompat√≠vel com tamanho definido (m√≠n de 5 m√°x 100).\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrrr\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Nome_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida o c√≥digo e a mensagem do erro \"00010\"\r",
											"pm.test(\"Erro 00010 - nome obrigat√≥rio - n√£o pode ser vazio\", function () {\r",
											"    var responseJson = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00010\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [nome] √© obrigat√≥rio.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"\",\r\n            \"telefone\": \"1111111111\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Nome_tam_menor_5(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Captura e registra o valor do campo 'nome' enviado\r",
											"var nomeMatch = pm.request.body.raw.match(/\"nome\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (nomeMatch) {\r",
											"    var nomeValor = nomeMatch[1]; // Extrai o valor do campo 'nome'\r",
											"    var quantidadeCaracteres = nomeValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Mostra no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'nome' informado: ${nomeValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'nome': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona um teste para registrar a quantidade de caracteres no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'nome' √© ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // N√£o permite falha, apenas registra o valor\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando se est√° dentro do intervalo permitido\r",
											"    var minCaracteres = 5;\r",
											"    var maxCaracteres = 100;\r",
											"\r",
											"    if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"        console.log(`Aviso: O campo 'nome' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    } else {\r",
											"        console.log(`O campo 'nome' est√° dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'nome' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'nome'\r",
											"pm.test(\"Erro 00031 - Quantidade de caracteres no atributo [nome] incompat√≠vel - inferior a 5\", function () {\r",
											"    // Procura o erro espec√≠fico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00031\");\r",
											"\r",
											"    // N√£o falha, apenas verifica e registra no log se o erro foi encontrado\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [nome] incompat√≠vel com tamanho definido (m√≠n de 5 e m√°x de100).\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00031 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"1234\",\r\n            \"telefone\": \"1111111111\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Nome_tam_maior_100(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Captura e registra o valor do campo 'nome' enviado\r",
											"var nomeMatch = pm.request.body.raw.match(/\"nome\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (nomeMatch) {\r",
											"    var nomeValor = nomeMatch[1]; // Extrai o valor do campo 'nome'\r",
											"    var quantidadeCaracteres = nomeValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Mostra no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'nome' informado: ${nomeValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'nome': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Se a quantidade de caracteres ultrapassar o limite de 100, exibe uma mensagem de aviso\r",
											"    if (quantidadeCaracteres > 100) {\r",
											"        console.log(`Aviso: O campo 'nome' tem ${quantidadeCaracteres} caracteres, que ultrapassam o limite m√°ximo de 100 caracteres.`);\r",
											"    } else {\r",
											"        console.log(`O campo 'nome' est√° dentro do limite permitido de 100 caracteres.`);\r",
											"    }\r",
											"\r",
											"    // Adiciona um teste para registrar a quantidade de caracteres no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'nome' √© ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // N√£o permite falha, apenas registra o valor\r",
											"    });\r",
											"} else {\r",
											"    console.log(\"Campo 'nome' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'nome'\r",
											"pm.test(\"Erro 00031 - Quantidade de caracteres no atributo [nome] incompat√≠vel - superior a 100\", function () {\r",
											"    // Procura o erro espec√≠fico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00031\");\r",
											"\r",
											"    // N√£o falha, apenas verifica e registra no log se o erro foi encontrado\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [nome] incompat√≠vel com tamanho definido (m√≠n de 5 e m√°x de100).\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00031 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"12345678910123456789112345678911234567891123456789112345678911234567891123456789112345678911234567891\",\r\n            \"telefone\": \"1111111111\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Telefone_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'telefone'\r",
											"pm.test(\"Erro 00011 - O preenchimento do atributo [telefone] √© obrigat√≥rio\", function () {\r",
											"    var responseJson = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"\r",
											"    // Verifica se h√° um array de erros na chave 'detalhesErro'\r",
											"    pm.expect(responseJson).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00011\");\r",
											"    pm.expect(erro).to.exist; // Garante que o erro foi encontrado\r",
											"\r",
											"    // Valida a mensagem do erro\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [telefone] √© obrigat√≥rio.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Telefone_letras(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida que a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro\r",
											"pm.test(\"Valida mensagem de erro\", function () {\r",
											"    const response = pm.response.json(); // Transforma a resposta JSON\r",
											"    const esperadoMensagemErro = \"Conte√∫do informado no atributo [telefone] est√° incompat√≠vel com o formato definido: DDTTTTTTTTT.\";\r",
											"\r",
											"    // Acessa a mensagem do erro no array 'detalhesErro'\r",
											"    pm.expect(response.detalhesErro[0].mensagemErro).to.eql(esperadoMensagemErro);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"abcdefghig\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Telefone_tam_menor_10(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Captura e registra o valor do campo 'telefone' enviado\r",
											"var telefoneMatch = pm.request.body.raw.match(/\"telefone\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (telefoneMatch) {\r",
											"    var telefoneValor = telefoneMatch[1]; // Extrai o valor do campo 'telefone'\r",
											"    var quantidadeCaracteres = telefoneValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Mostra no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'telefone' informado: ${telefoneValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'telefone': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona um teste para registrar a quantidade de caracteres no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'telefone' √© ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // N√£o permite falha, apenas registra o valor\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando se est√° dentro do intervalo permitido\r",
											"    var minCaracteres = 10;\r",
											"    var maxCaracteres = 11;\r",
											"\r",
											"    if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"        console.log(`Aviso: O campo 'telefone' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    } else {\r",
											"        console.log(`O campo 'telefone' est√° dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'telefone' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'telefone'\r",
											"pm.test(\"Erro 00032 - Quantidade de caracteres no atributo [telefone] incompat√≠vel - inferior a 10\", function () {\r",
											"    // Procura o erro espec√≠fico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00032\");\r",
											"\r",
											"    // N√£o falha, apenas verifica e registra no log se o erro foi encontrado\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [telefone] incompat√≠vel com tamanho definido (m√≠n de 10 e m√°x 11).\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00032 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"123456789\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Telefone_tam_maior_11(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Captura e registra o valor do campo 'telefone' enviado\r",
											"var telefoneMatch = pm.request.body.raw.match(/\"telefone\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (telefoneMatch) {\r",
											"    var telefoneValor = telefoneMatch[1]; // Extrai o valor do campo 'telefone'\r",
											"    var quantidadeCaracteres = telefoneValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Mostra no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'telefone' informado: ${telefoneValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'telefone': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona um teste para registrar a quantidade de caracteres no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'telefone' √© ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // N√£o permite falha, apenas registra o valor\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando se est√° dentro do intervalo permitido\r",
											"    var minCaracteres = 10;\r",
											"    var maxCaracteres = 11;\r",
											"\r",
											"    if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"        console.log(`Aviso: O campo 'telefone' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    } else {\r",
											"        console.log(`O campo 'telefone' est√° dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'telefone' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'telefone'\r",
											"pm.test(\"Erro 00032 - Quantidade de caracteres no atributo [telefone] incompat√≠vel - superior a 11\", function () {\r",
											"    // Procura o erro espec√≠fico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00032\");\r",
											"\r",
											"    // N√£o falha, apenas verifica e registra no log se o erro foi encontrado\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [telefone] incompat√≠vel com tamanho definido (m√≠n de 10 e m√°x 11).\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00032 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"111111111144\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 -Email_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Captura e registra o valor do campo 'telefone' enviado\r",
											"var telefoneMatch = pm.request.body.raw.match(/\"telefone\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (telefoneMatch) {\r",
											"    var telefoneValor = telefoneMatch[1]; // Extrai o valor do campo 'telefone'\r",
											"    var quantidadeCaracteres = telefoneValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Mostra no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'telefone' informado: ${telefoneValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'telefone': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona um teste para registrar a quantidade de caracteres no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'telefone' √© ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // N√£o permite falha, apenas registra o valor\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando se est√° dentro do intervalo permitido\r",
											"    var minCaracteres = 10;\r",
											"    var maxCaracteres = 11;\r",
											"\r",
											"    if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"        console.log(`Aviso: O campo 'telefone' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    } else {\r",
											"        console.log(`O campo 'telefone' est√° dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'telefone' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// Valida a mensagem de erro para o campo 'telefone'\r",
											"pm.test(\"Erro 00032 - Quantidade de caracteres no atributo [telefone] incompat√≠vel - superior a 11\", function () {\r",
											"    // Procura o erro espec√≠fico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00032\");\r",
											"\r",
											"    // N√£o falha, apenas verifica e registra no log se o erro foi encontrado\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [telefone] incompat√≠vel com tamanho definido (m√≠n de 10 e m√°x 11).\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00032 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_tam_menor_10(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro no campo 'email'\r",
											"pm.test(\"Erro 00034: Quantidade de caracteres informada no atributo [email] incompat√≠vel com tamanho definido (min de 10 e max 40).\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"\r",
											"    // Verifica se h√° um array de erros no campo 'detalhesErro'\r",
											"    pm.expect(responseJson).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00034\");\r",
											"\r",
											"    if (erro) {\r",
											"        var mensagemErro = `Erro ${erro.codigoErro}: ${erro.mensagemErro}`;\r",
											"        \r",
											"        // Exibe a mensagem de erro no console\r",
											"        console.log(mensagemErro);\r",
											"\r",
											"        // Adiciona no relat√≥rio do Newman\r",
											"        pm.expect(true).to.eql(true); // Apenas registra sem causar falha\r",
											"    } else {\r",
											"        console.log(\"Erro 00034 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Captura o valor do campo 'email' enviado no corpo da requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var emailValor = emailMatch[1]; // Extrai o valor do campo 'email'\r",
											"    var quantidadeCaracteres = emailValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Apresenta no console\r",
											"    console.log(`Quantidade de caracteres no campo 'email': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'email' √© ${quantidadeCaracteres}`, function () {\r",
											"        var minCaracteres = 10;\r",
											"        var maxCaracteres = 40;\r",
											"\r",
											"        // Apenas registra no log, sem falhar o teste\r",
											"        if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"            console.log(`Erro: O campo 'email' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido de ${minCaracteres} a ${maxCaracteres}.`);\r",
											"        } else {\r",
											"            console.log(`O campo 'email' est√° dentro do intervalo permitido: ${quantidadeCaracteres} caracteres.`);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "f158a2c0f7210a964ee13c6b43505aa0",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "cf1ed05d7372e3219d2d1c111af548b3",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"menorq@10\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_tam_maior_40(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro no campo 'email'\r",
											"pm.test(\"Erro 00034: Quantidade de caracteres informada no atributo [email] incompat√≠vel com tamanho definido (min de 10 e max 40).\", function () {\r",
											"    var responseJson = pm.response.json();\r",
											"\r",
											"    // Verifica se h√° um array de erros no campo 'detalhesErro'\r",
											"    pm.expect(responseJson).to.have.property(\"detalhesErro\").that.is.an(\"array\");\r",
											"\r",
											"    // Procura o erro espec√≠fico no array\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00034\");\r",
											"\r",
											"    if (erro) {\r",
											"        var mensagemErro = `Erro ${erro.codigoErro}: ${erro.mensagemErro}`;\r",
											"        \r",
											"        // Exibe a mensagem de erro no console\r",
											"        console.log(mensagemErro);\r",
											"\r",
											"        // Adiciona no relat√≥rio do Newman\r",
											"        pm.expect(true).to.eql(true); // Apenas registra sem causar falha\r",
											"    } else {\r",
											"        console.log(\"Erro 00034 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Captura o valor do campo 'email' enviado no corpo da requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var emailValor = emailMatch[1]; // Extrai o valor do campo 'email'\r",
											"    var quantidadeCaracteres = emailValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // Apresenta no console\r",
											"    console.log(`Quantidade de caracteres no campo 'email': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // Adiciona no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'email' √© ${quantidadeCaracteres}`, function () {\r",
											"        var minCaracteres = 10;\r",
											"        var maxCaracteres = 40;\r",
											"\r",
											"        // Apenas registra no log, sem falhar o teste\r",
											"        if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"            console.log(`Erro: O campo 'email' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido de ${minCaracteres} a ${maxCaracteres}.`);\r",
											"        } else {\r",
											"            console.log(`O campo 'email' est√° dentro do intervalo permitido: ${quantidadeCaracteres} caracteres.`);\r",
											"        }\r",
											"    });\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"menorq@10ghjyuiopqwertyuiopasdfghjklpoiqw\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido1(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relat√≥rio do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o c√≥digo do erro e a mensagem no console\r",
											"        console.log(`C√≥digo do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relat√≥rio do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conte√∫do informado no atributo [email] incompat√≠vel com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com c√≥digo 00035 n√£o encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 n√£o retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado n√£o seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"@silvio.teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido2(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relat√≥rio do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o c√≥digo do erro e a mensagem no console\r",
											"        console.log(`C√≥digo do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relat√≥rio do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conte√∫do informado no atributo [email] incompat√≠vel com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com c√≥digo 00035 n√£o encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 n√£o retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado n√£o seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.teste.com@\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido3(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relat√≥rio do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o c√≥digo do erro e a mensagem no console\r",
											"        console.log(`C√≥digo do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relat√≥rio do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conte√∫do informado no atributo [email] incompat√≠vel com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com c√≥digo 00035 n√£o encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 n√£o retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado n√£o seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"@@@@@@@\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido4(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relat√≥rio do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o c√≥digo do erro e a mensagem no console\r",
											"        console.log(`C√≥digo do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relat√≥rio do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conte√∫do informado no atributo [email] incompat√≠vel com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com c√≥digo 00035 n√£o encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 n√£o retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado n√£o seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.teste.com.br\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido5(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relat√≥rio do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o c√≥digo do erro e a mensagem no console\r",
											"        console.log(`C√≥digo do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relat√≥rio do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conte√∫do informado no atributo [email] incompat√≠vel com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com c√≥digo 00035 n√£o encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 n√£o retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado n√£o seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silviotes@tecombr\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido6(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relat√≥rio do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o c√≥digo do erro e a mensagem no console\r",
											"        console.log(`C√≥digo do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relat√≥rio do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conte√∫do informado no atributo [email] incompat√≠vel com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com c√≥digo 00035 n√£o encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 n√£o retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado n√£o seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio @teste.com.br\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido7(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relat√≥rio do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o c√≥digo do erro e a mensagem no console\r",
											"        console.log(`C√≥digo do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relat√≥rio do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conte√∫do informado no atributo [email] incompat√≠vel com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com c√≥digo 00035 n√£o encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 n√£o retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado n√£o seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@%&*().com.br\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido8(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relat√≥rio do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o c√≥digo do erro e a mensagem no console\r",
											"        console.log(`C√≥digo do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relat√≥rio do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conte√∫do informado no atributo [email] incompat√≠vel com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com c√≥digo 00035 n√£o encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 n√£o retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado n√£o seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@t√©st√©.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido9(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relat√≥rio do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o c√≥digo do erro e a mensagem no console\r",
											"        console.log(`C√≥digo do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relat√≥rio do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conte√∫do informado no atributo [email] incompat√≠vel com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com c√≥digo 00035 n√£o encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 n√£o retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado n√£o seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"         \"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - Email_formato_invalido10(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'email' enviado na requisi√ß√£o\r",
											"var emailMatch = pm.request.body.raw.match(/\"email\":\\s*\"([^\"]+)\"/);\r",
											"\r",
											"if (emailMatch) {\r",
											"    var email = emailMatch[1]; // Extrai o valor do campo email\r",
											"\r",
											"    // Exibe o valor do campo 'email' no relat√≥rio do Newman\r",
											"    pm.test(`Campo 'email' informado: ${email}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'email' informado: ${email}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'email' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00035\");\r",
											"\r",
											"pm.test(`Erro 00035 - Mensagem de erro validada.`, function () {\r",
											"    if (erro) {\r",
											"        // Exibe o c√≥digo do erro e a mensagem no console\r",
											"        console.log(`C√≥digo do erro: ${erro.codigoErro}`);\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // Valida a mensagem de erro e registra no relat√≥rio do Newman\r",
											"        pm.test(`Mensagem de erro: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(erro.mensagemErro).to.include(\"Conte√∫do informado no atributo [email] incompat√≠vel com formato definido: <<usuario>>@<<provedor>>.\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro com c√≥digo 00035 n√£o encontrado na resposta.\");\r",
											"        pm.test(\"Erro 00035 n√£o retornado pela API.\", function () {\r",
											"            pm.expect(false).to.eql(true); // Marca como falha caso o erro esperado n√£o seja encontrado\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"@teste.com.br\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - tipobaseContribuicao_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Analisa o JSON de resposta\r",
											"let responseJson = pm.response.json();\r",
											"\r",
											"// Valida a mensagem de erro espec√≠fica\r",
											"pm.test(\"Erro 00017 - tipoBaseContribuicao obrigat√≥rio\", function () {\r",
											"    let erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00017\");\r",
											"    pm.expect(erro).to.exist;\r",
											"    pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [tipoBaseContribuicao] √© obrigat√≥rio.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.aulik@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - tipobaseContribuicao_nao_reconhecido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Verifica se o status HTTP da resposta √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida que o status √© 422\r",
											"});\r",
											"\r",
											"// 2. Captura o c√≥digo de erro e a mensagem de erro para 'tipoBaseContribuicao'\r",
											"pm.test(\"Erro 00040 - O conte√∫do informado no atributo [tipoBaseContribuicao] n√£o reconhecido pelo sistema.\", function () {\r",
											"    const resposta = pm.response.json(); // Pega a resposta JSON\r",
											"    const erro = resposta.detalhesErro && resposta.detalhesErro[0]; // Acessa o primeiro item de 'detalhesErro'\r",
											"\r",
											"    if (erro) {\r",
											"        const codigoErro = erro.codigoErro; // Captura o c√≥digo de erro\r",
											"        const mensagemErro = erro.mensagemErro; // Captura a mensagem de erro\r",
											"\r",
											"        // Exibe o c√≥digo de erro e a mensagem de erro concatenada no console\r",
											"        const mensagemConcatenada = `Erro ${codigoErro} - ${mensagemErro}`;\r",
											"        console.log(mensagemConcatenada); \r",
											"\r",
											"        // Valida que o c√≥digo de erro seja '00040'\r",
											"        pm.expect(codigoErro).to.eql(\"00040\"); \r",
											"\r",
											"        // Valida que a mensagem de erro contenha 'tipoBaseContribuicao'\r",
											"        pm.expect(mensagemErro).to.include(\"tipoBaseContribuicao\");\r",
											"\r",
											"        // Exibe a mensagem concatenada como teste\r",
											"        pm.expect(mensagemConcatenada).to.eql(`Erro 00040 - O conte√∫do informado no atributo [tipoBaseContribuicao] n√£o reconhecido pelo sistema.`);\r",
											"    } else {\r",
											"        console.log(\"Erro n√£o encontrado no campo 'detalhesErro'.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"tester@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"a\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - tipobaseContribuicao_tam_maior_1(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Verifica se o status HTTP da resposta √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida que o status √© 422\r",
											"});\r",
											"\r",
											"// 2. Captura o valor real do campo 'tipoBaseContribuicao' enviado na requisi√ß√£o\r",
											"var requestJson = pm.request.body.raw; // Captura o corpo da requisi√ß√£o\r",
											"\r",
											"// Extrai o valor de 'tipoBaseContribuicao' da requisi√ß√£o\r",
											"var tipoBaseContribuicaoMatch = requestJson.match(/\"tipoBaseContribuicao\":\\s*\"([^\"]+)\"/);\r",
											"var tipoBaseContribuicao = tipoBaseContribuicaoMatch ? tipoBaseContribuicaoMatch[1] : ''; // Se encontrado, captura o valor\r",
											"\r",
											"// Conta a quantidade de caracteres do campo 'tipoBaseContribuicao'\r",
											"const quantidadeCaracteres = tipoBaseContribuicao.length;\r",
											"const limiteMaximo = 1; // Defini√ß√£o do limite m√°ximo permitido\r",
											"\r",
											"// Mensagem de quantidade de caracteres e limite\r",
											"const mensagemQuantidade = `A quantidade de caracteres no campo 'tipoBaseContribui√ß√£o' √© ${quantidadeCaracteres}, e excede o permitido que √© ${limiteMaximo}`;\r",
											"\r",
											"// 3. Registra a mensagem de quantidade no relat√≥rio do Newman\r",
											"pm.test(mensagemQuantidade, function () {\r",
											"    pm.expect(quantidadeCaracteres).to.be.greaterThan(limiteMaximo); // Registra como falha quando excede o limite\r",
											"});\r",
											"\r",
											"// 4. Registra o valor do campo 'tipoBaseContribuicao'\r",
											"pm.test(`Valor do campo 'tipoBaseContribuicao': ${tipoBaseContribuicao}`, function () {\r",
											"    pm.expect(tipoBaseContribuicao).to.be.a('string'); // Verifica se o valor √© uma string\r",
											"});\r",
											"\r",
											"// 5. Valida o c√≥digo de erro e a mensagem de erro retornada\r",
											"pm.test(\"Erro 00041 - Quantidade de caracteres informada no atributo 'tipoBaseContribuicao' incompat√≠vel com tamanho definido (m√°ximo de 1).\", function () {\r",
											"    const respostaJson = pm.response.json(); // Obt√©m a resposta JSON\r",
											"\r",
											"    // Procura o erro espec√≠fico no array 'detalhesErro'\r",
											"    const erro = respostaJson.detalhesErro && respostaJson.detalhesErro.find(e => e.codigoErro === \"00041\");\r",
											"\r",
											"    // Verifica se o erro foi encontrado e a mensagem est√° correta\r",
											"    pm.expect(erro).to.exist; // Verifica se o erro existe\r",
											"\r",
											"    if (erro) {\r",
											"        // Registra a mensagem de erro no relat√≥rio do Newman\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [tipoBaseContribuicao] incompat√≠vel com tamanho definido (m√°ximo de 1).\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.aulik@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"11\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - idContribuicao1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP da resposta\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida o c√≥digo de erro e a mensagem de erro\r",
											"pm.test(\"Erro 00020 - O preenchimento do atributo 'id_Contribuicao' √© obrigat√≥rio\", function () {\r",
											"    var respostaJson = pm.response.json(); // Obt√©m a resposta JSON\r",
											"\r",
											"    // Procura o erro espec√≠fico no array 'detalhesErro'\r",
											"    var erro = respostaJson.detalhesErro && respostaJson.detalhesErro.find(e => e.codigoErro === \"00020\");\r",
											"\r",
											"    // Verifica se o erro foi encontrado e a mensagem est√° correta\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"O preenchimento do atributo [id_Contribuicao] √© obrigat√≥rio.\");\r",
											"    } else {\r",
											"        console.log(\"Erro 00020 n√£o encontrado na resposta da API.\"); // Log caso o erro n√£o seja encontrado\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.tadeu@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - idContribuicao1_menor_28(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Verifica se a estrutura correta existe na resposta antes de tentar acessar\r",
											"if (responseJson.detalhesErro && responseJson.detalhesErro.length > 0) {\r",
											"    // Captura a mensagem de erro relacionada ao campo 'idContribuicao'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00042\");\r",
											"\r",
											"    if (erro) {\r",
											"        // Exibe a mensagem de erro no console\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // 3. Valida a mensagem de erro para o campo 'idContribuicao'\r",
											"        pm.test(\"Erro 00042 - Quantidade de caracteres informada no atributo 'idContribuicao' incompat√≠vel\", function () {\r",
											"            pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informado no atributo [idContribuicao] incompat√≠vel com tamanho definido (m√≠n/m√°x de 28).\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro 00042 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"A estrutura de dados esperada n√£o foi encontrada na resposta.\");\r",
											"}\r",
											"\r",
											"// 4. Captura e registra a quantidade de caracteres do campo 'idContribuicao' (no exemplo n√£o h√° valor de 'idContribuicao', mas considerando uma estrutura normal)\r",
											"var idContribuicao = \"1111111111111yh20w0108bnhe4\";  // Exemplo de valor do campo 'idContribuicao', substitua se necess√°rio\r",
											"var quantidadeCaracteres = idContribuicao.length;  // Conta a quantidade de caracteres\r",
											"\r",
											"// Exibe o valor e a quantidade de caracteres no console do Postman\r",
											"console.log(`Campo 'idContribuicao' informado: ${idContribuicao}`);\r",
											"console.log(`Quantidade de caracteres no campo 'idContribuicao': ${quantidadeCaracteres}`);\r",
											"\r",
											"// Registra a quantidade de caracteres no relat√≥rio do Newman\r",
											"pm.test(`Quantidade de caracteres no campo 'idContribuicao' √© ${quantidadeCaracteres}`, function () {\r",
											"    pm.expect(true).to.eql(true); // N√£o permite falha, apenas registra o valor\r",
											"});\r",
											"\r",
											"// Adiciona logs indicando se a quantidade de caracteres est√° dentro do intervalo permitido\r",
											"var minCaracteres = 1;  // Defina o valor m√≠nimo\r",
											"var maxCaracteres = 28; // Defina o valor m√°ximo\r",
											"\r",
											"if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"    console.log(`Aviso: O campo 'idContribuicao' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"} else {\r",
											"    console.log(`O campo 'idContribuicao' est√° dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.teste@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"1111111111111yh20w0108bnhe4\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - idContribuicao1_maior_28(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Verifica se a estrutura correta existe na resposta antes de tentar acessar\r",
											"if (responseJson.detalhesErro && responseJson.detalhesErro.length > 0) {\r",
											"    // Captura a mensagem de erro relacionada ao campo 'idContribuicao'\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00042\");\r",
											"\r",
											"    if (erro) {\r",
											"        // Exibe a mensagem de erro no console\r",
											"        console.log(`Mensagem de erro: ${erro.mensagemErro}`);\r",
											"\r",
											"        // 3. Valida a mensagem de erro para o campo 'idContribuicao'\r",
											"        pm.test(\"Erro 00042 - Quantidade de caracteres informada no atributo 'idContribuicao' incompat√≠vel\", function () {\r",
											"            pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informado no atributo [idContribuicao] incompat√≠vel com tamanho definido (m√≠n/m√°x de 28).\");\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Erro 00042 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"A estrutura de dados esperada n√£o foi encontrada na resposta.\");\r",
											"}\r",
											"\r",
											"// 4. Captura e registra a quantidade de caracteres do campo 'idContribuicao' (no exemplo n√£o h√° valor de 'idContribuicao', mas considerando uma estrutura normal)\r",
											"var idContribuicao = \"1111111111111yh20w0108bnhe423\";  // Exemplo de valor do campo 'idContribuicao', substitua se necess√°rio\r",
											"var quantidadeCaracteres = idContribuicao.length;  // Conta a quantidade de caracteres\r",
											"\r",
											"// Exibe o valor e a quantidade de caracteres no console do Postman\r",
											"console.log(`Campo 'idContribuicao' informado: ${idContribuicao}`);\r",
											"console.log(`Quantidade de caracteres no campo 'idContribuicao': ${quantidadeCaracteres}`);\r",
											"\r",
											"// Registra a quantidade de caracteres no relat√≥rio do Newman\r",
											"pm.test(`Quantidade de caracteres no campo 'idContribuicao' √© ${quantidadeCaracteres}`, function () {\r",
											"    pm.expect(true).to.eql(true); // N√£o permite falha, apenas registra o valor\r",
											"});\r",
											"\r",
											"// Adiciona logs indicando se a quantidade de caracteres est√° dentro do intervalo permitido\r",
											"var minCaracteres = 1;  // Defina o valor m√≠nimo\r",
											"var maxCaracteres = 28; // Defina o valor m√°ximo\r",
											"\r",
											"if (quantidadeCaracteres < minCaracteres || quantidadeCaracteres > maxCaracteres) {\r",
											"    console.log(`Aviso: O campo 'idContribuicao' tem ${quantidadeCaracteres} caracteres, fora do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"} else {\r",
											"    console.log(`O campo 'idContribuicao' est√° dentro do intervalo permitido (${minCaracteres}-${maxCaracteres}).`);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"1111111111111yh20w0108bnhe423\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - TipoContribuicao1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida que o status HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida que a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro e o c√≥digo do erro\r",
											"pm.test(\"O preenchimento do atributo [tipoContribuicao] √© obrigat√≥rio.\", function () {\r",
											"    const response = pm.response.json(); // Transforma a resposta JSON\r",
											"    const codigoErroEsperado = \"00023\";\r",
											"    const mensagemErroEsperada = \"O preenchimento do atributo [tipoContribuicao] √© obrigat√≥rio.\";\r",
											"\r",
											"    // Valida o c√≥digo do erro\r",
											"    pm.expect(response.detalhesErro[0].codigoErro).to.eql(codigoErroEsperado);\r",
											"\r",
											"    // Valida a mensagem de erro\r",
											"    pm.expect(response.detalhesErro[0].mensagemErro).to.eql(mensagemErroEsperada);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.tester@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": \"\",\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - TipoContribuicao1_letra(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Verifica se o status HTTP da resposta √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422); // Valida que o status √© 422\r",
											"});\r",
											"\r",
											"// 2. Verifica a mensagem de erro\r",
											"pm.test(\"Mensagem de erro √© 'Conte√∫do informado no atributo [tipoContribuicao] n√£o reconhecido pelo sistema.'\", function () {\r",
											"    var responseJson = pm.response.json(); // Obt√©m a resposta JSON\r",
											"    pm.expect(responseJson.detalhesErro[0].mensagemErro).to.eql(\"Conte√∫do informado no atributo [tipoContribuicao] n√£o reconhecido pelo sistema.\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.teste@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": \"A\",\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - TipoContribuicao1_maior_1(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'tipoContribuicao' enviado\r",
											"var tipoContribuicaoMatch = pm.request.body.raw.match(/\"tipoContribuicao\":\\s*(\\d+)/);\r",
											"\r",
											"if (tipoContribuicaoMatch) {\r",
											"    var tipoContribuicaoValor = tipoContribuicaoMatch[1]; // Extrai o valor do campo 'tipoContribuicao'\r",
											"    var quantidadeCaracteres = tipoContribuicaoValor.length; // Conta a quantidade de caracteres\r",
											"\r",
											"    // 4. Exibe no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'tipoContribuicao' informado: ${tipoContribuicaoValor}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'tipoContribuicao': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // 5. Registra a quantidade de caracteres no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'tipoContribuicao' √© ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(quantidadeCaracteres).to.eql(2); // Ajustado para verificar se o valor tem 2 caracteres\r",
											"    });\r",
											"\r",
											"    // 6. Adiciona logs indicando se est√° dentro do intervalo permitido\r",
											"    var limiteMaximo = 1; // Defina o limite m√°ximo permitido\r",
											"\r",
											"    if (quantidadeCaracteres > limiteMaximo) {\r",
											"        console.log(`Aviso: O campo 'tipoContribuicao' tem ${quantidadeCaracteres} caracteres, excedendo o limite permitido (${limiteMaximo}).`);\r",
											"    } else {\r",
											"        console.log(`O campo 'tipoContribuicao' est√° dentro do intervalo permitido (${limiteMaximo}).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'tipoContribuicao' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 7. Valida a mensagem de erro para o campo 'tipoContribuicao'\r",
											"pm.test(\"Erro 00024 - Quantidade de caracteres informada no atributo [tipoContribuicao] incompat√≠vel com tamanho definido (m√°ximo de 1).\", function () {\r",
											"    // Procura o erro espec√≠fico no array 'detalhesErro'\r",
											"    var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00024\");\r",
											"\r",
											"    // Verifica se o erro foi encontrado e a mensagem est√° correta\r",
											"    if (erro) {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [tipoContribuicao] incompat√≠vel com tamanho definido (m√°ximo de 1).\");\r",
											"    } else {\r",
											"        // Caso n√£o encontre o erro, apenas exibe no console sem falhar o teste\r",
											"        console.log(\"Erro 00024 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 11,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": \"\",\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_negativo(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se a resposta tem c√≥digo 422\r",
											"pm.test(\"C√≥digo HTTP deve ser 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"let response;\r",
											"try {\r",
											"    response = pm.response.json();\r",
											"} catch (e) {\r",
											"    response = {};\r",
											"}\r",
											"\r",
											"// Valida√ß√£o espec√≠fica dos c√≥digos de erro esperados\r",
											"let errosEsperados = [\r",
											"    { codigo: \"00025\", mensagem: \"O preenchimento do atributo [valorBaseContribuicao] √© obrigat√≥rio.\" },\r",
											"    { codigo: \"00116\", mensagem: \"Valor do VR deve ser igual ou menor que a base de contribui√ß√£o ordin√°ria, e n√£o pode ser negativo, no m√≠nimo igual a zero. Vide Res. 102, Inciso II ao atr. 8¬∫\" }\r",
											"];\r",
											"\r",
											"errosEsperados.forEach(erroEsperado => {\r",
											"    pm.test(`Erro ${erroEsperado.codigo} deve estar presente`, function () {\r",
											"        let erroEncontrado = response?.detalhesErro?.find(e => e.codigoErro === erroEsperado.codigo);\r",
											"        pm.expect(erroEncontrado, `Erro ${erroEsperado.codigo} n√£o encontrado`).to.not.be.undefined;\r",
											"        pm.expect(erroEncontrado?.mensagemErro, `Mensagem do erro ${erroEsperado.codigo} incorreta`).to.eql(erroEsperado.mensagem);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Captura o valor do primeiro `valorBaseContribuicao`\r",
											"let requestBody;\r",
											"try {\r",
											"    requestBody = JSON.parse(pm.request.body.raw);\r",
											"} catch (e) {\r",
											"    requestBody = {};\r",
											"}\r",
											"\r",
											"// Navegando na estrutura do JSON para encontrar `valorBaseContribuicao`\r",
											"let valorBase = requestBody?.data?.contribuicao?.competencias?.[0]?.baseContribuicoes?.[0]?.valorBaseContribuicao ?? \"N√ÉO INFORMADO\";\r",
											"\r",
											"// Criando um teste para exibir no relat√≥rio do Newman sem quebrar\r",
											"pm.test(`Valor informado no campo valorBaseContribuicao: ${valorBase}`, function () {\r",
											"    pm.expect(valorBase).to.be.oneOf([valorBase]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": \"-1345.00\",\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_maior_20(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorBaseContribuicao' enviado\r",
											"var valorBaseContribuicaoMatch = pm.request.body.raw.match(/\"valorBaseContribuicao\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorBaseContribuicaoMatch) {\r",
											"    var valorBaseContribuicao = valorBaseContribuicaoMatch[1]; // Extrai o valor do campo 'valorBaseContribuicao'\r",
											"    var quantidadeCaracteres = valorBaseContribuicao.replace(\".\", \"\").length; // Conta a quantidade de caracteres, ignorando o ponto decimal\r",
											"\r",
											"    // Exibe no console do Postman o valor do campo e a quantidade de caracteres\r",
											"    console.log(`Campo 'valorBaseContribuicao' informado: ${valorBaseContribuicao}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'valorBaseContribuicao': ${quantidadeCaracteres}`);\r",
											"\r",
											"    // 3. Apenas exibe a quantidade de caracteres, sem falhar o teste\r",
											"    pm.test(`Quantidade de caracteres no campo 'valorBaseContribuicao' √© ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Simplesmente marca como sucesso, sem fazer asser√ß√µes sobre o valor\r",
											"    });\r",
											"\r",
											"    // 4. Registra a mensagem de erro completa no console, caso o limite seja violado\r",
											"    var limiteMaximo = 20; // Limite m√°ximo de caracteres permitido\r",
											"\r",
											"    // Se o valor exceder o limite, mostra a mensagem no console do Postman\r",
											"    if (quantidadeCaracteres > limiteMaximo) {\r",
											"        var mensagemErro = `Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao} (${quantidadeCaracteres} caracteres). ` +\r",
											"                           `Valor permitido: ${limiteMaximo} caracteres. Erro 00044: Quantidade de caracteres incompat√≠vel com o tamanho definido (m√°x de 20).`;\r",
											"        console.log(mensagemErro); // Exibe a viola√ß√£o no console sem falhar o teste\r",
											"    } else {\r",
											"        console.log(`O valor informado est√° dentro do intervalo permitido (${limiteMaximo} caracteres).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorBaseContribuicao' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 5. Exibe a mensagem completa de erro no console, caso o erro 00044 seja encontrado\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00044\");\r",
											"\r",
											"if (erro) {\r",
											"    pm.test(`Erro 00044 - Quantidade de caracteres incompat√≠vel com o tamanho definido (m√°x de 20).`, function () {\r",
											"        pm.expect(erro.mensagemErro).to.eql(\"Quantidade de caracteres informada no atributo [valorBaseContribuicao] incompat√≠vel com tamanho definido (m√°x de 20).\");\r",
											"    });\r",
											"} else {\r",
											"    console.log(\"Erro 00044 n√£o encontrado na resposta da API.\");\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 1111123456723456781.11,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_0_casa_decimal(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 12345672345678121,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_1_casa_decimal(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorBaseContribuicao' enviado na requisi√ß√£o\r",
											"var valorBaseContribuicaoMatch = pm.request.body.raw.match(/\"valorBaseContribuicao\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorBaseContribuicaoMatch) {\r",
											"    var valorBaseContribuicao = valorBaseContribuicaoMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorBaseContribuicao.split(\".\")[1]; // Pega a parte ap√≥s o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o n√∫mero de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso n√£o haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorBaseContribuicao': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorBaseContribuicao' √© ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relat√≥rio sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a viola√ß√£o da regra, se aplic√°vel\r",
											"    var casasDecimaisPermitidas = 2; // Defini√ß√£o da especifica√ß√£o (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monet√°rios precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado est√° dentro da especifica√ß√£o (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorBaseContribuicao' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorBaseContribuicao'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorBaseContribuicao} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 12345672345678121.1,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_3_casas_decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorBaseContribuicao' enviado na requisi√ß√£o\r",
											"var valorBaseContribuicaoMatch = pm.request.body.raw.match(/\"valorBaseContribuicao\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorBaseContribuicaoMatch) {\r",
											"    var valorBaseContribuicao = valorBaseContribuicaoMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorBaseContribuicao.split(\".\")[1]; // Pega a parte ap√≥s o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o n√∫mero de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso n√£o haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorBaseContribuicao': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorBaseContribuicao' √© ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relat√≥rio sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a viola√ß√£o da regra, se aplic√°vel\r",
											"    var casasDecimaisPermitidas = 2; // Defini√ß√£o da especifica√ß√£o (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monet√°rios precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado est√° dentro da especifica√ß√£o (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorBaseContribuicao' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorBaseContribuicao'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorBaseContribuicao} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 12345672345678121.000,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_menor_VR(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// L√™ o body da requisi√ß√£o enviada (raw)\r",
											"const requestBody = pm.request.body.raw;\r",
											"\r",
											"// Tenta converter o body da requisi√ß√£o para JSON\r",
											"let requestData;\r",
											"try {\r",
											"    requestData = JSON.parse(requestBody);\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro na leitura do body da requisi√ß√£o\", function () {\r",
											"        pm.expect.fail(\"O corpo da requisi√ß√£o n√£o est√° em formato JSON v√°lido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura o valor do campo \"valorBaseContribuicao\" na requisi√ß√£o\r",
											"let valorBaseContribuicao;\r",
											"try {\r",
											"    valorBaseContribuicao = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].valorBaseContribuicao;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar o campo 'valorBaseContribuicao'\", function () {\r",
											"        pm.expect.fail(\"O campo 'valorBaseContribuicao' n√£o foi encontrado no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida o status HTTP da resposta (deve ser 422)\r",
											"pm.test(\"Validar status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Tenta converter o body da resposta para JSON\r",
											"let responseData;\r",
											"try {\r",
											"    responseData = pm.response.json();\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao converter o body da resposta\", function () {\r",
											"        pm.expect.fail(\"O corpo da resposta n√£o est√° em formato JSON v√°lido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida e exibe o c√≥digo de erro e a mensagem de erro concatenados no teste\r",
											"pm.test(\"C√≥digo e mensagem de erro capturados\", function () {\r",
											"    let erro = responseData.detalhesErro && responseData.detalhesErro[0];\r",
											"    pm.expect(erro).to.exist;\r",
											"\r",
											"    // Concatena o c√≥digo e a mensagem de erro\r",
											"    let erroCompleto = `C√≥digo: ${erro.codigoErro}, Mensagem: ${erro.mensagemErro}`;\r",
											"    \r",
											"    // Valida os valores esperados\r",
											"    pm.expect(erro.codigoErro).to.eql(\"00116\");\r",
											"    pm.expect(erro.mensagemErro).to.eql(\r",
											"        \"Valor do VR deve ser igual ou menor que a base de contribui√ß√£o ordin√°ria, e n√£o pode ser negativo, no m√≠nimo igual a zero. Vide Res. 102, Inciso II ao atr. 8¬∫\"\r",
											"    );\r",
											"\r",
											"    // Exibe a mensagem concatenada no Newman\r",
											"    pm.test(erroCompleto, function () {\r",
											"        pm.expect(erroCompleto).to.include(\"C√≥digo: 00116\").and.to.include(\r",
											"            \"Valor do VR deve ser igual ou menor que a base de contribui√ß√£o ordin√°ria\"\r",
											"        );\r",
											"    });\r",
											"});\r",
											"\r",
											"// Mostra o valor capturado do campo \"valorBaseContribuicao\" no relat√≥rio do Newman\r",
											"pm.test(`Valor capturado no campo 'valorBaseContribuicao': ${valorBaseContribuicao}`, function () {\r",
											"    pm.expect(valorBaseContribuicao).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 5000.21,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorBaseContribuicao1_=_VR(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida o status HTTP da resposta (deve ser 200 ou 201)\r",
											"pm.test(\"O c√≥digo de status retornado √©: 200 ou 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"// L√™ o body da requisi√ß√£o enviada (raw)\r",
											"const requestBody = pm.request.body.raw;\r",
											"\r",
											"// Tenta converter o body da requisi√ß√£o para JSON\r",
											"let requestData;\r",
											"try {\r",
											"    requestData = JSON.parse(requestBody);\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro na leitura do body da requisi√ß√£o\", function () {\r",
											"        pm.expect.fail(\"O corpo da requisi√ß√£o n√£o est√° em formato JSON v√°lido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura os valores dos campos na requisi√ß√£o\r",
											"let valorBaseContribuicao, valorReferencia;\r",
											"try {\r",
											"    valorBaseContribuicao = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].valorBaseContribuicao;\r",
											"    valorReferencia = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].informacaoAdicional.valorReferencia;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar os campos na requisi√ß√£o\", function () {\r",
											"        pm.expect.fail(\"Os campos 'valorBaseContribuicao' ou 'valorReferencia' n√£o foram encontrados no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Tenta converter o body da resposta para JSON\r",
											"let responseData;\r",
											"try {\r",
											"    responseData = pm.response.json();\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao converter o body da resposta\", function () {\r",
											"        pm.expect.fail(\"O corpo da resposta n√£o est√° em formato JSON v√°lido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida e exibe a situa√ß√£o de envio\r",
											"pm.test(`A situa√ß√£o de envio √©: ${responseData.data.situacaoEnvio}`, function () {\r",
											"    let situacaoEnvio = responseData.data && responseData.data.situacaoEnvio;\r",
											"    pm.expect(situacaoEnvio).to.eql(\"0\", \"O campo 'situacaoEnvio' deve ser 0.\");\r",
											"});\r",
											"\r",
											"// Mostra os valores capturados no relat√≥rio do Newman\r",
											"pm.test(\r",
											"    `Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao} e o valor informado no campo 'valorReferencia': ${valorReferencia}`,\r",
											"    function () {\r",
											"        pm.expect(valorBaseContribuicao).to.exist;\r",
											"        pm.expect(valorReferencia).to.exist;\r",
											"    }\r",
											");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"tester@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 5000.22,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorPatrimonioLiqAjust1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida que o status HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida o c√≥digo do erro\r",
											"pm.test(\"C√≥digo de erro √© 00026\", function () {\r",
											"    const response = pm.response.json(); // Transforma a resposta JSON\r",
											"    const codigoErroEsperado = \"00026\"; // C√≥digo de erro esperado\r",
											"\r",
											"    // Valida o c√≥digo de erro no array detalhesErro\r",
											"    pm.expect(response.detalhesErro[0].codigoErro).to.eql(codigoErroEsperado);\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro\r",
											"pm.test(\"Mensagem de erro √© sobre o atributo valorPatrimonioLiquidoAjustado\", function () {\r",
											"    const response = pm.response.json(); // Transforma a resposta JSON\r",
											"    const mensagemErroEsperada = \"O preenchimento do atributo [valorPatrimonioLiquidoAjustado] √© obrigat√≥rio para as contribui√ß√µes do tipo ordin√°ria (1).\";\r",
											"\r",
											"    // Valida a mensagem de erro no array detalhesErro\r",
											"    pm.expect(response.detalhesErro[0].mensagemErro).to.eql(mensagemErroEsperada);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.aulik@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": \"\",\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorPatrimonioLiqAjust1_maior_20(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorPatrimonioLiquidoAjustado' enviado na requisi√ß√£o\r",
											"var valorPatrimonioLiquidoAjustadoMatch = pm.request.body.raw.match(/\"valorPatrimonioLiquidoAjustado\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorPatrimonioLiquidoAjustadoMatch) {\r",
											"    var valorPatrimonioLiquidoAjustado = valorPatrimonioLiquidoAjustadoMatch[1]; // Extrai o valor do campo\r",
											"    var quantidadeCaracteres = valorPatrimonioLiquidoAjustado.replace(\".\", \"\").length; // Conta a quantidade de caracteres, ignorando o ponto decimal\r",
											"\r",
											"    // Exibe a quantidade de caracteres no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'valorPatrimonioLiquidoAjustado' √© ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'valorPatrimonioLiquidoAjustado' informado: ${valorPatrimonioLiquidoAjustado}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'valorPatrimonioLiquidoAjustado': ${quantidadeCaracteres}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'valorPatrimonioLiquidoAjustado' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro 00045 e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00045\");\r",
											"\r",
											"pm.test(`Erro 00045 - Quantidade de caracteres incompat√≠vel com o tamanho definido (m√°x de 20).`, function () {\r",
											"    if (erro) {\r",
											"        var mensagemErro = `Erro ${erro.codigoErro}: ${erro.mensagemErro}`;\r",
											"        pm.expect(erro.codigoErro).to.eql(\"00045\");\r",
											"        pm.expect(erro.mensagemErro).to.eql(\r",
											"            \"Quantidade de caracteres informada no atributo [valorPatrimonioLiquidoAjustado] incompat√≠vel com tamanho definido (m√°x de 20).\"\r",
											"        );\r",
											"        console.log(mensagemErro); // Exibe a mensagem completa no console\r",
											"    } else {\r",
											"        pm.expect.fail(\"Erro 00045 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.aulik@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 123456723456781212255.00,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - ValorPatrimonioLiqAjustado1_0_CasasDecimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida que o status HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Valida que a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Valida a mensagem de erro e o c√≥digo do erro\r",
											"pm.test(\"O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.\", function () {\r",
											"    const response = pm.response.json(); // Transforma a resposta JSON\r",
											"    const codigoErroEsperado = \"00113\";\r",
											"    const mensagemErroEsperada = \"O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.\";\r",
											"\r",
											"    // Valida o c√≥digo do erro\r",
											"    pm.expect(response.detalhesErro[0].codigoErro).to.eql(codigoErroEsperado);\r",
											"\r",
											"    // Valida a mensagem de erro\r",
											"    pm.expect(response.detalhesErro[0].mensagemErro).to.eql(mensagemErroEsperada);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 1234567234567812,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_ValorPatrimonioLiqAjustado1_1casa_Decimal(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorPatrimonioLiquidoAjustado' enviado na requisi√ß√£o\r",
											"var valorPatrimonioLiquidoAjustadoMatch = pm.request.body.raw.match(/\"valorPatrimonioLiquidoAjustado\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorPatrimonioLiquidoAjustadoMatch) {\r",
											"    var valorPatrimonioLiquidoAjustado = valorPatrimonioLiquidoAjustadoMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorPatrimonioLiquidoAjustado.split(\".\")[1]; // Pega a parte ap√≥s o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o n√∫mero de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso n√£o haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorPatrimonioLiquidoAjustado': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorPatrimonioLiquidoAjustado' √© ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relat√≥rio sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a viola√ß√£o da regra, se aplic√°vel\r",
											"    var casasDecimaisPermitidas = 2; // Defini√ß√£o da especifica√ß√£o (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monet√°rios precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado est√° dentro da especifica√ß√£o (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorPatrimonioLiquidoAjustado' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorPatrimonioLiquidoAjustado'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorPatrimonioLiquidoAjustado} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 12345672345678121.1,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_ValorPatrimonioLiqAjustado1_3casas_Decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorPatrimonioLiquidoAjustado' enviado na requisi√ß√£o\r",
											"var valorPatrimonioLiquidoAjustadoMatch = pm.request.body.raw.match(/\"valorPatrimonioLiquidoAjustado\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorPatrimonioLiquidoAjustadoMatch) {\r",
											"    var valorPatrimonioLiquidoAjustado = valorPatrimonioLiquidoAjustadoMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorPatrimonioLiquidoAjustado.split(\".\")[1]; // Pega a parte ap√≥s o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o n√∫mero de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso n√£o haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorPatrimonioLiquidoAjustado': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorPatrimonioLiquidoAjustado' √© ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relat√≥rio sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a viola√ß√£o da regra, se aplic√°vel\r",
											"    var casasDecimaisPermitidas = 2; // Defini√ß√£o da especifica√ß√£o (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monet√°rios precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado est√° dentro da especifica√ß√£o (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorPatrimonioLiquidoAjustado' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorPatrimonioLiquidoAjustado'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorPatrimonioLiquidoAjustado} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio@aulikfgc\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 123456723456781.111,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida que o status HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Caso de teste para validar o c√≥digo do erro\r",
											"pm.test(\"C√≥digo de erro √© 00048\", function () {\r",
											"    const response = pm.response.json(); // Transforma a resposta JSON\r",
											"    const codigoErroEsperado = \"00048\"; // C√≥digo de erro esperado\r",
											"\r",
											"    // Valida o c√≥digo de erro no array detalhesErro\r",
											"    pm.expect(response.detalhesErro[0].codigoErro).to.eql(codigoErroEsperado);\r",
											"});\r",
											"\r",
											"// Caso de teste para validar a mensagem de erro\r",
											"pm.test(\"Validar obrigatoriedade do [valorReferencia] para as contribui√ß√µes do tipo ordin√°ria (1).\", function () {\r",
											"    const response = pm.response.json(); // Transforma a resposta JSON\r",
											"    const mensagemErroEsperada = \"O preenchimento do atributo [valorReferencia] √© obrigat√≥rio para as contribui√ß√µes do tipo ordin√°ria (1).\";\r",
											"\r",
											"    // Valida a mensagem de erro no array detalhesErro\r",
											"    pm.expect(response.detalhesErro[0].mensagemErro).to.eql(mensagemErroEsperada);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.teste@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\":\"\",\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_Negativo(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Valida que o status HTTP √© 422\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// ‚úÖ Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// ‚úÖ Captura e exibe o valor do campo 'valorReferencia' enviado na requisi√ß√£o\r",
											"var valorReferenciaMatch = pm.request.body.raw.match(/\"valorReferencia\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorReferenciaMatch) {\r",
											"    var valorReferenciaEnviado = valorReferenciaMatch[1]; // Extrai o valor\r",
											"    console.log(`Campo 'valorReferencia' enviado: ${valorReferenciaEnviado}`);\r",
											"\r",
											"    // ‚úÖ Adiciona um teste para que o valor do campo apare√ßa no relat√≥rio do Newman\r",
											"    pm.test(`Valor de 'valorReferencia' enviado: ${valorReferenciaEnviado}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas para registrar no relat√≥rio do Newman\r",
											"    });\r",
											"}\r",
											"\r",
											"// ‚úÖ Valida c√≥digo e mensagem de erro juntos, exibindo a mensagem completa no teste\r",
											"pm.test(`Erro retornado: ${responseJson.detalhesErro[0].mensagemErro}`, function () {\r",
											"    const mensagemErroEsperada = \"Valor do VR deve ser igual ou menor que a base de contribui√ß√£o ordin√°ria, e n√£o pode ser negativo, no m√≠nimo igual a zero. Vide Res. 102, Inciso II ao atr. 8¬∫\";\r",
											"    pm.expect(responseJson.detalhesErro[0].mensagemErro).to.eql(mensagemErroEsperada);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.teste@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\":\"-5000.22\",\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_maior_20(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorReferencia' enviado na requisi√ß√£o\r",
											"var valorReferenciaMatch = pm.request.body.raw.match(/\"valorReferencia\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorReferenciaMatch) {\r",
											"    var valorReferencia = valorReferenciaMatch[1]; // Extrai o valor do campo\r",
											"    var quantidadeCaracteres = valorReferencia.replace(\".\", \"\").length; // Conta a quantidade de caracteres, ignorando o ponto decimal\r",
											"\r",
											"    // Exibe a quantidade de caracteres no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres inseridos no campo 'valorReferencia' √©: ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'valorReferencia' informado: ${valorReferencia}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'valorReferencia': ${quantidadeCaracteres}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'valorReferencia' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro 00046 e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00046\");\r",
											"\r",
											"pm.test(`C√≥digo do Erro: 00046.`, function () {\r",
											"    if (erro) {\r",
											"        var mensagemErro = `Erro ${erro.codigoErro}: ${erro.mensagemErro}`;\r",
											"        console.log(mensagemErro); // Exibe a mensagem completa no console\r",
											"        pm.test(`Mensagem de erro validada: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Mensagem de erro n√£o encontrada na resposta.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 1234567890123456787.89,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 1234567890123456787.89,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_menor_3(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorReferencia' enviado na requisi√ß√£o\r",
											"var valorReferenciaMatch = pm.request.body.raw.match(/\"valorReferencia\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorReferenciaMatch) {\r",
											"    var valorReferencia = valorReferenciaMatch[1]; // Extrai o valor do campo\r",
											"    var quantidadeCaracteres = valorReferencia.replace(\".\", \"\").length; // Conta a quantidade de caracteres, ignorando o ponto decimal\r",
											"\r",
											"    // Exibe a quantidade de caracteres no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'valorReferencia' √© ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'valorReferencia' informado: ${valorReferencia}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'valorReferencia': ${quantidadeCaracteres}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'valorReferencia' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro 00046 e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00046\");\r",
											"\r",
											"pm.test(`Erro 00046 - Quantidade de caracteres incompat√≠vel com o tamanho definido (m√°x de 20).`, function () {\r",
											"    if (erro) {\r",
											"        var mensagemErro = `Erro ${erro.codigoErro}: ${erro.mensagemErro}`;\r",
											"        console.log(mensagemErro); // Exibe a mensagem completa no console\r",
											"        pm.test(`Mensagem de erro validada: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Mensagem de erro n√£o encontrada na resposta.\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 123456789123456789.00,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 0.0,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_0_casas_decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422); // Verifica se o status HTTP √© 422\r",
											"});\r",
											"\r",
											"// 2. Valida o c√≥digo do erro\r",
											"pm.test(\"Valida o c√≥digo do erro\", function() {\r",
											"    let responseBody = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"    let codigoErro = responseBody.detalhesErro[0].codigoErro; // Acessa o c√≥digo do erro\r",
											"    pm.expect(codigoErro).to.eql(\"00113\"); // Verifica se o c√≥digo do erro √© \"00113\"\r",
											"});\r",
											"\r",
											"// 3. Valida a mensagem do erro\r",
											"pm.test(\"Valida a mensagem do erro\", function() {\r",
											"    let responseBody = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"    let mensagemErro = responseBody.detalhesErro[0].mensagemErro; // Acessa a mensagem do erro\r",
											"    pm.expect(mensagemErro).to.eql(\r",
											"        \"O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.\"\r",
											"    ); // Verifica se a mensagem est√° correta\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_1_casa_decimal(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorReferencia' enviado na requisi√ß√£o\r",
											"var valorReferenciaMatch = pm.request.body.raw.match(/\"valorReferencia\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorReferenciaMatch) {\r",
											"    var valorReferencia = valorReferenciaMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorReferencia.split(\".\")[1]; // Pega a parte ap√≥s o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o n√∫mero de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso n√£o haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorReferencia': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorReferencia' √© ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relat√≥rio sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a viola√ß√£o da regra, se aplic√°vel\r",
											"    var casasDecimaisPermitidas = 2; // Defini√ß√£o da especifica√ß√£o (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monet√°rios precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado est√° dentro da especifica√ß√£o (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorReferencia' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorReferencia'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorReferencia} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.1,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_3_casas_decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// 2. Valida se a resposta √© um JSON\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 3. Captura o valor do campo 'valorReferencia' enviado na requisi√ß√£o\r",
											"var valorReferenciaMatch = pm.request.body.raw.match(/\"valorReferencia\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorReferenciaMatch) {\r",
											"    var valorReferencia = valorReferenciaMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // 4. Conta as casas decimais\r",
											"    var casasDecimais = valorReferencia.split(\".\")[1]; // Pega a parte ap√≥s o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o n√∫mero de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso n√£o haja casas decimais\r",
											"    }\r",
											"\r",
											"    // 5. Exibe no console do Postman a quantidade de casas decimais informada\r",
											"    console.log(`Quantidade de casas decimais informadas no campo 'valorReferencia': ${quantidadeCasasDecimais}`);\r",
											"    \r",
											"    // 6. Registra a quantidade de casas decimais no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de casas decimais informadas no campo 'valorReferencia' √© ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Registro no relat√≥rio sem causar falha\r",
											"    });\r",
											"\r",
											"    // 7. Adiciona uma mensagem indicando a viola√ß√£o da regra, se aplic√°vel\r",
											"    var casasDecimaisPermitidas = 2; // Defini√ß√£o da especifica√ß√£o (duas casas decimais permitidas)\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento dos atributos monet√°rios precisa ter ${casasDecimaisPermitidas} casas decimais. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado est√° dentro da especifica√ß√£o (duas casas decimais).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorReferencia' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 8. Valida a mensagem de erro para o campo 'valorReferencia'\r",
											"pm.test(\"Erro 00113 - O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.\", function () {\r",
											"    var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"    // Registra a mensagem clara sobre a regra violada\r",
											"    if (erro) {\r",
											"        var mensagemEsperada = `O preenchimento dos atributos contendo valores monet√°rios precisam ser informados com duas casas decimais.`;\r",
											"        pm.expect(erro.mensagemErro).to.eql(mensagemEsperada);\r",
											"\r",
											"        console.log(`Erro detectado: ${mensagemEsperada}`);\r",
											"        console.log(`Valor informado: ${valorReferencia} (${quantidadeCasasDecimais} casas decimais).`);\r",
											"    } else {\r",
											"        console.log(\"Erro 00113 n√£o encontrado na resposta da API.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.123,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia_maior_baseContribuicao(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// L√™ o body da requisi√ß√£o enviada (raw)\r",
											"const requestBody = pm.request.body.raw;\r",
											"\r",
											"// Tenta converter o body da requisi√ß√£o para JSON\r",
											"let requestData;\r",
											"try {\r",
											"    requestData = JSON.parse(requestBody);\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro na leitura do body da requisi√ß√£o\", function () {\r",
											"        pm.expect.fail(\"O corpo da requisi√ß√£o n√£o est√° em formato JSON v√°lido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura o valor do campo \"valorBaseContribuicao\" na requisi√ß√£o\r",
											"let valorBaseContribuicao;\r",
											"try {\r",
											"    valorBaseContribuicao = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].valorBaseContribuicao;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar o campo 'valorBaseContribuicao'\", function () {\r",
											"        pm.expect.fail(\"O campo 'valorBaseContribuicao' n√£o foi encontrado no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura o valor do campo \"valorReferencia\" na requisi√ß√£o\r",
											"let valorReferencia;\r",
											"try {\r",
											"    valorReferencia = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].informacaoAdicional.valorReferencia;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar o campo 'valorReferencia'\", function () {\r",
											"        pm.expect.fail(\"O campo 'valorReferencia' n√£o foi encontrado no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida o status HTTP da resposta (deve ser 422)\r",
											"pm.test(\"Validar status HTTP 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Tenta converter o body da resposta para JSON\r",
											"let responseData;\r",
											"try {\r",
											"    responseData = pm.response.json();\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao converter o body da resposta\", function () {\r",
											"        pm.expect.fail(\"O corpo da resposta n√£o est√° em formato JSON v√°lido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida e exibe o c√≥digo de erro e a mensagem de erro concatenados no teste\r",
											"pm.test(`C√≥digo: ${responseData.detalhesErro[0].codigoErro}, Mensagem: ${responseData.detalhesErro[0].mensagemErro}`, function () {\r",
											"    pm.expect(true).to.eql(true); // Apenas registra no relat√≥rio sem causar falha\r",
											"});\r",
											"\r",
											"// Mostra o valor informado no campo \"valorBaseContribuicao\" no relat√≥rio do Newman\r",
											"pm.test(`Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao}`, function () {\r",
											"    pm.expect(true).to.eql(true); // Registro no relat√≥rio sem causar falha\r",
											"    console.log(`Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao}`);\r",
											"});\r",
											"\r",
											"// Mostra o valor informado no campo \"valorReferencia\" no relat√≥rio do Newman\r",
											"pm.test(`Valor informado no campo 'valorReferencia': ${valorReferencia}`, function () {\r",
											"    pm.expect(true).to.eql(true); // Registro no relat√≥rio sem causar falha\r",
											"    console.log(`Valor informado no campo 'valorReferencia': ${valorReferencia}`);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"silvio.test@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 134100.99,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_valorReferencia1_Zero(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// L√™ o body da requisi√ß√£o enviada (raw)\r",
											"const requestBody = pm.request.body.raw;\r",
											"\r",
											"// Tenta converter o body da requisi√ß√£o para JSON\r",
											"let requestData;\r",
											"try {\r",
											"    requestData = JSON.parse(requestBody);\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro na leitura do body da requisi√ß√£o\", function () {\r",
											"        pm.expect.fail(\"O corpo da requisi√ß√£o n√£o est√° em formato JSON v√°lido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura o valor do campo \"valorBaseContribuicao\" na requisi√ß√£o\r",
											"let valorBaseContribuicao;\r",
											"try {\r",
											"    valorBaseContribuicao = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].valorBaseContribuicao;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar o campo 'valorBaseContribuicao'\", function () {\r",
											"        pm.expect.fail(\"O campo 'valorBaseContribuicao' n√£o foi encontrado no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Captura o valor do campo \"valorReferencia\" na requisi√ß√£o\r",
											"let valorReferencia;\r",
											"try {\r",
											"    valorReferencia = requestData.data.contribuicao.competencias[0].baseContribuicoes[0].informacaoAdicional.valorReferencia;\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao capturar o campo 'valorReferencia'\", function () {\r",
											"        pm.expect.fail(\"O campo 'valorReferencia' n√£o foi encontrado no JSON enviado.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida se o status HTTP √© 200 ou 201\r",
											"pm.test(\"‚úÖ Validar status HTTP 200 ou 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"\r",
											"// Tenta converter o body da resposta para JSON\r",
											"let responseData;\r",
											"try {\r",
											"    responseData = pm.response.json();\r",
											"} catch (e) {\r",
											"    pm.test(\"Erro ao converter o body da resposta\", function () {\r",
											"        pm.expect.fail(\"O corpo da resposta n√£o est√° em formato JSON v√°lido.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"// Valida se os campos \"valorBaseContribuicao\" e \"valorReferencia\" s√£o positivos\r",
											"pm.test(\"Os valores nos campos n√£o devem ser negativos\", function () {\r",
											"    if (valorBaseContribuicao < 0 || valorReferencia < 0) {\r",
											"        console.log(`Erro: Um ou mais valores s√£o negativos. valorBaseContribuicao: ${valorBaseContribuicao}, valorReferencia: ${valorReferencia}`);\r",
											"        pm.expect.fail(`Valores inv√°lidos detectados: valorBaseContribuicao = ${valorBaseContribuicao}, valorReferencia = ${valorReferencia}`);\r",
											"    } else {\r",
											"        console.log(`Os valores s√£o v√°lidos. valorBaseContribuicao: ${valorBaseContribuicao}, valorReferencia: ${valorReferencia}`);\r",
											"        pm.expect(true).to.eql(true); // Apenas registra como sucesso\r",
											"    }\r",
											"});\r",
											"\r",
											"// Exibe no console o erro concatenado da resposta (se existir)\r",
											"let erro = responseData.detalhesErro && responseData.detalhesErro[0];\r",
											"if (erro) {\r",
											"    let erroCompleto = `C√≥digo: ${erro.codigoErro}, Mensagem: ${erro.mensagemErro}`;\r",
											"    console.log(erroCompleto);\r",
											"}\r",
											"\r",
											"// Mostra o valor informado no campo \"valorBaseContribuicao\" no relat√≥rio do Newman\r",
											"pm.test(`Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao}`, function () {\r",
											"    pm.expect(true).to.eql(true);\r",
											"    console.log(`Valor informado no campo 'valorBaseContribuicao': ${valorBaseContribuicao}`);\r",
											"});\r",
											"\r",
											"// Mostra o valor informado no campo \"valorReferencia\" no relat√≥rio do Newman\r",
											"pm.test(`Valor informado no campo 'valorReferencia': ${valorReferencia}`, function () {\r",
											"    pm.expect(true).to.eql(true);\r",
											"    console.log(`Valor informado no campo 'valorReferencia': ${valorReferencia}`);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"tester@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 0.00,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_idContribuicao1_todos_valores_zerados(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"C√≥digo HTTP √© 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \"teste\",\r\n        \"contato\": {\r\n            \"nome\": \"Albert Severino Eistein\",\r\n            \"telefone\": \"4451112232\",\r\n            \"email\": \"tester@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 0.00,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 0.00,\r\n                                \"valorReferencia\": 0.00,\r\n                                \"valorCaptacaoReferenciaAnterior\": 0.00\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_vazio(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422); // Verifica se o status HTTP √© 422\r",
											"});\r",
											"\r",
											"// 2. Valida o c√≥digo do erro\r",
											"pm.test(\"C√≥digo do erro: 00049\", function () {\r",
											"    let responseBody = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"    let codigoErro = responseBody?.detalhesErro?.[0]?.codigoErro; // Acessa o c√≥digo do erro com seguran√ßa\r",
											"    pm.expect(codigoErro).to.eql(\"00049\"); // Verifica se o c√≥digo do erro √© \"00049\"\r",
											"});\r",
											"\r",
											"// 3. Valida a mensagem do erro\r",
											"pm.test(\"Valida a mensagem do erro\", function () {\r",
											"    let responseBody = pm.response.json(); // Obt√©m o corpo da resposta como JSON\r",
											"    let mensagemErro = responseBody?.detalhesErro?.[0]?.mensagemErro; // Acessa a mensagem do erro com seguran√ßa\r",
											"    pm.expect(mensagemErro).to.eql(\r",
											"        \"O preenchimento do atributo [valorCaptacaoReferenciaAnterior] √© obrigat√≥rio para as contribui√ß√µes do tipo ordin√°ria (1).\"\r",
											"    ); // Verifica se a mensagem est√° correta\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": \"\"\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - tipoContribuicao_nao_reconhecido(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se a resposta tem c√≥digo 422\r",
											"pm.test(\"C√≥digo HTTP deve ser 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"let response;\r",
											"try {\r",
											"    response = pm.response.json();\r",
											"} catch (e) {\r",
											"    response = {};\r",
											"}\r",
											"\r",
											"// Valida√ß√£o do erro esperado\r",
											"let erroEsperado = { \r",
											"    codigo: \"00024\", \r",
											"    mensagem: \"Conte√∫do informado no atributo [tipoContribuicao] n√£o reconhecido pelo sistema.\" \r",
											"};\r",
											"\r",
											"// Verifica se o erro esperado est√° na resposta\r",
											"pm.test(`Erro ${erroEsperado.codigo} deve estar presente`, function () {\r",
											"    let erroEncontrado = response?.detalhesErro?.find(e => e.codigoErro === erroEsperado.codigo);\r",
											"    pm.expect(erroEncontrado, `Erro ${erroEsperado.codigo} n√£o encontrado`).to.not.be.undefined;\r",
											"    pm.expect(erroEncontrado?.mensagemErro, `Mensagem do erro ${erroEsperado.codigo} incorreta`).to.eql(erroEsperado.mensagem);\r",
											"});\r",
											"\r",
											"// Captura o valor do primeiro `tipoContribuicao`\r",
											"let requestBody;\r",
											"try {\r",
											"    requestBody = JSON.parse(pm.request.body.raw);\r",
											"} catch (e) {\r",
											"    requestBody = {};\r",
											"}\r",
											"\r",
											"// Caminho correto no JSON para encontrar `tipoContribuicao`\r",
											"let tipoContribuicao = requestBody?.data?.contribuicao?.competencias?.[0]?.baseContribuicoes?.[0]?.tipoContribuicao ?? \"N√ÉO INFORMADO\";\r",
											"\r",
											"// Criando um teste para exibir no relat√≥rio do Newman\r",
											"pm.test(`Valor informado no campo tipoContribuicao: ${tipoContribuicao}`, function () {\r",
											"    pm.expect(tipoContribuicao).to.be.oneOf([tipoContribuicao]); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 0,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": \"500.22\" ,\r\n                                \"valorCaptacaoReferenciaAnterior\": \"-500.22\"\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_maior_20(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorCaptacaoReferenciaAnterior' enviado na requisi√ß√£o\r",
											"var valorCaptacaoReferenciaAnteriorMatch = pm.request.body.raw.match(/\"valorCaptacaoReferenciaAnterior\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorCaptacaoReferenciaAnteriorMatch) {\r",
											"    var valorCaptacaoReferenciaAnterior = valorCaptacaoReferenciaAnteriorMatch[1]; // Extrai o valor do campo\r",
											"    var quantidadeCaracteres = valorCaptacaoReferenciaAnterior.replace(\".\", \"\").length; // Conta a quantidade de caracteres, ignorando o ponto decimal\r",
											"\r",
											"    // Exibe a quantidade de caracteres no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de caracteres no campo 'valorCaptacaoReferenciaAnterior' √© ${quantidadeCaracteres}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona um log informativo no console\r",
											"    console.log(`Campo 'valorCaptacaoReferenciaAnterior' informado: ${valorCaptacaoReferenciaAnterior}`);\r",
											"    console.log(`Quantidade de caracteres no campo 'valorCaptacaoReferenciaAnterior': ${quantidadeCaracteres}`);\r",
											"} else {\r",
											"    console.log(\"Campo 'valorCaptacaoReferenciaAnterior' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida o c√≥digo de erro 00047 e a mensagem de erro associada na resposta\r",
											"var erro = responseJson.detalhesErro && responseJson.detalhesErro.find(e => e.codigoErro === \"00047\");\r",
											"\r",
											"pm.test(`Erro 00047 - Quantidade de caracteres incompat√≠vel com o tamanho definido (m√°x de 20).`, function () {\r",
											"    if (erro) {\r",
											"        var mensagemErro = `Erro ${erro.codigoErro}: ${erro.mensagemErro}`;\r",
											"        console.log(mensagemErro); // Exibe a mensagem completa no console\r",
											"        pm.test(`Mensagem de erro validada: ${erro.mensagemErro}`, function () {\r",
											"            pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"        });\r",
											"    } else {\r",
											"        console.log(\"Mensagem de erro n√£o encontrada na resposta.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 1234567891123456789.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_0_casas_decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorCaptacaoReferenciaAnterior' enviado na requisi√ß√£o\r",
											"var valorCaptacaoReferenciaAnteriorMatch = pm.request.body.raw.match(/\"valorCaptacaoReferenciaAnterior\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorCaptacaoReferenciaAnteriorMatch) {\r",
											"    var valorCaptacaoReferenciaAnterior = valorCaptacaoReferenciaAnteriorMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // Conta as casas decimais\r",
											"    var casasDecimais = valorCaptacaoReferenciaAnterior.split(\".\")[1]; // Pega a parte ap√≥s o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o n√∫mero de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso n√£o haja casas decimais\r",
											"    }\r",
											"\r",
											"    // Registra a quantidade de casas decimais no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de casas decimais no campo 'valorCaptacaoReferenciaAnterior': ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando a valida√ß√£o\r",
											"    var casasDecimaisPermitidas = 1; // Apenas uma casa decimal permitida\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento do campo 'valorCaptacaoReferenciaAnterior' precisa ter exatamente ${casasDecimaisPermitidas} casa decimal. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado est√° dentro da especifica√ß√£o (${casasDecimaisPermitidas} casa decimal).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorCaptacaoReferenciaAnterior' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida a mensagem de erro para o campo 'valorCaptacaoReferenciaAnterior'\r",
											"var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"if (erro) {\r",
											"    pm.test(`Erro ${erro.codigoErro}: ${erro.mensagemErro}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra no relat√≥rio sem causar falha\r",
											"    });\r",
											"\r",
											"    // Log detalhado no console\r",
											"    console.log(`Erro detectado: C√≥digo ${erro.codigoErro}, Mensagem: ${erro.mensagemErro}`);\r",
											"} else {\r",
											"    console.log(\"Erro 00113 n√£o encontrado na resposta da API.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 1234567891123456\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_1_casa_decimal(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorCaptacaoReferenciaAnterior' enviado na requisi√ß√£o\r",
											"var valorCaptacaoReferenciaAnteriorMatch = pm.request.body.raw.match(/\"valorCaptacaoReferenciaAnterior\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorCaptacaoReferenciaAnteriorMatch) {\r",
											"    var valorCaptacaoReferenciaAnterior = valorCaptacaoReferenciaAnteriorMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // Conta as casas decimais\r",
											"    var casasDecimais = valorCaptacaoReferenciaAnterior.split(\".\")[1]; // Pega a parte ap√≥s o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o n√∫mero de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso n√£o haja casas decimais\r",
											"    }\r",
											"\r",
											"    // Registra a quantidade de casas decimais no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de casas decimais no campo 'valorCaptacaoReferenciaAnterior': ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando a valida√ß√£o\r",
											"    var casasDecimaisPermitidas = 1; // Apenas uma casa decimal permitida\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento do campo 'valorCaptacaoReferenciaAnterior' precisa ter exatamente ${casasDecimaisPermitidas} casa decimal. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado est√° dentro da especifica√ß√£o (${casasDecimaisPermitidas} casa decimal).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorCaptacaoReferenciaAnterior' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida a mensagem de erro para o campo 'valorCaptacaoReferenciaAnterior'\r",
											"var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"if (erro) {\r",
											"    pm.test(`Erro ${erro.codigoErro}: ${erro.mensagemErro}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra no relat√≥rio sem causar falha\r",
											"    });\r",
											"\r",
											"    // Log detalhado no console\r",
											"    console.log(`Erro detectado: C√≥digo ${erro.codigoErro}, Mensagem: ${erro.mensagemErro}`);\r",
											"} else {\r",
											"    console.log(\"Erro 00113 n√£o encontrado na resposta da API.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 1234567891123456.3\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - valorCaptacaoReAnterior1_3_casas_decimais(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Valida o status HTTP\r",
											"pm.test(\"Status HTTP √© 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Captura o corpo da resposta\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// 2. Captura o valor do campo 'valorCaptacaoReferenciaAnterior' enviado na requisi√ß√£o\r",
											"var valorCaptacaoReferenciaAnteriorMatch = pm.request.body.raw.match(/\"valorCaptacaoReferenciaAnterior\":\\s*([\\d.]+)/);\r",
											"\r",
											"if (valorCaptacaoReferenciaAnteriorMatch) {\r",
											"    var valorCaptacaoReferenciaAnterior = valorCaptacaoReferenciaAnteriorMatch[1]; // Extrai o valor do campo como string\r",
											"\r",
											"    // Conta as casas decimais\r",
											"    var casasDecimais = valorCaptacaoReferenciaAnterior.split(\".\")[1]; // Pega a parte ap√≥s o ponto\r",
											"\r",
											"    if (casasDecimais) {\r",
											"        var quantidadeCasasDecimais = casasDecimais.length; // Conta o n√∫mero de casas decimais\r",
											"    } else {\r",
											"        var quantidadeCasasDecimais = 0; // Caso n√£o haja casas decimais\r",
											"    }\r",
											"\r",
											"    // Registra a quantidade de casas decimais no relat√≥rio do Newman\r",
											"    pm.test(`Quantidade de casas decimais no campo 'valorCaptacaoReferenciaAnterior': ${quantidadeCasasDecimais}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra o teste como sucesso\r",
											"    });\r",
											"\r",
											"    // Adiciona logs indicando a valida√ß√£o\r",
											"    var casasDecimaisPermitidas = 1; // Apenas uma casa decimal permitida\r",
											"    if (quantidadeCasasDecimais !== casasDecimaisPermitidas) {\r",
											"        console.log(`Regra violada: O preenchimento do campo 'valorCaptacaoReferenciaAnterior' precisa ter exatamente ${casasDecimaisPermitidas} casa decimal. Valor informado: ${quantidadeCasasDecimais} casas decimais.`);\r",
											"    } else {\r",
											"        console.log(`O valor informado est√° dentro da especifica√ß√£o (${casasDecimaisPermitidas} casa decimal).`);\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Campo 'valorCaptacaoReferenciaAnterior' n√£o encontrado no corpo da requisi√ß√£o.\");\r",
											"}\r",
											"\r",
											"// 3. Valida a mensagem de erro para o campo 'valorCaptacaoReferenciaAnterior'\r",
											"var erro = responseJson.detalhesErro.find(e => e.codigoErro === \"00113\");\r",
											"\r",
											"if (erro) {\r",
											"    pm.test(`Erro ${erro.codigoErro}: ${erro.mensagemErro}`, function () {\r",
											"        pm.expect(true).to.eql(true); // Apenas registra no relat√≥rio sem causar falha\r",
											"    });\r",
											"\r",
											"    // Log detalhado no console\r",
											"    console.log(`Erro detectado: C√≥digo ${erro.codigoErro}, Mensagem: ${erro.mensagemErro}`);\r",
											"} else {\r",
											"    console.log(\"Erro 00113 n√£o encontrado na resposta da API.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 1234567891123456.377\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "funcional",
					"item": [
						{
							"name": "1_FGC405 - IncluirContribui√ß√£o(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o c√≥digo de status HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status √© 200 ou 201\r",
											"});\r",
											"\r",
											"try {\r",
											"    // Parse a resposta JSON\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    // Extraia o valor de codigoTransacao\r",
											"    const codigoTransacao = response.codigoTransacao;\r",
											"\r",
											"    // Extraia o valor de numeroControle dentro de data > competencias[0] > protocoloRecebimento\r",
											"    const numeroControle = response.data.competencias[0].protocoloRecebimento.numeroControle;\r",
											"\r",
											"    // Extraia o valor do cnpj do corpo da requisi√ß√£o\r",
											"    const requestBody = JSON.parse(pm.request.body.raw); // Parse o body da requisi√ß√£o\r",
											"    const cnpj = requestBody.data.cnpj;\r",
											"\r",
											"    // Salve os valores como vari√°veis globais\r",
											"    pm.globals.set(\"var_codigoTransacao\", codigoTransacao);\r",
											"    pm.globals.set(\"var_numeroControle\", numeroControle);\r",
											"    pm.globals.set(\"var_cnpj\", cnpj);\r",
											"\r",
											"    // Exiba no console os valores gerados\r",
											"    console.log(\"Valor gerado no codigoTransacao:\", codigoTransacao);\r",
											"    console.log(\"Valor gerado no numeroControle:\", numeroControle);\r",
											"    console.log(\"Valor gerado no CNPJ:\", cnpj);\r",
											"\r",
											"} catch (e) {\r",
											"    console.error(\"Erro ao processar a resposta ou o request JSON:\", e);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado no ambiente como \"randomCodigoTransacao\"\r",
											"pm.environment.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados no ambiente do Postman\r",
											"pm.environment.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.environment.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.environment.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"apitesting@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 9079335420.26,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 1207656446.94,\r\n                                \"valorReferencia\": 8585370777.53,\r\n                                \"valorCaptacaoReferenciaAnterior\": 11405530851.40\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - idContribuicao_codigoTransacao_existente(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida√ß√£o de c√≥digo HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 422\", function() {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"\r",
											"// Valida√ß√£o de erro 00027 - codigoTransacao j√° existente\r",
											"pm.test(\"Erro 00027 - codigoTransacao j√° existente\", function() {\r",
											"    var responseJson = pm.response.json();\r",
											"    var erro27 = responseJson.detalhesErro.find(erro => erro.codigoErro === \"00027\");\r",
											"    pm.expect(erro27).to.exist;\r",
											"    pm.expect(erro27.mensagemErro).to.eql(\r",
											"        \"Conte√∫do informado no atributo [codigoTransacao] j√° existente, este deve ser √∫nico por mensagem enviada.\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f338706\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"teste.teste@teste.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405 - validar_Schema(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se o c√≥digo de status √© 422 (Unprocessable Entity)\r",
											"pm.test(\"Validar c√≥digo de status 422\", function () {\r",
											"    pm.response.to.have.status(422);  // Verifica que o status √© 422\r",
											"});\r",
											"\r",
											"// Validar a estrutura do corpo da requisi√ß√£o com o schema\r",
											"pm.test(\"Validar estrutura do corpo da requisi√ß√£o\", function () {\r",
											"    const schema = {\r",
											"        \r",
											"        \"$id\": \"http://example.com/example.json\",\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"status\": {\r",
											"                \"type\": \"string\",\r",
											"                \"examples\": [\"success\"]\r",
											"            },\r",
											"            \"data\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"codigoTransacao\",\r",
											"                    \"codigoLeiaute\",\r",
											"                    \"versaoLeiaute\"\r",
											"                ],\r",
											"                \"properties\": {\r",
											"                    \"codigoTransacao\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"examples\": [\"h02d5347-719g-5e65-667d-22811f422672\"]\r",
											"                    },\r",
											"                    \"codigoLeiaute\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"examples\": [\"FGC405\"]\r",
											"                    },\r",
											"                    \"versaoLeiaute\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"examples\": [\"1\"]\r",
											"                    },\r",
											"                    \"cnpj\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"examples\": [\"60701190\"]\r",
											"                    },\r",
											"                    \"parte\": {\r",
											"                        \"type\": \"string\",\r",
											"                        \"examples\": [\"teste jd\"]\r",
											"                    },\r",
											"                    \"contato\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\"nome\", \"telefone\", \"email\"],\r",
											"                        \"properties\": {\r",
											"                            \"nome\": {\r",
											"                                \"type\": \"string\",\r",
											"                                \"examples\": [\"teste\"]\r",
											"                            },\r",
											"                            \"telefone\": {\r",
											"                                \"type\": \"string\",\r",
											"                                \"examples\": [\"11999999999\"]\r",
											"                            },\r",
											"                            \"email\": {\r",
											"                                \"type\": \"string\",\r",
											"                                \"examples\": [\"teste.teste@teste.com\"]\r",
											"                            }\r",
											"                        }\r",
											"                    },\r",
											"                    \"contribuicao\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"required\": [\"competencias\"],\r",
											"                        \"properties\": {\r",
											"                            \"competencias\": {\r",
											"                                \"type\": \"array\",\r",
											"                                \"items\": {\r",
											"                                    \"type\": \"object\",\r",
											"                                    \"required\": [\"mmCompetencia\", \"baseCompetencia\", \"tipoBaseContribuicao\"],\r",
											"                                    \"properties\": {\r",
											"                                        \"mmCompetencia\": {\r",
											"                                            \"type\": \"string\",\r",
											"                                            \"examples\": [\"202410\"]\r",
											"                                        },\r",
											"                                        \"baseCompetencia\": {\r",
											"                                            \"type\": \"string\",\r",
											"                                            \"examples\": [\"202411\"]\r",
											"                                        },\r",
											"                                        \"tipoBaseContribuicao\": {\r",
											"                                            \"type\": \"string\",\r",
											"                                            \"examples\": [\"1\"]\r",
											"                                        }\r",
											"                                    }\r",
											"                                }\r",
											"                            }\r",
											"                        }\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    };\r",
											"\r",
											"\r",
											"\r",
											"    // Verificar se o corpo da resposta √© v√°lido conforme o schema\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta √© um JSON\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Exibir cabe√ßalhos de envio e resposta\", function () {\r",
											"    // Cabe√ßalhos de envio\r",
											"    var requestHeaders = pm.request.headers.all();\r",
											"    console.log(\"Cabe√ßalhos de envio:\");\r",
											"    requestHeaders.forEach(function(header) {\r",
											"        console.log(header.key + \": \" + header.value);\r",
											"    });\r",
											"\r",
											"    // Cabe√ßalhos de resposta\r",
											"    var responseHeaders = pm.response.headers.all();\r",
											"    console.log(\"Cabe√ßalhos de resposta:\");\r",
											"    responseHeaders.forEach(function(header) {\r",
											"        console.log(header.key + \": \" + header.value);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f422672\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"@@@@@@@@@\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202410\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888444\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 134100.98,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 200.12,\r\n                                \"valorReferencia\": 5000.22,\r\n                                \"valorCaptacaoReferenciaAnterior\": 3500.33\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888555\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 7437580.87\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888888666\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 1253232.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "2_FGC406 - consultar_contribuicao(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleat√≥ria\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra min√∫scula 'a' a 'z'\r",
											"\r",
											"// Gera 6 n√∫meros aleat√≥rios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 d√≠gitos\r",
											"\r",
											"// Combina letra e n√∫meros\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na vari√°vel \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/contribuicoes/valorContribuicao?cnpj={{var_cnpj}}&numeroControle={{var_numeroControle}}&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3_FGC406 - validar_schema(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Valida se o status HTTP √© 200 ou 201\r",
											"pm.test(\"‚úÖ Validar status HTTP 200 ou 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera uma letra aleat√≥ria\r",
											"const randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26)); // letra min√∫scula 'a' a 'z'\r",
											"\r",
											"// Gera 6 n√∫meros aleat√≥rios\r",
											"const randomNumbers = Math.floor(100000 + Math.random() * 900000); // 6 d√≠gitos\r",
											"\r",
											"// Combina letra e n√∫meros\r",
											"const newCodigoTransacao = `h02d5347-719g-5e65-667d-22811${randomLetter}${randomNumbers}`;\r",
											"\r",
											"// Armazena na vari√°vel \"var_new_codTransacao\"\r",
											"pm.environment.set(\"var_new_codTransacao\", newCodigoTransacao);\r",
											"\r",
											"console.log(\"New codigoTransacao:\", newCodigoTransacao);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/contribuicoes/valorContribuicao?cnpj={{var_cnpj}}&numeroControle={{var_numeroControle}}&codigoTransacao={{var_new_codTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_new_codTransacao}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4_FGC406 - consultar_contribuicao_existente(-)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica o status HTTP\r",
											"pm.test(\"Valida o c√≥digo de status HTTP\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"// Verifica a mensagem de erro\r",
											"pm.test(\"Valida a mensagem de erro\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.detalhesErro).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    const erroDetalhes = jsonData.detalhesErro[0];\r",
											"    pm.expect(erroDetalhes.mensagemErro).to.eql(\r",
											"        \"Conte√∫do informado no par√¢metro de entrada [codigoTransacao] j√° existente, este deve ser √∫nico por mensagem enviada.\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/contribuicoes/valorContribuicao?cnpj={{var_cnpj}}&numeroControle={{var_numeroControle}}&codigoTransacao={{var_codigoTransacao}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"valorContribuicao"
									],
									"query": [
										{
											"key": "cnpj",
											"value": "{{var_cnpj}}"
										},
										{
											"key": "numeroControle",
											"value": "{{var_numeroControle}}"
										},
										{
											"key": "codigoTransacao",
											"value": "{{var_codigoTransacao}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negocio",
					"item": [
						{
							"name": "FGC405_CT1 - IncluirContribui√ß√£o_sem_adicional(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o c√≥digo de status HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status √© 200 ou 201\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \"Silvio Aulik\",\r\n            \"telefone\": \"1194977027\",\r\n            \"email\": \"apitesting@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 2196437422.61,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 264768946.34,\r\n                                \"valorReferencia\": 1967309107.67,\r\n                                \"valorCaptacaoReferenciaAnterior\": 2091503547.84\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_CT2 - IncluirContribui√ß√£o_com_adicional(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o c√≥digo de status HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status √© 200 ou 201\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \"Silvio Aulik\",\r\n            \"telefone\": \"1194977029\",\r\n            \"email\": \"apitesting@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 9079335420.26,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 1207656446.94,\r\n                                \"valorReferencia\": 8585370777.53,\r\n                                \"valorCaptacaoReferenciaAnterior\": 11405530851.40\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_CT3 - IncluirContribui√ß√£o_com_tipo_2_ DPGE I+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o c√≥digo de status HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status √© 200 ou 201\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"apitesting@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 9079335420.26,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 1207656446.94,\r\n                                \"valorReferencia\": 8585370777.53,\r\n                                \"valorCaptacaoReferenciaAnterior\": 11405530851.40\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "FGC405_CT3 - IncluirContribui√ß√£o_com_tipo_4_ DPGE II(+)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Teste para verificar o c√≥digo de status HTTP\r",
											"pm.test(\"C√≥digo HTTP √© 200 ou 201\", function() {\r",
											"    pm.expect([200, 201]).to.include(pm.response.code); // Verifica se o status √© 200 ou 201\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o codigoTransacao\r",
											"var randomNumberTransacao = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumberTransacao = randomNumberTransacao.toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar o n√∫mero gerado na vari√°vel \"randomCodigoTransacao\"\r",
											"pm.variables.set(\"randomCodigoTransacao\", formattedNumberTransacao);\r",
											"\r",
											"// Mostrar no console o valor gerado para o codigoTransacao\r",
											"console.log(\"N√∫mero aleat√≥rio C√≥digoTransacao: \" + formattedNumberTransacao);\r",
											"\r",
											"// Gerar n√∫mero aleat√≥rio de 6 d√≠gitos para o idContribuicao1\r",
											"var randomNumber1 = Math.floor(Math.random() * 1000000);\r",
											"\r",
											"// Garantir que o n√∫mero tenha 6 d√≠gitos (completa com zeros √† esquerda, se necess√°rio)\r",
											"var formattedNumber1 = randomNumber1.toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao2 como o n√∫mero subsequente ao idContribuicao1\r",
											"var formattedNumber2 = (parseInt(formattedNumber1) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Gerar idContribuicao3 como o n√∫mero subsequente ao idContribuicao2\r",
											"var formattedNumber3 = (parseInt(formattedNumber2) + 1).toString().padStart(6, '0');\r",
											"\r",
											"// Armazenar os n√∫meros gerados nas vari√°veis do Postman\r",
											"pm.variables.set(\"idContribuicao1\", formattedNumber1);\r",
											"pm.variables.set(\"idContribuicao2\", formattedNumber2);\r",
											"pm.variables.set(\"idContribuicao3\", formattedNumber3);\r",
											"\r",
											"// Mostrar no console os valores gerados (opcional para depura√ß√£o)\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao1: \" + formattedNumber1);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao2: \" + formattedNumber2);\r",
											"console.log(\"N√∫mero aleat√≥rio idContribuicao3: \" + formattedNumber3);\r",
											"\r",
											"\r",
											"// üîπ calculo do mes de competencia\r",
											"function calcularMmCompetencia() {\r",
											"    let hoje = new Date();\r",
											"    hoje.setMonth(hoje.getMonth() - 1); // Retrocede 1 m√™s\r",
											"\r",
											"    let ano = hoje.getFullYear();\r",
											"    let mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Garante dois d√≠gitos no m√™s\r",
											"\r",
											"    let mmCompetencia = `${ano}${mes}`;\r",
											"    console.log(\"Valor gerado para mmCompetencia:\", mmCompetencia); // Log para debug\r",
											"    return mmCompetencia;\r",
											"}\r",
											"\r",
											"// Define a vari√°vel no ambiente ativo\r",
											"let mmCompetencia = calcularMmCompetencia();\r",
											"pm.environment.set(\"mmCompetencia\", mmCompetencia); // Define no ambiente ativo\r",
											"console.log(\"mmCompetencia atualizada para:\", pm.environment.get(\"mmCompetencia\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Id",
										"value": "3c727e1915196c95574714020ec1d68b",
										"type": "text"
									},
									{
										"key": "X-IBM-Client-Secret",
										"value": "771ce925a57cfb03b5888e9346326df9",
										"type": "text"
									},
									{
										"key": "X-Client-Certificate",
										"value": "testevanessa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"h02d5347-719g-5e65-667d-22811f{{randomCodigoTransacao}}\",\r\n    \"data\": {\r\n        \"codigoLeiaute\": \"FGC405\",\r\n        \"versaoLeiaute\": \"1\",\r\n        \"cnpj\": \"60701190\",\r\n        \"parte\": \" teste jd\",\r\n        \"contato\": {\r\n            \"nome\": \" teste\",\r\n            \"telefone\": \"11999999999\",\r\n            \"email\": \"apitesting@fgc.com\"\r\n        },\r\n        \"contribuicao\": {\r\n            \"competencias\": [\r\n                {\r\n                    \"mmCompetencia\": {{mmCompetencia}},\r\n                    \"baseCompetencia\": \"202412\",\r\n                    \"tipoBaseContribuicao\": \"1\",\r\n                    \"baseContribuicoes\": [\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao1}}\",\r\n                            \"tipoContribuicao\": 1,\r\n                            \"valorBaseContribuicao\": 9079335420.26,\r\n                            \"informacaoAdicional\": {\r\n                                \"valorPatrimonioLiquidoAjustado\": 1207656446.94,\r\n                                \"valorReferencia\": 8585370777.53,\r\n                                \"valorCaptacaoReferenciaAnterior\": 11405530851.40\r\n                            }\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao2}}\",\r\n                            \"tipoContribuicao\": 2,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        },\r\n                        {\r\n                            \"idContribuicao\": \"6070119016092024888888{{idContribuicao3}}\",\r\n                            \"tipoContribuicao\": 4,\r\n                            \"valorBaseContribuicao\": 0.00\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/contribuicoes/baseContribuicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contribuicoes",
										"baseContribuicao"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Sprint_4",
			"item": [
				{
					"name": "ifAssociada",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Valida que o status HTTP √© 200\r",
									"pm.test(\"Status HTTP √© 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Secret",
								"value": "f158a2c0f7210a964ee13c6b43505aa0",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Id",
								"value": "cf1ed05d7372e3219d2d1c111af548b3",
								"type": "text"
							},
							{
								"key": "X-Client-Certificate",
								"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/portais/v1/contribuicoes/ifAssociada?codigoTransacao=86b2652c-8a3f-4296-847b-71ef0a6c8c2a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"portais",
								"v1",
								"contribuicoes",
								"ifAssociada"
							],
							"query": [
								{
									"key": "codigoTransacao",
									"value": "86b2652c-8a3f-4296-847b-71ef0a6c8c2a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sem_cod_transacao(-)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Valida que o status HTTP √© 200\r",
									"pm.test(\"Status HTTP √© 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Secret",
								"value": "f158a2c0f7210a964ee13c6b43505aa0",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Id",
								"value": "cf1ed05d7372e3219d2d1c111af548b3",
								"type": "text"
							},
							{
								"key": "X-Client-Certificate",
								"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/portais/v1/contribuicoes/ifAssociada",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"portais",
								"v1",
								"contribuicoes",
								"ifAssociada"
							]
						}
					},
					"response": []
				},
				{
					"name": "tipo-complemento",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Secret",
								"value": "f158a2c0f7210a964ee13c6b43505aa0",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Id",
								"value": "cf1ed05d7372e3219d2d1c111af548b3",
								"type": "text"
							},
							{
								"key": "X-Client-Certificate",
								"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/dominios/v1/contribuicoes/tipo-complemento?codigoTransacao=86b2652c-8a3f-4296-847b-71ef0a6c8c2a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dominios",
								"v1",
								"contribuicoes",
								"tipo-complemento"
							],
							"query": [
								{
									"key": "codigoTransacao",
									"value": "86b2652c-8a3f-4296-847b-71ef0a6c8c2a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "contribuicaoOrigem",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Secret",
								"value": "f158a2c0f7210a964ee13c6b43505aa0",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Id",
								"value": "cf1ed05d7372e3219d2d1c111af548b3",
								"type": "text"
							},
							{
								"key": "X-Client-Certificate",
								"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/portais/v1/contribuicoes/contribuicaoOrigem?codigoTransacao=86b2652c-8a3f-4296-847b-71ef0a6c8c2a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"portais",
								"v1",
								"contribuicoes",
								"contribuicaoOrigem"
							],
							"query": [
								{
									"key": "codigoTransacao",
									"value": "86b2652c-8a3f-4296-847b-71ef0a6c8c2a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tipo-contribuicao",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Secret",
								"value": "f158a2c0f7210a964ee13c6b43505aa0",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Id",
								"value": "cf1ed05d7372e3219d2d1c111af548b3",
								"type": "text"
							},
							{
								"key": "X-Client-Certificate",
								"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/dominios/v1/contribuicoes/tipo-contribuicao?codigoTransacao=86b2652c-8a3f-4296-847b-71ef0a6c8c2a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dominios",
								"v1",
								"contribuicoes",
								"tipo-contribuicao"
							],
							"query": [
								{
									"key": "codigoTransacao",
									"value": "86b2652c-8a3f-4296-847b-71ef0a6c8c2a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "status-lancamento",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Secret",
								"value": "f158a2c0f7210a964ee13c6b43505aa0",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Id",
								"value": "cf1ed05d7372e3219d2d1c111af548b3",
								"type": "text"
							},
							{
								"key": "X-Client-Certificate",
								"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/dominios/v1/contribuicoes/status-lancamento?codigoTransacao=86b2652c-8a3f-4296-847b-71ef0a6c8c2a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dominios",
								"v1",
								"contribuicoes",
								"status-lancamento"
							],
							"query": [
								{
									"key": "codigoTransacao",
									"value": "86b2652c-8a3f-4296-847b-71ef0a6c8c2a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "selic/taxas-mensais",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Secret",
								"value": "f158a2c0f7210a964ee13c6b43505aa0",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Id",
								"value": "cf1ed05d7372e3219d2d1c111af548b3",
								"type": "text"
							},
							{
								"key": "X-Client-Certificate",
								"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/selic/v1/taxas-mensais?dataInicio=202408&dataFim=202412&codigoTransacao=86b2652c-8a3f-4296-847b-71ef0a6c8c2a&pageSize=5&page=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"selic",
								"v1",
								"taxas-mensais"
							],
							"query": [
								{
									"key": "dataInicio",
									"value": "202408"
								},
								{
									"key": "dataFim",
									"value": "202412"
								},
								{
									"key": "codigoTransacao",
									"value": "86b2652c-8a3f-4296-847b-71ef0a6c8c2a"
								},
								{
									"key": "pageSize",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "modals/contribuicoes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Secret",
								"value": "f158a2c0f7210a964ee13c6b43505aa0",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Id",
								"value": "cf1ed05d7372e3219d2d1c111af548b3",
								"type": "text"
							},
							{
								"key": "X-Client-Certificate",
								"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/portais/v1/contribuicoes/modals/contribuicoes?COD_BASE_CONTRIBUICAO_MENSAL=13162",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"portais",
								"v1",
								"contribuicoes",
								"modals",
								"contribuicoes"
							],
							"query": [
								{
									"key": "COD_BASE_CONTRIBUICAO_MENSAL",
									"value": "13162"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "dynamic/combo",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Secret",
								"value": "f158a2c0f7210a964ee13c6b43505aa0",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Id",
								"value": "cf1ed05d7372e3219d2d1c111af548b3",
								"type": "text"
							},
							{
								"key": "X-Client-Certificate",
								"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/portais/v1/contribuicoes/dynamic/combo?COD_RAIZ_CNPJ_IFA=33588252",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"portais",
								"v1",
								"contribuicoes",
								"dynamic",
								"combo"
							],
							"query": [
								{
									"key": "COD_RAIZ_CNPJ_IFA",
									"value": "33588252"
								},
								{
									"key": "ANO_MES_COMPETENCIA_DE",
									"value": "2024-10",
									"disabled": true
								},
								{
									"key": "ANO_MES_COMPETENCIA_ATE",
									"value": "2024-10",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "modals/multas",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Secret",
								"value": "f158a2c0f7210a964ee13c6b43505aa0",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Id",
								"value": "cf1ed05d7372e3219d2d1c111af548b3",
								"type": "text"
							},
							{
								"key": "X-Client-Certificate",
								"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/portais/v1/contribuicoes/modals/multas?COD_BASE_CONTRIBUICAO_MENSAL=11659",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"portais",
								"v1",
								"contribuicoes",
								"modals",
								"multas"
							],
							"query": [
								{
									"key": "COD_BASE_CONTRIBUICAO_MENSAL",
									"value": "11659"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "modals/retificacoes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Secret",
								"value": "f158a2c0f7210a964ee13c6b43505aa0",
								"type": "text"
							},
							{
								"key": "X-IBM-Client-Id",
								"value": "cf1ed05d7372e3219d2d1c111af548b3",
								"type": "text"
							},
							{
								"key": "X-Client-Certificate",
								"value": "MIIIBzCCBe+gAwIBAgIIJEEs7UWEsa4wDQYJKoZIhvcNAQELBQAwdDELMAkGA1UEBhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEgZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMgVkFMSUQgUkZCIHY1MB4XDTI0MDYxMzIxMjY1NFoXDTI1MDYxMzIxMjY1NFowggETMQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxEjAQBgNVBAcTCVNBTyBQQVVMTzETMBEGA1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRhIEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEExMSMwIQYDVQQLExpBUiBXRCBDRVJUSUZJQ0FDQU8gRElHSVRBTDEZMBcGA1UECxMQVmlkZW9jb25mZXJlbmNpYTEXMBUGA1UECxMOMzY1MTk5NTAwMDAxNzQxJTAjBgNVBAMTHEJBTkNPIENTRiBTIEE6MDgzNTcyNDAwMDAxNTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCnAeoGRwbF1IJTNqV7n+97o6NRv+JgDcK+8mNaP1zFIHqfDzcxpz/bJVCowj3DK3xDdXYH3O92U/7Xf41AzsS0kIbsQB1Q09FZ5qdUMgcAhNgQGzsp1KTzWad7h3ewQwqmunYI7mFf0B0zt9JmFdHrFzXMydyRGhDVzIYxbZ8bfkFDqHm47eJw3TUnzSq1k/ZbGYsWd3wIB/nAt/mReepPixAfr4jACIT9LGLOi9fgQ330dSDvOGXw3n6o8SqNKlqsi01kKwDwpnknC7JGUZLd1oFMkN0akt5XjrfcPtdE6Bq45Z+/0wlYcYtLMBK9Q4XVtXaCt8FkGkZgcdjdjr35AgMBAAGjggL6MIIC9jCBnAYIKwYBBQUHAQEEgY8wgYwwVQYIKwYBBQUHMAKGSWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvYWMtdmFsaWRyZmJ2NS5wN2IwMwYIKwYBBQUHMAGGJ2h0dHA6Ly9vY3NwdjUudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5icjAJBgNVHRMEAjAAMB8GA1UdIwQYMBaAFFPLpeR1UJlALL5bFUXJvsswqonFMHAGA1UdIARpMGcwZQYGYEwBAgElMFswWQYIKwYBBQUHAgEWTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvZHBjLWFjLXZhbGlkcmZidjUucGRmMIG2BgNVHR8Ega4wgaswU6BRoE+GTWh0dHA6Ly9pY3AtYnJhc2lsLnZhbGlkY2VydGlmaWNhZG9yYS5jb20uYnIvYWMtdmFsaWRyZmIvbGNyLWFjLXZhbGlkcmZidjUuY3JsMFSgUqBQhk5odHRwOi8vaWNwLWJyYXNpbDIudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2NS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDCBzgYDVR0RBIHGMIHDgSx2aXZpYW5fdmVyeV9ndWVkZXNfZGVfb2xpdmVpcmFAY2FycmVmb3VyLmNvbaA4BgVgTAEDBKAvBC0wODA0MTk4NzM1MzQ4NjIyODc3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgJQYFYEwBAwKgHAQaUkFGQUVMIEJBTkRFSVJBIERFIEFMTUVJREGgGQYFYEwBAwOgEAQOMDgzNTcyNDAwMDAxNTCgFwYFYEwBAwegDgQMMDAwMDAwMDAwMDAwMA0GCSqGSIb3DQEBCwUAA4ICAQCToTQjbJMYoZI+Mr5jlGaQVQNZapPaMKz0RX+N53vew+J6tJ3wlkjLpN+wPddgUDR7TI4B2JIu4MZGgUS8EETeAVZsEZ6nt7QXtQgRnq/z34TC912ftH3im85ADEGN4COAXcEVM4P1kUkCFg6PECLvphDe7x+UXLHMCrvgqhcfEgGtqU7LXeoFpweqC8CoNWfL0qy1KYE3V2ytkVpoYTc4e7P4LlKe4FyTPF8KW7KwxY7z32VtmpE6nmRfg9I+Hki8lyC/rSjVdqt53j9g9+foSscACD4/fas9twfmSejMqvJcyEPC9X4C3OnZc8c4F7C+aq9RJ2TOqAj61jd5bKExgZ+dSoMNFTvJVnRg1PXIsf681ppIhQnjfB18IwPboGrPNr7TmA5Rqq2qdvWLHh/deKzZpx5Y0FeM8qv/GzM22XycAJdo9i3vxIoDvW0Gqas0H7SW0EsC1yVPWa/xXXMC7ZetNDn8A4R4J0wX0GXIv49bAUZrUCv++rmLwzIXQz8jj5lU9osUOCSeSUAyAzw3Dgplfb1KldjOHEwlJLk4HezmXYEL/FxvJfdsYOLAKGNdr8Co1rnHxF+WOuNauLasfMgd7EZKZr4TP2QOKehHaJPL04PPqyfO1PKtLsKk6QFPwcxxLquGKcDl4nURc1qeq7qGshZuLeJZNqDGH0xf3A==",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/portais/v1/contribuicoes/modals/retificacoes?COD_BASE_CONTRIBUICAO_MENSAL=11659",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"portais",
								"v1",
								"contribuicoes",
								"modals",
								"retificacoes"
							],
							"query": [
								{
									"key": "COD_BASE_CONTRIBUICAO_MENSAL",
									"value": "11659"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sprint_7",
			"item": [
				{
					"name": "1 - Contribui√ß√µes -> Relat√≥rios -> Provis√£o/Recebimento Cont√°bil",
					"item": [
						{
							"name": "1 - Contribui√ß√µes -> Relat√≥rios -> Provis√£o/Recebimento Cont√°bil - Provis√£o",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar status code 200\r",
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2Ô∏è‚É£ Validar a estrutura do JSON e exibir pagina√ß√£o no console\r",
											"pm.test(\"A resposta cont√©m os campos esperados\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData).to.have.property(\"paginacao\");\r",
											"    \r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"totalRegistros\");\r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"totalPaginas\");\r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"totalRegistroPagina\");\r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"paginaCorrente\");\r",
											"\r",
											"    // Exibir informa√ß√µes da pagina√ß√£o no console\r",
											"    console.log(\"üìå PAGINA√á√ÉO:\");\r",
											"    console.log(\"üîπ Total de Registros:\", jsonData.paginacao.totalRegistros);\r",
											"    console.log(\"üîπ Total de P√°ginas:\", jsonData.paginacao.totalPaginas);\r",
											"    console.log(\"üîπ Registros por P√°gina:\", jsonData.paginacao.totalRegistroPagina);\r",
											"    console.log(\"üîπ P√°gina Atual:\", jsonData.paginacao.paginaCorrente);\r",
											"});\r",
											"\r",
											"// 3Ô∏è‚É£ Validar que nenhum campo essencial esteja vazio ou nulo\r",
											"pm.test(\"Nenhum campo essencial deve estar vazio ou nulo\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item.numeroLote).to.not.be.null;\r",
											"        pm.expect(item.numeroLote).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.cnpj).to.not.be.null;\r",
											"        pm.expect(item.cnpj).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.instituicao).to.not.be.null;\r",
											"        pm.expect(item.instituicao).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.anoMesBaseCompetencia).to.not.be.null;\r",
											"        pm.expect(item.anoMesBaseCompetencia).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.valorBaseCalculo).to.not.be.null;\r",
											"        pm.expect(item.valorBaseCalculo).to.be.a(\"number\");\r",
											"\r",
											"        pm.expect(item.valorLancamentoContabil).to.not.be.null;\r",
											"        pm.expect(item.valorLancamentoContabil).to.be.a(\"number\");\r",
											"\r",
											"        pm.expect(item.tipoContribuicao).to.not.be.null;\r",
											"        pm.expect(item.tipoContribuicao).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.tipoLancamento).to.not.be.null;\r",
											"        pm.expect(item.tipoLancamento).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.dataLancamento).to.not.be.null;\r",
											"        pm.expect(item.dataLancamento).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.contaCredito).to.not.be.null;\r",
											"        pm.expect(item.contaCredito).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.contaDebito).to.not.be.null;\r",
											"        pm.expect(item.contaDebito).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.ROW_NUMBER).to.not.be.null;\r",
											"        pm.expect(item.ROW_NUMBER).to.be.a(\"number\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// 4Ô∏è‚É£ Validar tipos de dados dos campos\r",
											"pm.test(\"Os tipos de dados est√£o corretos\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    \r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item.numeroLote).to.be.a(\"number\");\r",
											"        pm.expect(item.cnpj).to.be.a(\"string\");\r",
											"        pm.expect(item.instituicao).to.be.a(\"string\");\r",
											"        pm.expect(item.anoMesBaseCompetencia).to.be.a(\"string\");\r",
											"        pm.expect(item.valorBaseCalculo).to.be.a(\"number\");\r",
											"        pm.expect(item.valorLancamentoContabil).to.be.a(\"number\");\r",
											"        pm.expect(item.tipoContribuicao).to.be.a(\"string\");\r",
											"        pm.expect(item.tipoLancamento).to.be.a(\"string\");\r",
											"        pm.expect(item.dataLancamento).to.be.a(\"string\");\r",
											"        pm.expect(item.contaCredito).to.be.a(\"string\");\r",
											"        pm.expect(item.contaDebito).to.be.a(\"string\");\r",
											"        pm.expect(item.ROW_NUMBER).to.be.a(\"number\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// 5Ô∏è‚É£ Validar pagina√ß√£o\r",
											"pm.test(\"Valida pagina√ß√£o\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData.paginacao.totalRegistroPagina).to.equal(5);\r",
											"    pm.expect(jsonData.paginacao.paginaCorrente).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.paginacao.totalPaginas).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.paginacao.totalRegistros).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/integracao-contabil/relatorios/provisoes-caixas?tipoLancamento=1&tipoContribuicao=&dataLancamentoInicio=2024-12-01&dataLancamentoFinal=2024-12-31&page=1&pageSize=5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"integracao-contabil",
										"relatorios",
										"provisoes-caixas"
									],
									"query": [
										{
											"key": "tipoLancamento",
											"value": "1"
										},
										{
											"key": "tipoContribuicao",
											"value": ""
										},
										{
											"key": "dataLancamentoInicio",
											"value": "2024-12-01"
										},
										{
											"key": "dataLancamentoFinal",
											"value": "2024-12-31"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1 - Contribui√ß√µes -> Relat√≥rios -> Provis√£o - tipoLancamento_zero(-)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar status code 200\r",
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2Ô∏è‚É£ Validar a estrutura do JSON e exibir pagina√ß√£o no console\r",
											"pm.test(\"A resposta cont√©m os campos esperados\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"paginacao\");\r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"totalRegistros\");\r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"totalPaginas\");\r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"totalRegistroPagina\");\r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"paginaCorrente\");\r",
											"\r",
											"    // Exibir informa√ß√µes da pagina√ß√£o no console\r",
											"    console.log(\"üìå PAGINA√á√ÉO:\");\r",
											"    console.log(\"üîπ Total de Registros:\", jsonData.paginacao.totalRegistros);\r",
											"    console.log(\"üîπ Total de P√°ginas:\", jsonData.paginacao.totalPaginas);\r",
											"    console.log(\"üîπ Registros por P√°gina:\", jsonData.paginacao.totalRegistroPagina);\r",
											"    console.log(\"üîπ P√°gina Atual:\", jsonData.paginacao.paginaCorrente);\r",
											"});\r",
											"\r",
											"// 3Ô∏è‚É£ Validar que o tipoLancamento seja \"zero\" (situa√ß√£o sem registros)\r",
											"pm.test(\"Validar que tipoLancamento seja zero\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.paginacao.totalRegistros, \"Total de registros deve ser 0\").to.equal(0);\r",
											"    pm.expect(jsonData.paginacao.totalPaginas, \"Total de p√°ginas deve ser 0\").to.equal(0);\r",
											"    pm.expect(jsonData.paginacao.totalRegistroPagina, \"Total de registros por p√°gina deve ser 0\").to.equal(0);\r",
											"    pm.expect(jsonData.paginacao.paginaCorrente, \"P√°gina corrente deve ser 1\").to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/integracao-contabil/relatorios/provisoes-caixas?tipoLancamento=0&tipoContribuicao=&dataLancamentoInicio=2024-12-01&dataLancamentoFinal=2024-12-31&page=1&pageSize=5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"integracao-contabil",
										"relatorios",
										"provisoes-caixas"
									],
									"query": [
										{
											"key": "tipoLancamento",
											"value": "0"
										},
										{
											"key": "tipoContribuicao",
											"value": ""
										},
										{
											"key": "dataLancamentoInicio",
											"value": "2024-12-01"
										},
										{
											"key": "dataLancamentoFinal",
											"value": "2024-12-31"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1 - Contribui√ß√µes -> Relat√≥rios -> Provis√£o - tipoLancamento_letra(-)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Verificar se a resposta retornou erro 500 e exibir mensagem no console\r",
											"pm.test(\"Validar que a API retornou erro 500 se informar letra (Internal Server Error)\", function () {\r",
											"    pm.expect(pm.response.code, \"A API deveria retornar 500\").to.equal(500);\r",
											"\r",
											"    console.log(\"‚úÖ Erro 500 detectado corretamente!\");\r",
											"    console.log(\"üîπ Endpoint:\", pm.request.url);\r",
											"    console.log(\"üîπ Par√¢metros:\", pm.request.url.query.toJSON());\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"    console.log(\"üîπ Mensagem de erro:\", jsonData.error);\r",
											"    console.log(\"üîπ Caminho da API:\", jsonData.path);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/integracao-contabil/relatorios/provisoes-caixas?tipoLancamento=A&tipoContribuicao=&dataLancamentoInicio=2024-12-01&dataLancamentoFinal=2024-12-31&page=1&pageSize=5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"integracao-contabil",
										"relatorios",
										"provisoes-caixas"
									],
									"query": [
										{
											"key": "tipoLancamento",
											"value": "A"
										},
										{
											"key": "tipoContribuicao",
											"value": ""
										},
										{
											"key": "dataLancamentoInicio",
											"value": "2024-12-01"
										},
										{
											"key": "dataLancamentoFinal",
											"value": "2024-12-31"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1 - Contribui√ß√µes -> Relat√≥rios -> Provis√£o - tipoLancamento_inexistente(-)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Verificar se a resposta retornou erro 500 e exibir mensagem no console\r",
											"pm.test(\"Validar que a API retornou erro 500 para tipoLancamento inexistente (Internal Server Error)\", function () {\r",
											"    pm.expect(pm.response.code, \"A API deveria retornar 500\").to.equal(500);\r",
											"\r",
											"    console.log(\"‚úÖ Erro 500 detectado corretamente!\");\r",
											"    console.log(\"üîπ Endpoint:\", pm.request.url);\r",
											"    console.log(\"üîπ Par√¢metros:\", pm.request.url.query.toJSON());\r",
											"\r",
											"    let jsonData = pm.response.json();\r",
											"    console.log(\"üîπ Mensagem de erro:\", jsonData.error);\r",
											"    console.log(\"üîπ Caminho da API:\", jsonData.path);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/integracao-contabil/relatorios/provisoes-caixas?tipoLancamento=500&tipoContribuicao=&dataLancamentoInicio=2024-12-01&dataLancamentoFinal=2024-12-31&page=1&pageSize=5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"integracao-contabil",
										"relatorios",
										"provisoes-caixas"
									],
									"query": [
										{
											"key": "tipoLancamento",
											"value": "500"
										},
										{
											"key": "tipoContribuicao",
											"value": ""
										},
										{
											"key": "dataLancamentoInicio",
											"value": "2024-12-01"
										},
										{
											"key": "dataLancamentoFinal",
											"value": "2024-12-31"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 - Contribui√ß√µes -> Relat√≥rios -> Provis√£o/Recebimento Cont√°bil - Caixa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar status code 200\r",
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2Ô∏è‚É£ Validar a estrutura do JSON e exibir pagina√ß√£o no console\r",
											"pm.test(\"A resposta cont√©m os campos esperados\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData).to.have.property(\"paginacao\");\r",
											"    \r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"totalRegistros\");\r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"totalPaginas\");\r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"totalRegistroPagina\");\r",
											"    pm.expect(jsonData.paginacao).to.have.property(\"paginaCorrente\");\r",
											"\r",
											"    // Exibir informa√ß√µes da pagina√ß√£o no console\r",
											"    console.log(\"üìå PAGINA√á√ÉO:\");\r",
											"    console.log(\"üîπ Total de Registros:\", jsonData.paginacao.totalRegistros);\r",
											"    console.log(\"üîπ Total de P√°ginas:\", jsonData.paginacao.totalPaginas);\r",
											"    console.log(\"üîπ Registros por P√°gina:\", jsonData.paginacao.totalRegistroPagina);\r",
											"    console.log(\"üîπ P√°gina Atual:\", jsonData.paginacao.paginaCorrente);\r",
											"});\r",
											"\r",
											"// 3Ô∏è‚É£ Validar que nenhum campo essencial esteja vazio ou nulo\r",
											"pm.test(\"Nenhum campo essencial deve estar vazio ou nulo\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item.numeroLote, \"numeroLote n√£o pode ser nulo ou vazio\").to.not.be.null;\r",
											"        pm.expect(item.numeroLote).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.cnpj, \"cnpj n√£o pode ser nulo ou vazio\").to.not.be.null;\r",
											"        pm.expect(item.cnpj).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.instituicao, \"instituicao n√£o pode ser nula ou vazia\").to.not.be.null;\r",
											"        pm.expect(item.instituicao).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.anoMesBaseCompetencia, \"anoMesBaseCompetencia n√£o pode ser nulo ou vazio\").to.not.be.null;\r",
											"        pm.expect(item.anoMesBaseCompetencia).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.valorBaseCalculo, \"valorBaseCalculo deve ser um n√∫mero v√°lido\").to.not.be.null;\r",
											"        pm.expect(item.valorBaseCalculo).to.be.a(\"number\");\r",
											"\r",
											"        pm.expect(item.valorLancamentoContabil, \"valorLancamentoContabil deve ser um n√∫mero v√°lido\").to.not.be.null;\r",
											"        pm.expect(item.valorLancamentoContabil).to.be.a(\"number\");\r",
											"\r",
											"        pm.expect(item.tipoContribuicao, \"tipoContribuicao n√£o pode ser nulo ou vazio\").to.not.be.null;\r",
											"        pm.expect(item.tipoContribuicao).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.tipoLancamento, \"tipoLancamento n√£o pode ser nulo ou vazio\").to.not.be.null;\r",
											"        pm.expect(item.tipoLancamento).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.dataLancamento, \"dataLancamento n√£o pode ser nulo ou vazio\").to.not.be.null;\r",
											"        pm.expect(item.dataLancamento).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.contaCredito, \"contaCredito n√£o pode ser nulo ou vazio\").to.not.be.null;\r",
											"        pm.expect(item.contaCredito).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.contaDebito, \"contaDebito n√£o pode ser nulo ou vazio\").to.not.be.null;\r",
											"        pm.expect(item.contaDebito).to.not.equal(\"\");\r",
											"\r",
											"        pm.expect(item.ROW_NUMBER, \"ROW_NUMBER deve ser um n√∫mero v√°lido\").to.not.be.null;\r",
											"        pm.expect(item.ROW_NUMBER).to.be.a(\"number\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// 4Ô∏è‚É£ Validar tipos de dados dos campos\r",
											"pm.test(\"Os tipos de dados est√£o corretos\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    \r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item.numeroLote).to.be.a(\"number\");\r",
											"        pm.expect(item.cnpj).to.be.a(\"string\");\r",
											"        pm.expect(item.instituicao).to.be.a(\"string\");\r",
											"        pm.expect(item.anoMesBaseCompetencia).to.be.a(\"string\");\r",
											"        pm.expect(item.valorBaseCalculo).to.be.a(\"number\");\r",
											"        pm.expect(item.valorLancamentoContabil).to.be.a(\"number\");\r",
											"        pm.expect(item.tipoContribuicao).to.be.a(\"string\");\r",
											"        pm.expect(item.tipoLancamento).to.be.a(\"string\");\r",
											"        pm.expect(item.dataLancamento).to.be.a(\"string\");\r",
											"        pm.expect(item.contaCredito).to.be.a(\"string\");\r",
											"        pm.expect(item.contaDebito).to.be.a(\"string\");\r",
											"        pm.expect(item.ROW_NUMBER).to.be.a(\"number\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// 5Ô∏è‚É£ Validar pagina√ß√£o\r",
											"pm.test(\"Valida pagina√ß√£o\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData.paginacao.totalRegistroPagina).to.equal(5);\r",
											"    pm.expect(jsonData.paginacao.paginaCorrente).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.paginacao.totalPaginas).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.paginacao.totalRegistros).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"// 6Ô∏è‚É£ Validar se \"tipoLancamento\" cont√©m apenas valores esperados\r",
											"pm.test(\"Todos os itens possuem 'tipoLancamento' como 'Pagamento'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    \r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item.tipoLancamento, \"tipoLancamento deve ser 'Pagamento'\").to.equal(\"Pagamento\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/integracao-contabil/relatorios/provisoes-caixas?tipoLancamento=2&tipoContribuicao=&dataLancamentoInicio=2024-12-01&dataLancamentoFinal=2024-12-31&page=1&pageSize=5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"integracao-contabil",
										"relatorios",
										"provisoes-caixas"
									],
									"query": [
										{
											"key": "tipoLancamento",
											"value": "2"
										},
										{
											"key": "tipoContribuicao",
											"value": ""
										},
										{
											"key": "dataLancamentoInicio",
											"value": "2024-12-01"
										},
										{
											"key": "dataLancamentoFinal",
											"value": "2024-12-31"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2 - Contribui√ß√µes -> Relat√≥rios -> Posi√ß√£o Acumulada",
					"item": [
						{
							"name": "1 - Contribui√ß√µes -> Relat√≥rios -> Posi√ß√£o Acumulada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Recuperar os valores dos par√¢metros da requisi√ß√£o\r",
											"let param_tipoContribuicao = pm.request.url.query.get(\"tipoContribuicao\");\r",
											"let param_inicio = pm.request.url.query.get(\"anoMesCompetenciaInicio\");\r",
											"let param_final = pm.request.url.query.get(\"anoMesCompetenciaFinal\");\r",
											"let param_page = pm.request.url.query.get(\"page\");\r",
											"let param_pageSize = pm.request.url.query.get(\"pageSize\");\r",
											"\r",
											"// 2Ô∏è‚É£ Exibir os par√¢metros no console para facilitar a an√°lise\r",
											"console.log(\"üìå Par√¢metros da requisi√ß√£o:\");\r",
											"console.log(`üîπ tipoContribuicao: ${param_tipoContribuicao}`);\r",
											"console.log(`üîπ anoMesCompetenciaInicio: ${param_inicio}`);\r",
											"console.log(`üîπ anoMesCompetenciaFinal: ${param_final}`);\r",
											"console.log(`üîπ page: ${param_page}`);\r",
											"console.log(`üîπ pageSize: ${param_pageSize}`);\r",
											"\r",
											"// 3Ô∏è‚É£ Obter a resposta JSON da API\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// 4Ô∏è‚É£ Criar array esperado para valida√ß√£o das compet√™ncias\r",
											"let expectedCompetencias = [param_inicio, param_final];\r",
											"\r",
											"// 5Ô∏è‚É£ Teste: Validar status code 200\r",
											"pm.test(\"üü¢ Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 6Ô∏è‚É£ Teste: Validar que a resposta cont√©m a chave 'data' e que √© um array n√£o vazio\r",
											"pm.test(\"üìå A resposta cont√©m a chave 'data' e n√£o est√° vazia\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// 8Ô∏è‚É£ Teste: Validar que todos os objetos dentro de 'data' possuem as chaves esperadas\r",
											"pm.test(\"üìå Todos os objetos dentro de 'data' possuem as chaves esperadas\", function () {\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item).to.include.keys(\"cnpj\", \"instituicao\", \"contaResultado\", \"valorTotalAcumulado\", \"contribuicoes\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// üîü Teste: Validar estrutura do array 'contribuicoes' dentro de cada item\r",
											"pm.test(\"üìå Validar estrutura do array 'contribuicoes' dentro de cada item\", function () {\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item.contribuicoes).to.be.an(\"array\").that.is.not.empty;\r",
											"        item.contribuicoes.forEach(contribuicao => {\r",
											"            pm.expect(contribuicao).to.have.property(\"competencia\").that.is.a(\"string\");\r",
											"            pm.expect(contribuicao).to.have.property(\"valor\").that.is.a(\"number\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// 1Ô∏è‚É£1Ô∏è‚É£ Teste: Validar a estrutura da 'paginacao' e se os valores fazem sentido\r",
											"pm.test(\"üìå Validar estrutura da 'paginacao' e se os valores fazem sentido\", function () {\r",
											"    let paginacao = jsonData.paginacao;\r",
											"    \r",
											"    pm.expect(paginacao).to.have.property(\"totalRegistros\").that.is.a(\"number\");\r",
											"    pm.expect(paginacao).to.have.property(\"totalPaginas\").that.is.a(\"number\");\r",
											"    pm.expect(paginacao).to.have.property(\"totalRegistroPagina\").that.is.a(\"number\");\r",
											"    pm.expect(paginacao).to.have.property(\"paginaCorrente\").that.is.a(\"number\");\r",
											"\r",
											"    // Verifica se os n√∫meros de pagina√ß√£o batem\r",
											"    pm.expect(paginacao.totalRegistros).to.equal(jsonData.data.length);\r",
											"    pm.expect(paginacao.totalRegistroPagina).to.equal(jsonData.data.length);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/integracao-contabil/relatorios/posicoes-acumuladas?tipoContribuicao=1&anoMesCompetenciaInicio=202401&anoMesCompetenciaFinal=202502&page=1&pageSize=5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"integracao-contabil",
										"relatorios",
										"posicoes-acumuladas"
									],
									"query": [
										{
											"key": "tipoContribuicao",
											"value": "1"
										},
										{
											"key": "anoMesCompetenciaInicio",
											"value": "202401"
										},
										{
											"key": "anoMesCompetenciaFinal",
											"value": "202502"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3 - Contribui√ß√µes -> Procurar Tipo Contribui√ß√£o",
					"item": [
						{
							"name": "Funcional",
							"item": [
								{
									"name": "1 - CREATE; Contribui√ß√µes -> Procurar Tipo Contribui√ß√£o; Adicionar",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Gerar n√∫meros aleat√≥rios de 8 d√≠gitos\r",
													"function generateRandomNumber() {\r",
													"    return Math.floor(10000000 + Math.random() * 90000000).toString();\r",
													"}\r",
													"\r",
													"// 2Ô∏è‚É£ Criar as vari√°veis com os valores gerados\r",
													"let var_tipo_contribuicao = \"testqa gft-fgc \" + generateRandomNumber();\r",
													"let var_conta = generateRandomNumber();\r",
													"\r",
													"// 3Ô∏è‚É£ Armazenar no ambiente do Postman\r",
													"pm.environment.set(\"var_tipo_contribuicao\", var_tipo_contribuicao);\r",
													"pm.environment.set(\"var_conta\", var_conta);\r",
													"\r",
													"// 1Ô∏è‚É£ Definir o nome do usu√°rio a partir do pr√≥prio body da requisi√ß√£o\r",
													"let var_nomeUser = \"Silvio Aulik\"; // Defina aqui ou pegue dinamicamente se necess√°rio\r",
													"\r",
													"// 2Ô∏è‚É£ Armazenar no ambiente do Postman\r",
													"pm.environment.set(\"var_nomeUser\", var_nomeUser);\r",
													"\r",
													"// 4Ô∏è‚É£ Exibir no console para confer√™ncia\r",
													"console.log(\"üîπ Tipo Contribui√ß√£o Gerado:\", var_tipo_contribuicao);\r",
													"console.log(\"üîπ Conta Gerada:\", var_conta);\r",
													"console.log(\"‚úÖ Nome do Usu√°rio Armazenado:\", var_nomeUser);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Validar status code 200\r",
													"pm.test(\"Status code √© 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"codigoTransacao\": \"946f-da71-69f0-8da6-24c0\",\r\n    \"data\": {\r\n        \"tipoContribuicao\": \"{{var_tipo_contribuicao}}\",\r\n        \"valorAliquota\": \"0,0001000000\",\r\n        \"centroCusto\": \"3002\",\r\n        \"contaPatrimonial\": \"10970\",\r\n        \"contaResultado\": \"41101\",\r\n        \"nomeUser\": \"Silvio Aulik\",\r\n        \"contaBancaria\": {\r\n            \"codBanco\": \"001\",\r\n            \"numeroAgencia\": \"2807-X\",\r\n            \"contaBancaria\": \"2211-X\",\r\n            \"contaContabio\": \"10010\"\r\n        },\r\n        \"contaCosif\": [\r\n            {\r\n                \"conta\": \"{{var_conta}}\",\r\n                \"descricao\": \"conta 1\",\r\n                \"competenciaInicial\": \"202412\",\r\n                \"competenciaFinal\": \"\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao"
											]
										}
									},
									"response": []
								},
								{
									"name": "2 - RETRIEVE ; Contribui√ß√µes -> Procurar Tipo Contribui√ß√£o; Listagem",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Recuperar o valor armazenado na vari√°vel do ambiente\r",
													"let var_tipo_contribuicao = pm.environment.get(\"var_tipo_contribuicao\");\r",
													"\r",
													"// 2Ô∏è‚É£ Obter a resposta JSON da API\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"// 3Ô∏è‚É£ Buscar o item correspondente ao tipoContribuicao gerado\r",
													"let matchingItem = jsonData.data.find(item => item.tipoContribuicao === var_tipo_contribuicao);\r",
													"\r",
													"if (matchingItem) {\r",
													"    // 4Ô∏è‚É£ Armazenar o c√≥digo correspondente no ambiente do Postman\r",
													"    pm.environment.set(\"var_cod_TipoContribuicao\", matchingItem.codigoTipoContribuicao);\r",
													"\r",
													"    // 5Ô∏è‚É£ Exibir no console para confer√™ncia\r",
													"    console.log(`‚úÖ O valor inserido no campo: tipoContribuicao via CREATE (${var_tipo_contribuicao}) √© id√™ntico ao valor da resposta (${matchingItem.tipoContribuicao}).`);\r",
													"    console.log(`üîπC√≥digo armazenado do campo codigoTipoContribuicao: ${matchingItem.codigoTipoContribuicao}`);\r",
													"} else {\r",
													"    console.log(`‚ùå ERRO: O valor inserido (${var_tipo_contribuicao}) N√ÉO foi encontrado na resposta.`);\r",
													"}\r",
													"\r",
													"// 6Ô∏è‚É£ Criar um teste para validar automaticamente\r",
													"pm.test(\"Validar se o tipoContribuicao enviado est√° na resposta\", function () {\r",
													"    pm.expect(matchingItem, `O valor inserido (${var_tipo_contribuicao}) deve estar na resposta`).to.exist;\r",
													"});\r",
													"\r",
													"// 7Ô∏è‚É£ Criar um teste para validar que o c√≥digo foi armazenado corretamente\r",
													"pm.test(\"Validar que o codigoTipoContribuicao foi armazenado\", function () {\r",
													"    pm.expect(pm.environment.get(\"var_cod_TipoContribuicao\"), \"O c√≥digo do tipoContribuicao deve ser armazenado\").to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"// 5Ô∏è‚É£ Criar um teste para validar automaticamente\r",
													"pm.test(\"Validar se o tipoContribuicao enviado est√° na resposta\", function () {\r",
													"    pm.expect(matchingItem, `O valor inserido (${var_tipo_contribuicao}) deve estar na resposta`).to.exist;\r",
													"});\r",
													"\r",
													"// 1Ô∏è‚É£ Validar status code 200\r",
													"pm.test(\"Status code √© 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao?codigoTransacao=b8d6-374f-070a-1349-705a",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao"
											],
											"query": [
												{
													"key": "codigoTransacao",
													"value": "b8d6-374f-070a-1349-705a"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3 - READ; Contribui√ß√µes -> Procurar Tipo Contribui√ß√£o; Consultar Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Recuperar as vari√°veis armazenadas anteriormente\r",
													"let var_cod_TipoContribuicao = pm.environment.get(\"var_cod_TipoContribuicao\");\r",
													"let var_tipo_contribuicao = pm.environment.get(\"var_tipo_contribuicao\");\r",
													"\r",
													"// 2Ô∏è‚É£ Obter a resposta JSON da API\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"// 3Ô∏è‚É£ Acessar os valores retornados corretamente\r",
													"let returned_cod_TipoContribuicao = jsonData.data.codigoTipoContribuicao;\r",
													"let returned_tipo_contribuicao = jsonData.data.tipoContribuicao;\r",
													"\r",
													"// 4Ô∏è‚É£ Buscar o √∫ltimo c√≥digoContribuicaoCosif da lista (o mais atualizado)\r",
													"let contaCosifArray = jsonData.data.contaCosif;\r",
													"let returned_codigoContribuicaoCosif = contaCosifArray[contaCosifArray.length - 1]?.codigoContribuicaoCosif;\r",
													"\r",
													"// 5Ô∏è‚É£ Exibir os valores no console\r",
													"console.log(\"‚úÖ Valida√ß√£o de valores gerados vs. valores retornados:\");\r",
													"console.log(`üîπ C√≥digo Tipo Contribui√ß√£o esperado: ${var_cod_TipoContribuicao}, retornado: ${returned_cod_TipoContribuicao}`);\r",
													"console.log(`üîπ Tipo Contribui√ß√£o esperado: ${var_tipo_contribuicao}, retornado: ${returned_tipo_contribuicao}`);\r",
													"\r",
													"// 6Ô∏è‚É£ Armazenar o √∫ltimo c√≥digoContribuicaoCosif no ambiente do Postman\r",
													"if (returned_codigoContribuicaoCosif) {\r",
													"    pm.environment.set(\"var_codigoContribuicaoCosif_atualizado\", returned_codigoContribuicaoCosif);\r",
													"    console.log(`‚úÖ √öltimo C√≥digo Contribui√ß√£o Cosif atualizado e armazenado: ${returned_codigoContribuicaoCosif}`);\r",
													"} else {\r",
													"    console.log(\"‚ùå ERRO: Nenhum c√≥digoContribuicaoCosif encontrado na resposta.\");\r",
													"}\r",
													"\r",
													"// 7Ô∏è‚É£ Criar testes para validar automaticamente se os valores correspondem\r",
													"pm.test(\"Validar que o c√≥digoTipoContribuicao gerado √© igual ao retornado\", function () {\r",
													"    pm.expect(returned_cod_TipoContribuicao, \"O c√≥digoTipoContribuicao retornado deve ser igual ao armazenado\").to.equal(parseInt(var_cod_TipoContribuicao));\r",
													"});\r",
													"\r",
													"pm.test(\"Validar que o tipoContribuicao gerado √© igual ao retornado\", function () {\r",
													"    pm.expect(returned_tipo_contribuicao, \"O tipoContribuicao retornado deve ser igual ao armazenado\").to.equal(var_tipo_contribuicao);\r",
													"});\r",
													"\r",
													"pm.test(\"Validar que o √∫ltimo codigoContribuicaoCosif foi armazenado corretamente\", function () {\r",
													"    pm.expect(pm.environment.get(\"var_codigoContribuicaoCosif_atualizado\"), \"O √∫ltimo c√≥digoContribuicaoCosif deve ser armazenado\").to.exist;\r",
													"});\r",
													"\r",
													"// 8Ô∏è‚É£ Validar status code 200\r",
													"pm.test(\"Status code √© 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao/{{var_cod_TipoContribuicao}}?codigoTransacao=08f1-4a58-3d07-cbc8-27a6",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao",
												"{{var_cod_TipoContribuicao}}"
											],
											"query": [
												{
													"key": "codigoTransacao",
													"value": "08f1-4a58-3d07-cbc8-27a6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4 - CRUD UPDATE; Contribui√ß√µes -> Procurar Tipo Contribui√ß√£o; Salvar Edi√ß√£o",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Fun√ß√£o para gerar n√∫meros aleat√≥rios de 8 d√≠gitos\r",
													"function generateRandomNumber() {\r",
													"    return Math.floor(10000000 + Math.random() * 90000000).toString();\r",
													"}\r",
													"\r",
													"// 2Ô∏è‚É£ Criar a nova vari√°vel para conta atualizada\r",
													"let var_conta_update = generateRandomNumber();\r",
													"\r",
													"// 3Ô∏è‚É£ Armazenar no ambiente do Postman\r",
													"pm.environment.set(\"var_conta_update\", var_conta_update);\r",
													"\r",
													"// 4Ô∏è‚É£ Exibir no console para confer√™ncia\r",
													"console.log(\"üîπ Nova Conta para Atualiza√ß√£o Gerada:\", var_conta_update);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"codigoTransacao\": \"946f-da71-69f0-8da6-24c0\",\r\n    \"data\": {\r\n        \"codigoTipoContribuicao\": {{var_cod_TipoContribuicao}},\r\n        \"tipoContribuicao\": \"{{var_tipo_contribuicao}}\",\r\n        \"valorAliquota\": \"0,0001000000\",\r\n        \"centroCusto\": \"3002\",\r\n        \"contaPatrimonial\": \"10970\",\r\n        \"contaResultado\": \"41101\",\r\n        \"nomeUser\": \"{{var_nomeUser}}\",\r\n        \"userAlteracao\": \"usr alteracao; Silvio QG Tester\",\r\n        \"contaBancaria\": {\r\n            \"codBanco\": \"001\",\r\n            \"numeroAgencia\": \"2807-X\",\r\n            \"contaBancaria\": \"2211-X\",\r\n            \"contaContabio\": \"10010\"\r\n        },\r\n        \"contaCosif\": [\r\n            {\r\n                \"codigoContribuicaoCosif\": {{var_codigoContribuicaoCosif}},\r\n                \"codigoContribuicao\": {{var_cod_TipoContribuicao}},\r\n                \"conta\": \"{{var_conta}}\",\r\n                \"descricao\": \"conta 1\",\r\n                \"competenciaInicial\": \"202412\",\r\n                \"competenciaFinal\": \"\"\r\n            },\r\n            {\r\n                \"conta\": \"{{var_conta_update}}\",\r\n                \"descricao\": \"conta 2; no updt\",\r\n                \"competenciaInicial\": \"202412\",\r\n                \"competenciaFinal\": \"\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao?codigoTransacao=70d5-a882-6177-3ad4-2cec",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao"
											],
											"query": [
												{
													"key": "codigoTransacao",
													"value": "70d5-a882-6177-3ad4-2cec"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3 - READ NEW UPDATE; Contribui√ß√µes -> Procurar Tipo Contribui√ß√£o; Consultar",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Recuperar as vari√°veis armazenadas anteriormente\r",
													"let var_cod_TipoContribuicao = pm.environment.get(\"var_cod_TipoContribuicao\");\r",
													"let var_tipo_contribuicao = pm.environment.get(\"var_tipo_contribuicao\");\r",
													"\r",
													"// 2Ô∏è‚É£ Obter a resposta JSON da API\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"// 3Ô∏è‚É£ Acessar os valores retornados corretamente\r",
													"let returned_cod_TipoContribuicao = jsonData.data.codigoTipoContribuicao;\r",
													"let returned_tipo_contribuicao = jsonData.data.tipoContribuicao;\r",
													"\r",
													"// 4Ô∏è‚É£ Buscar o √∫ltimo c√≥digoContribuicaoCosif da lista (o mais atualizado)\r",
													"let contaCosifArray = jsonData.data.contaCosif;\r",
													"let returned_codigoContribuicaoCosif = contaCosifArray[contaCosifArray.length - 1]?.codigoContribuicaoCosif;\r",
													"\r",
													"// 5Ô∏è‚É£ Exibir os valores no console\r",
													"console.log(\"‚úÖ Valida√ß√£o de valores gerados vs. valores retornados:\");\r",
													"console.log(`üîπ C√≥digo Tipo Contribui√ß√£o esperado: ${var_cod_TipoContribuicao}, retornado: ${returned_cod_TipoContribuicao}`);\r",
													"console.log(`üîπ Tipo Contribui√ß√£o esperado: ${var_tipo_contribuicao}, retornado: ${returned_tipo_contribuicao}`);\r",
													"\r",
													"// 6Ô∏è‚É£ Armazenar o √∫ltimo c√≥digoContribuicaoCosif no ambiente do Postman\r",
													"if (returned_codigoContribuicaoCosif) {\r",
													"    pm.environment.set(\"var_codigoContribuicaoCosif_atualizado\", returned_codigoContribuicaoCosif);\r",
													"    console.log(`‚úÖ √öltimo C√≥digo Contribui√ß√£o Cosif atualizado e armazenado: ${returned_codigoContribuicaoCosif}`);\r",
													"} else {\r",
													"    console.log(\"‚ùå ERRO: Nenhum c√≥digoContribuicaoCosif encontrado na resposta.\");\r",
													"}\r",
													"\r",
													"// 7Ô∏è‚É£ Criar testes para validar automaticamente se os valores correspondem\r",
													"pm.test(\"Validar que o c√≥digoTipoContribuicao gerado √© igual ao retornado\", function () {\r",
													"    pm.expect(returned_cod_TipoContribuicao, \"O c√≥digoTipoContribuicao retornado deve ser igual ao armazenado\").to.equal(parseInt(var_cod_TipoContribuicao));\r",
													"});\r",
													"\r",
													"pm.test(\"Validar que o tipoContribuicao gerado √© igual ao retornado\", function () {\r",
													"    pm.expect(returned_tipo_contribuicao, \"O tipoContribuicao retornado deve ser igual ao armazenado\").to.equal(var_tipo_contribuicao);\r",
													"});\r",
													"\r",
													"pm.test(\"Validar que o √∫ltimo codigoContribuicaoCosif foi armazenado corretamente\", function () {\r",
													"    pm.expect(pm.environment.get(\"var_codigoContribuicaoCosif_atualizado\"), \"O √∫ltimo c√≥digoContribuicaoCosif deve ser armazenado\").to.exist;\r",
													"});\r",
													"\r",
													"// 8Ô∏è‚É£ Validar status code 200\r",
													"pm.test(\"Status code √© 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao/{{var_cod_TipoContribuicao}}?codigoTransacao=08f1-4a58-3d07-cbc8-27a6",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao",
												"{{var_cod_TipoContribuicao}}"
											],
											"query": [
												{
													"key": "codigoTransacao",
													"value": "08f1-4a58-3d07-cbc8-27a6"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negocio",
							"item": [
								{
									"name": "3 - CRUD CREATE; Contribui√ß√µes -> Procurar Tipo Contribui√ß√£o existente(+)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Validar que o status code seja 400\r",
													"pm.test(\"‚úÖ Deve retornar 400 Bad Request para tipo de contribui√ß√£o duplicado\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// 2Ô∏è‚É£ Validar que a resposta cont√©m a mensagem esperada (tratando como texto)\r",
													"pm.test(\"‚úÖ Deve mostrar que a contribui√ß√£o j√° existe.\", function () {\r",
													"    let responseText = pm.response.text(); // Obt√©m a resposta como texto\r",
													"    pm.expect(responseText).to.include(\"J√° existe um tipo de contribui√ß√£o com este nome cadastrado.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"codigoTransacao\": \"946f-da71-69f0-8da6-24c0\",\r\n    \"data\": {\r\n        \"tipoContribuicao\": \"review spt7\",\r\n        \"valorAliquota\": \"0,000100000\",\r\n        \"centroCusto\": \"3002\",\r\n        \"contaPatrimonial\": \"10970\",\r\n        \"contaResultado\": \"41101\",\r\n        \"nomeUser\": \"Jean Bruno Souto Villete\",\r\n        \"contaBancaria\": {\r\n            \"codBanco\": \"001\",\r\n            \"numeroAgencia\": \"2807-X\",\r\n            \"contaBancaria\": \"2211-X\",\r\n            \"contaContabio\": \"10010\"\r\n        },\r\n        \"contaCosif\": [\r\n            {\r\n                \"conta\": \"90953260\",\r\n                \"descricao\": \"conta 1\",\r\n                \"competenciaInicial\": \"202412\",\r\n                \"competenciaFinal\": \"\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao"
											]
										}
									},
									"response": []
								},
								{
									"name": "1 - CRUD LIST; Contribui√ß√µes -> Procurar Tipo Contribui√ß√£o; Listagem",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao?codigoTransacao=b8d6-374f-070a-1349-705a",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao"
											],
											"query": [
												{
													"key": "codigoTransacao",
													"value": "b8d6-374f-070a-1349-705a"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4 - CRUD UPDATE; Contribui√ß√µes -> Procurar Tipo Contribui√ß√£o; conta Cosif existente(-)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valida status 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Valida mensagem de erro\", function () {\r",
													"    pm.response.text().includes(\"A conta Cosif de numero 90953170 j√° foi cadastrada no banco\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"codigoTransacao\": \"946f-da71-69f0-8da6-24c0\",\r\n    \"data\": {\r\n        \"codigoTipoContribuicao\": 7,\r\n        \"tipoContribuicao\": \"review spt7\",\r\n        \"valorAliquota\": \"0,0001000000\",\r\n        \"centroCusto\": \"3002\",\r\n        \"contaPatrimonial\": \"10970\",\r\n        \"contaResultado\": \"41101\",\r\n        \"nomeUser\": \"Jean Bruno Souto Villete\",\r\n        \"userAlteracao\": \"usr alteracao; roberto\",\r\n        \"contaBancaria\": {\r\n            \"codBanco\": \"001\",\r\n            \"numeroAgencia\": \"2807-X\",\r\n            \"contaBancaria\": \"2211-X\",\r\n            \"contaContabio\": \"10010\"\r\n        },\r\n        \"contaCosif\": [\r\n            {\r\n                \"codigoContribuicaoCosif\": 79,\r\n                \"codigoContribuicao\": 7,\r\n                \"conta\": \"90953260\",\r\n                \"descricao\": \"conta 1\",\r\n                \"competenciaInicial\": \"202412\",\r\n                \"competenciaFinal\": \"\"\r\n            },\r\n            {\r\n                \"conta\": \"90953170\",\r\n                \"descricao\": \"conta 2; no updt\",\r\n                \"competenciaInicial\": \"202412\",\r\n                \"competenciaFinal\": \"\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao?codigoTransacao=70d5-a882-6177-3ad4-2cec",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao"
											],
											"query": [
												{
													"key": "codigoTransacao",
													"value": "70d5-a882-6177-3ad4-2cec"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Unitario",
							"item": [
								{
									"name": "1 - CREATE; Contribui√ß√µes -> Tipo Contribui√ß√£o; maior_70(-)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Gerar n√∫meros aleat√≥rios de 8 d√≠gitos\r",
													"function generateRandomNumber() {\r",
													"    return Math.floor(10000000 + Math.random() * 90000000).toString();\r",
													"}\r",
													"\r",
													"// 2Ô∏è‚É£ Criar as vari√°veis com os valores gerados\r",
													"let var_tipo_contribuicao = \"testqa gft-fgc \" + generateRandomNumber();\r",
													"let var_conta = generateRandomNumber();\r",
													"\r",
													"// 3Ô∏è‚É£ Armazenar no ambiente do Postman\r",
													"pm.environment.set(\"var_tipo_contribuicao\", var_tipo_contribuicao);\r",
													"pm.environment.set(\"var_conta\", var_conta);\r",
													"\r",
													"// 1Ô∏è‚É£ Definir o nome do usu√°rio a partir do pr√≥prio body da requisi√ß√£o\r",
													"let var_nomeUser = \"Silvio Aulik\"; // Defina aqui ou pegue dinamicamente se necess√°rio\r",
													"\r",
													"// 2Ô∏è‚É£ Armazenar no ambiente do Postman\r",
													"pm.environment.set(\"var_nomeUser\", var_nomeUser);\r",
													"\r",
													"// 4Ô∏è‚É£ Exibir no console para confer√™ncia\r",
													"console.log(\"üîπ Tipo Contribui√ß√£o Gerado:\", var_tipo_contribuicao);\r",
													"console.log(\"üîπ Conta Gerada:\", var_conta);\r",
													"console.log(\"‚úÖ Nome do Usu√°rio Armazenado:\", var_nomeUser);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"/// Verifica se a resposta tem c√≥digo 500\r",
													"pm.test(\"C√≥digo HTTP deve ser 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"// Captura o corpo da resposta\r",
													"let response;\r",
													"try {\r",
													"    response = pm.response.json();\r",
													"} catch (e) {\r",
													"    response = {};\r",
													"}\r",
													"\r",
													"// Captura o corpo da requisi√ß√£o enviada\r",
													"let requestBody;\r",
													"try {\r",
													"    requestBody = JSON.parse(pm.request.body.raw);\r",
													"} catch (e) {\r",
													"    requestBody = {};\r",
													"}\r",
													"\r",
													"// üîπ **Novo caminho para pegar 'tipoContribuicao' corretamente**\r",
													"let tipoContribuicao = requestBody?.data?.tipoContribuicao ?? \"N√ÉO INFORMADO\";\r",
													"\r",
													"// üîπ **Conta os caracteres informados**\r",
													"let quantidadeCaracteres = tipoContribuicao !== \"N√ÉO INFORMADO\" ? tipoContribuicao.toString().length : 0;\r",
													"\r",
													"// **Criando testes para exibir no relat√≥rio do Newman**\r",
													"pm.test(`Valor informado no campo tipoContribuicao: ${tipoContribuicao}`, function () {\r",
													"    pm.expect(tipoContribuicao).to.not.eql(\"N√ÉO INFORMADO\"); \r",
													"});\r",
													"\r",
													"pm.test(`Quantidade de caracteres informados em tipoContribuicao: ${quantidadeCaracteres}`, function () {\r",
													"    pm.expect(quantidadeCaracteres).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"// **Se a API retornar 201, vamos capturar isso no relat√≥rio do Newman para debug**\r",
													"if (pm.response.code === 201) {\r",
													"    pm.test(\"‚ö†Ô∏è [DEBUG] API retornou 201 no Newman (deveria ser 500)\", function () {\r",
													"        pm.expect(pm.response.code).to.eql(500);\r",
													"    });\r",
													"}\r",
													"\r",
													"// Valida que 'tipoContribuicao' tem mais de 70 caracteres\r",
													"if (quantidadeCaracteres > 70) {\r",
													"    pm.test(`'tipoContribuicao' possui mais de 70 caracteres (${quantidadeCaracteres})`, function () {\r",
													"        pm.expect(quantidadeCaracteres).to.be.above(70);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"codigoTransacao\": \"946f-da71-69f0-8da6-24c0\",\r\n    \"data\": {\r\n        \"tipoContribuicao\": \"111111111111111111111111111111111111111111121112111111111111111111111711\",\r\n        \"valorAliquota\": \"0,0001000000\",\r\n        \"centroCusto\": \"3002\",\r\n        \"contaPatrimonial\": \"10970\",\r\n        \"contaResultado\": \"41101\",\r\n        \"nomeUser\": \"Silvio Aulik\",\r\n        \"contaBancaria\": {\r\n            \"codBanco\": \"001\",\r\n            \"numeroAgencia\": \"2807-X\",\r\n            \"contaBancaria\": \"2211-X\",\r\n            \"contaContabio\": \"10010\"\r\n        },\r\n        \"contaCosif\": [\r\n            {\r\n                \"conta\": \"{{var_conta}}\",\r\n                \"descricao\": \"conta 1\",\r\n                \"competenciaInicial\": \"202412\",\r\n                \"competenciaFinal\": \"\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao"
											]
										}
									},
									"response": []
								},
								{
									"name": "1 - CREATE; Contribui√ß√µes ->; valorAliquota_letra(-)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Gerar n√∫meros aleat√≥rios de 8 d√≠gitos\r",
													"function generateRandomNumber() {\r",
													"    return Math.floor(10000000 + Math.random() * 90000000).toString();\r",
													"}\r",
													"\r",
													"// 2Ô∏è‚É£ Criar as vari√°veis com os valores gerados\r",
													"let var_tipo_contribuicao = \"testqa gft-fgc \" + generateRandomNumber();\r",
													"let var_conta = generateRandomNumber();\r",
													"\r",
													"// 3Ô∏è‚É£ Armazenar no ambiente do Postman\r",
													"pm.environment.set(\"var_tipo_contribuicao\", var_tipo_contribuicao);\r",
													"pm.environment.set(\"var_conta\", var_conta);\r",
													"\r",
													"// 1Ô∏è‚É£ Definir o nome do usu√°rio a partir do pr√≥prio body da requisi√ß√£o\r",
													"let var_nomeUser = \"Silvio Aulik\"; // Defina aqui ou pegue dinamicamente se necess√°rio\r",
													"\r",
													"// 2Ô∏è‚É£ Armazenar no ambiente do Postman\r",
													"pm.environment.set(\"var_nomeUser\", var_nomeUser);\r",
													"\r",
													"// 4Ô∏è‚É£ Exibir no console para confer√™ncia\r",
													"console.log(\"üîπ Tipo Contribui√ß√£o Gerado:\", var_tipo_contribuicao);\r",
													"console.log(\"üîπ Conta Gerada:\", var_conta);\r",
													"console.log(\"‚úÖ Nome do Usu√°rio Armazenado:\", var_nomeUser);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Capturar o valor enviado no campo 'tipoContribuicao'\r",
													"let tipoContribuicao = pm.request.body.raw.match(/\"tipoContribuicao\":\\s*\"([^\"]*)\"/)[1]; // Extrai o valor entre aspas\r",
													"\r",
													"// 2Ô∏è‚É£ Contar a quantidade de caracteres\r",
													"let quantidadeCaracteres = tipoContribuicao.length;\r",
													"\r",
													"// 3Ô∏è‚É£ Exibir no console do Postman\r",
													"console.log(`üìå Quantidade de caracteres informados em 'tipoContribuicao': ${quantidadeCaracteres}`);\r",
													"\r",
													"// 4Ô∏è‚É£ Validar que o status code √© 400 e n√£o tratar como falha inesperada\r",
													"pm.test(\"‚úÖ API deve retornar 400 quando 'tipoContribuicao' excede 70 caracteres\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(400, \"Esperado erro 400 para valor inv√°lido\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"codigoTransacao\": \"946f-da71-69f0-8da6-24c0\",\r\n    \"data\": {   \r\n        \"tipoContribuicao\": \"{{var_tipo_contribuicao}}\",\r\n        \"valorAliquota\": \"A\",\r\n        \"centroCusto\": \"3002\",\r\n        \"contaPatrimonial\": \"10970\",\r\n        \"contaResultado\": \"41101\",\r\n        \"nomeUser\": \"Silvio Aulik\",\r\n        \"contaBancaria\": {\r\n            \"codBanco\": \"001\",\r\n            \"numeroAgencia\": \"2807-X\",\r\n            \"contaBancaria\": \"2211-X\",\r\n            \"contaContabio\": \"10010\"\r\n        },\r\n        \"contaCosif\": [\r\n            {\r\n                \"conta\": \"{{var_conta}}\",\r\n                \"descricao\": \"conta 1\",\r\n                \"competenciaInicial\": \"202412\",\r\n                \"competenciaFinal\": \"\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao"
											]
										}
									},
									"response": []
								},
								{
									"name": "1 - CREATE; Contribui√ß√µes -> centroCusto_letra(-)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Gerar n√∫meros aleat√≥rios de 8 d√≠gitos\r",
													"function generateRandomNumber() {\r",
													"    return Math.floor(10000000 + Math.random() * 90000000).toString();\r",
													"}\r",
													"\r",
													"// 2Ô∏è‚É£ Criar as vari√°veis com os valores gerados\r",
													"let var_tipo_contribuicao = \"testqa gft-fgc \" + generateRandomNumber();\r",
													"let var_conta = generateRandomNumber();\r",
													"\r",
													"// 3Ô∏è‚É£ Armazenar no ambiente do Postman\r",
													"pm.environment.set(\"var_tipo_contribuicao\", var_tipo_contribuicao);\r",
													"pm.environment.set(\"var_conta\", var_conta);\r",
													"\r",
													"// 1Ô∏è‚É£ Definir o nome do usu√°rio a partir do pr√≥prio body da requisi√ß√£o\r",
													"let var_nomeUser = \"Silvio Aulik\"; // Defina aqui ou pegue dinamicamente se necess√°rio\r",
													"\r",
													"// 2Ô∏è‚É£ Armazenar no ambiente do Postman\r",
													"pm.environment.set(\"var_nomeUser\", var_nomeUser);\r",
													"\r",
													"// 4Ô∏è‚É£ Exibir no console para confer√™ncia\r",
													"console.log(\"üîπ Tipo Contribui√ß√£o Gerado:\", var_tipo_contribuicao);\r",
													"console.log(\"üîπ Conta Gerada:\", var_conta);\r",
													"console.log(\"‚úÖ Nome do Usu√°rio Armazenado:\", var_nomeUser);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Capturar o valor enviado no campo 'centroCusto'\r",
													"let centroCusto = pm.request.body.raw.match(/\"centroCusto\":\\s*\"([^\"]*)\"/)[1];\r",
													"\r",
													"// 2Ô∏è‚É£ Criar um caso de teste para exibir no Newman\r",
													"pm.test(`üìå Valor enviado para 'centroCusto': ${centroCusto}`, function () {\r",
													"    pm.expect(centroCusto).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"// 3Ô∏è‚É£ Criar um caso de teste para validar o status 500\r",
													"pm.test(\"‚úÖ Validar se o campo CentroCusto aceita letras\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"codigoTransacao\": \"946f-da71-69f0-8da6-24c0\",\r\n    \"data\": {\r\n        \"tipoContribuicao\": \"{{var_tipo_contribuicao}}\",\r\n        \"valorAliquota\": \"0,0001000000\",\r\n        \"centroCusto\": \"A\",\r\n        \"contaPatrimonial\": \"10970\",\r\n        \"contaResultado\": \"41101\",\r\n        \"nomeUser\": \"Silvio Tadeu Aulik\",\r\n        \"contaBancaria\": {\r\n            \"codBanco\": \"001\",\r\n            \"numeroAgencia\": \"2807-X\",\r\n            \"contaBancaria\": \"2211-X\",\r\n            \"contaContabio\": \"10010\"\r\n        },\r\n        \"contaCosif\": [\r\n            {\r\n                \"conta\": \"{{var_conta}}\",\r\n                \"descricao\": \"conta 1\",\r\n                \"competenciaInicial\": \"202412\",\r\n                \"competenciaFinal\": \"\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao"
											]
										}
									},
									"response": []
								},
								{
									"name": "1 - CREATE; Contribui√ß√µes -> contraPatrimonial_tam_maior_5(-)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Gerar n√∫meros aleat√≥rios de 8 d√≠gitos\r",
													"function generateRandomNumber() {\r",
													"    return Math.floor(10000000 + Math.random() * 90000000).toString();\r",
													"}\r",
													"\r",
													"// 2Ô∏è‚É£ Criar as vari√°veis com os valores gerados\r",
													"let var_tipo_contribuicao = \"testqa gft-fgc \" + generateRandomNumber();\r",
													"let var_conta = generateRandomNumber();\r",
													"\r",
													"// 3Ô∏è‚É£ Armazenar no ambiente do Postman\r",
													"pm.environment.set(\"var_tipo_contribuicao\", var_tipo_contribuicao);\r",
													"pm.environment.set(\"var_conta\", var_conta);\r",
													"\r",
													"// 1Ô∏è‚É£ Definir o nome do usu√°rio a partir do pr√≥prio body da requisi√ß√£o\r",
													"let var_nomeUser = \"Silvio Aulik\"; // Defina aqui ou pegue dinamicamente se necess√°rio\r",
													"\r",
													"// 2Ô∏è‚É£ Armazenar no ambiente do Postman\r",
													"pm.environment.set(\"var_nomeUser\", var_nomeUser);\r",
													"\r",
													"// 4Ô∏è‚É£ Exibir no console para confer√™ncia\r",
													"console.log(\"üîπ Tipo Contribui√ß√£o Gerado:\", var_tipo_contribuicao);\r",
													"console.log(\"üîπ Conta Gerada:\", var_conta);\r",
													"console.log(\"‚úÖ Nome do Usu√°rio Armazenado:\", var_nomeUser);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1Ô∏è‚É£ Capturar o valor enviado no campo 'contaPatrimonial'\r",
													"let contaPatrimonial = pm.request.body.raw.match(/\"contaPatrimonial\":\\s*\"([^\"]*)\"/)[1];\r",
													"\r",
													"// 2Ô∏è‚É£ Contar a quantidade de caracteres\r",
													"let quantidadeCaracteres = contaPatrimonial.length;\r",
													"\r",
													"// 3Ô∏è‚É£ Criar um caso de teste para exibir no Newman e no console\r",
													"pm.test(`üìå Valor enviado para 'contaPatrimonial': ${contaPatrimonial} | Quantidade de caracteres: ${quantidadeCaracteres}`, function () {\r",
													"    console.log(`üìå Valor enviado para 'contaPatrimonial': ${contaPatrimonial} | Quantidade de caracteres: ${quantidadeCaracteres}`);\r",
													"    pm.expect(contaPatrimonial).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"// 4Ô∏è‚É£ Criar um caso de teste para validar o tamanho m√°ximo permitido\r",
													"pm.test(\"üö® Validar se o campo contaPatrimonial aceita mais de 5 caracteres\", function () {\r",
													"    pm.expect(quantidadeCaracteres).to.be.above(5);\r",
													"});\r",
													"\r",
													"// 5Ô∏è‚É£ Criar um caso de teste para validar o status 500\r",
													"pm.test(\"‚úÖ API deve retornar 500 quando 'contaPatrimonial' ultrapassa 5 caracteres\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"codigoTransacao\": \"946f-da71-69f0-8da6-24c0\",\r\n    \"data\": {\r\n        \"tipoContribuicao\": \"{{var_tipo_contribuicao}}\",\r\n        \"valorAliquota\": \"0,0001000000\",\r\n        \"centroCusto\": \"3002\",\r\n        \"contaPatrimonial\": \"1097678\",\r\n        \"contaResultado\": \"41101\",\r\n        \"nomeUser\": \"Silvio Tadeu Aulik\",\r\n        \"contaBancaria\": {\r\n            \"codBanco\": \"001\",\r\n            \"numeroAgencia\": \"2807-X\",\r\n            \"contaBancaria\": \"2211-X\",\r\n            \"contaContabio\": \"10010\"\r\n        },\r\n        \"contaCosif\": [\r\n            {\r\n                \"conta\": \"{{var_conta}}\",\r\n                \"descricao\": \"conta 1\",\r\n                \"competenciaInicial\": \"202412\",\r\n                \"competenciaFinal\": \"\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/portais/v1/contribuicoes/tipo-contribuicao",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portais",
												"v1",
												"contribuicoes",
												"tipo-contribuicao"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "4 - Contribui√ß√µes -> Par√¢metro Geral",
					"item": [
						{
							"name": "1 - CRUD LIST; Contribui√ß√µes -> Par√¢metro Geral; Listagem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar status code 200\r",
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/portais/v1/contribuicoes/parametros-gerais?codigoTransacao=f424-7397-f1ef-42a8&page=1&pageSize=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"portais",
										"v1",
										"contribuicoes",
										"parametros-gerais"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "f424-7397-f1ef-42a8"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 - CRUD READ; Contribui√ß√µes -> Par√¢metro Geral; Consultar Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar status code 200\r",
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/portais/v1/contribuicoes/parametros-gerais/CONTA_CONTABIL_ENCARGOS_DESPESA?codigoTransacao=f424-7397-f1ef-42a8&page=1&pageSize=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"portais",
										"v1",
										"contribuicoes",
										"parametros-gerais",
										"CONTA_CONTABIL_ENCARGOS_DESPESA"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "f424-7397-f1ef-42a8"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3 - CRUD UPDATE; Contribui√ß√µes -> Par√¢metro Geral; Salvar Edi√ß√£o",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Valida se o status da resposta √© 204 (No Content)\r",
											"pm.test(\"Status code √© 204 (No Content)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"// ‚úÖ Valida que a resposta est√° vazia (conforme esperado para 204)\r",
											"pm.test(\"Resposta n√£o cont√©m corpo\", function () {\r",
											"    pm.response.to.not.have.body;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"35b7-7d02-8cb7-804e-3268\",\r\n    \"data\": {\r\n        \"codigoParametro\": \"CONTA_CONTABIL_ENCARGOS_DESPESA\",\r\n        \"nomeParametro\": \"N√∫mero da conta cont√°bil para encargos despesa\",\r\n        \"valorParametro\": \"31097\",\r\n        \"usuario\": \"juliano\",\r\n        \"statusParametro\": \"A\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/portais/v1/contribuicoes/parametros-gerais",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"portais",
										"v1",
										"contribuicoes",
										"parametros-gerais"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5 - Contribui√ß√µes -> Verificar Mem√≥ria C√°lculo",
					"item": [
						{
							"name": "1 - CRUD LIST; Contribui√ß√µes -> Verificar Mem√≥ria C√°lculo; Listagem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar status code 200\r",
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/portais/v1/contribuicoes/memoria-calculo?codigoTransacao=121c-7b5d-9d70-6d61-23b3&codigoRaizCnpjIf=00000000&nomeIf=&competencia=&idContribuicao=&page=1&pageSize=5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"portais",
										"v1",
										"contribuicoes",
										"memoria-calculo"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "121c-7b5d-9d70-6d61-23b3"
										},
										{
											"key": "codigoRaizCnpjIf",
											"value": "00000000"
										},
										{
											"key": "nomeIf",
											"value": ""
										},
										{
											"key": "competencia",
											"value": ""
										},
										{
											"key": "idContribuicao",
											"value": ""
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 - CRUD READ; Contribui√ß√µes -> Verificar Mem√≥ria C√°lculo; Consultar Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar status code 200\r",
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/portais/v1/contribuicoes/memoria-calculo/4541?codigoTransacao=f4f6-4889-53d2-099f-d194",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"portais",
										"v1",
										"contribuicoes",
										"memoria-calculo",
										"4541"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "f4f6-4889-53d2-099f-d194"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3 - COMBO LANDING PAGE; tipo contribui√ß√£o",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar status code 200\r",
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/dominios/v1/contribuicoes/tipo-contribuicao?codigoTransacao=0b9f-b5f5-fc99-8fa5-a7e9",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"dominios",
										"v1",
										"contribuicoes",
										"tipo-contribuicao"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "0b9f-b5f5-fc99-8fa5-a7e9"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4 - COMBO LANDING PAGE; status lan√ßamento",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar status code 200\r",
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/dominios/v1/contribuicoes/status-lancamento?codigoTransacao=49f7-31de-c495-4f6b-c7cf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"dominios",
										"v1",
										"contribuicoes",
										"status-lancamento"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "49f7-31de-c495-4f6b-c7cf"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5 - COMBO LANDING PAGE; tipo complemento",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar status code 200\r",
											"pm.test(\"Status code √© 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Valida se 'C' √© 'Cr√©dito' e 'D' √© 'D√©bito'\", function () {\r",
											"    let response = pm.response.json();  // Converte a resposta para JSON\r",
											"\r",
											"    let validacoes = {\r",
											"        \"C\": \"Cr√©dito\",\r",
											"        \"D\": \"D√©bito\"\r",
											"    };\r",
											"\r",
											"    response.data.forEach(item => {\r",
											"        pm.expect(item.descricao).to.eql(validacoes[item.codigo]);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/dominios/v1/contribuicoes/tipo-complemento?codigoTransacao=bc51-25c6-0f42-28d2-40ac",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"dominios",
										"v1",
										"contribuicoes",
										"tipo-complemento"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "bc51-25c6-0f42-28d2-40ac"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Sprint_8",
			"item": [
				{
					"name": "1 - Contribui√ß√µes -> Consultar Ocorr√™ncias",
					"item": [
						{
							"name": "1 - COMBO LANDING PAGE; tipo ocorr√™ncia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 200 - Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/dominios/v1/contribuicoes/tipo-ocorrencia?codigoTransacao=9b6e-7db2-c1ec-88cb-65e2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"dominios",
										"v1",
										"contribuicoes",
										"tipo-ocorrencia"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "9b6e-7db2-c1ec-88cb-65e2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 - CRUD LIST; Contribui√ß√µes -> Consultar Ocorr√™ncias; bot√£o \"Pesquisar\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 200 - Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/portais/v1/contribuicoes/ocorrencia?codigoTransacao=e1e3-4027-67a5-5cc6-17a4&page=1&pageSize=5&raizCnpjIf=00000000&nomeIf=&dataOcorrencia=&tipoOcorrencia=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"portais",
										"v1",
										"contribuicoes",
										"ocorrencia"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "e1e3-4027-67a5-5cc6-17a4"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										},
										{
											"key": "raizCnpjIf",
											"value": "00000000"
										},
										{
											"key": "nomeIf",
											"value": ""
										},
										{
											"key": "dataOcorrencia",
											"value": ""
										},
										{
											"key": "tipoOcorrencia",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2 - Contribui√ß√µes -> Taxa Selic -> Taxa Selic Di√°ria",
					"item": [
						{
							"name": "1 - CRUD LIST; Contribui√ß√µes -> Taxa Selic -> Taxa Selic Di√°ria; bot√£o \"Pesquisar\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 200 - Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/selic/v1/taxas-diarias?dataInicio=2024-11-01&dataFim=2025-02-20&codigoTransacao=50b6-3529-05ee-62a5&page=1&pageSize=5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"selic",
										"v1",
										"taxas-diarias"
									],
									"query": [
										{
											"key": "dataInicio",
											"value": "2024-11-01"
										},
										{
											"key": "dataFim",
											"value": "2025-02-20"
										},
										{
											"key": "codigoTransacao",
											"value": "50b6-3529-05ee-62a5"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3 - Corporativo -> Pesquisar Institui√ß√£o Financeira BACEN",
					"item": [
						{
							"name": "1 - CRUD LIST; Landing Page; \"select box\" Institui√ß√£o BACEN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 200 - Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/dominios/v1/nome-if?codigoTransacao=ed80-6be7-f636-f0f0-f6cb&nomeIf=&cnpjIf",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"dominios",
										"v1",
										"nome-if"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "ed80-6be7-f636-f0f0-f6cb"
										},
										{
											"key": "nomeIf",
											"value": ""
										},
										{
											"key": "cnpjIf",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 - CRUD LIST; Preenchido formul√°rio, ent√£o a√ß√£o do bot√£o \"Pesquisar\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 200 - Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/contato-bacen/v1/if-bacen-contato?codigoTransacao=cbed-da55-be56-9338-d0f4&raizCnpj=&instituicaoBacen=&situacao=Ativo&segmentacao=&associada=true&lider=false&cadastradaCenso=false&cadastradaCtb=false&page=1&pageSize=5&orderBy=ASC&sortBy=raizCnpj",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contato-bacen",
										"v1",
										"if-bacen-contato"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "cbed-da55-be56-9338-d0f4"
										},
										{
											"key": "raizCnpj",
											"value": ""
										},
										{
											"key": "instituicaoBacen",
											"value": ""
										},
										{
											"key": "situacao",
											"value": "Ativo"
										},
										{
											"key": "segmentacao",
											"value": ""
										},
										{
											"key": "associada",
											"value": "true"
										},
										{
											"key": "lider",
											"value": "false"
										},
										{
											"key": "cadastradaCenso",
											"value": "false"
										},
										{
											"key": "cadastradaCtb",
											"value": "false"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										},
										{
											"key": "orderBy",
											"value": "ASC"
										},
										{
											"key": "sortBy",
											"value": "raizCnpj"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3 - CRUD READ; Encontrado um item da listagem, edita o mesmo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 200 - Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/contato-bacen/v1/if-bacen-contato/00000000?codigoTransacao=9690-8647-4f6d-8576-3ed3",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"contato-bacen",
										"v1",
										"if-bacen-contato",
										"00000000"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "9690-8647-4f6d-8576-3ed3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4 - CRUD INSERT; Cadastrar Institui√ß√£o Financeira -> Cadastrar Institui√ß√£o - Contribui√ß√µes",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"8a58-2e87-486b-b5db-2ab7\",\r\n    \"data\": {\r\n        \"observacao\": \"\",\r\n        \"aceitaCadastro\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "internal-contribuicoes-api-ecs-lb-1410517858.us-east-1.elb.amazonaws.com:1000/api/contato-bacen/v1/if-bacen-contato/if-contribuicao/00080446?codigoTransacao=0a75-8377-bb68-8f9f-54ef&nomeInstituicao=SANTINVEST%20-%20PRUDENCIAL",
									"host": [
										"internal-contribuicoes-api-ecs-lb-1410517858",
										"us-east-1",
										"elb",
										"amazonaws",
										"com"
									],
									"port": "1000",
									"path": [
										"api",
										"contato-bacen",
										"v1",
										"if-bacen-contato",
										"if-contribuicao",
										"00080446"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "0a75-8377-bb68-8f9f-54ef"
										},
										{
											"key": "nomeInstituicao",
											"value": "SANTINVEST%20-%20PRUDENCIAL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5 - CRUD INSERT; Na manuten√ß√£o (edi√ß√£o) de uma institui√ß√£o, preenche o formul√°rio e insere um novo Contato Contribui√ß√£o",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 201 - Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"f865-aff2-b38b-8d9b-7c4h\",\r\n    \"data\": {\r\n        \"raizCnpj\": \"00000000\",\r\n        \"tipoContato\": \"Tecnologia da informa√ß√£o\",\r\n        \"nomeContato\": \"teste jean\",\r\n        \"telefone\": \"11877678423\",\r\n        \"ramal\": 0,\r\n        \"email\": \"teste@teste.com\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "internal-contribuicoes-api-ecs-lb-1410517858.us-east-1.elb.amazonaws.com:1000/api/contato-bacen/v1/if-bacen-contato/contribuicao?codigoTransacao=53aa-3616-ca43-480c-5b2e",
									"host": [
										"internal-contribuicoes-api-ecs-lb-1410517858",
										"us-east-1",
										"elb",
										"amazonaws",
										"com"
									],
									"port": "1000",
									"path": [
										"api",
										"contato-bacen",
										"v1",
										"if-bacen-contato",
										"contribuicao"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "53aa-3616-ca43-480c-5b2e"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6 - CRUD UPDATE; Na manuten√ß√£o (edi√ß√£o) de uma institui√ß√£o, edita o formul√°rio e atualiza um Contato Contribui√ß√£o",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"8e09-0fcf-b31d-ab22-671e\",\r\n    \"data\": {\r\n        \"tipoContato\": \"Tecnologia da Informa√ß√£o\",\r\n        \"nomeContato\": \"Lucia Ferreira\",\r\n        \"telefone\": \"11787987879\",\r\n        \"ramal\": \"321\",\r\n        \"email\": \"lucia.ferreira@fgc.org.br\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "internal-contribuicoes-api-ecs-lb-1410517858.us-east-1.elb.amazonaws.com:1000/api/contato-bacen/v1/if-bacen-contato/contribuicao/20430?codigoTransacao=9a22-68a3-2ae5-7fe3-6d1e",
									"host": [
										"internal-contribuicoes-api-ecs-lb-1410517858",
										"us-east-1",
										"elb",
										"amazonaws",
										"com"
									],
									"port": "1000",
									"path": [
										"api",
										"contato-bacen",
										"v1",
										"if-bacen-contato",
										"contribuicao",
										"20430"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "9a22-68a3-2ae5-7fe3-6d1e"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7 - CRUD DELETE; Na manuten√ß√£o (edi√ß√£o) de uma institui√ß√£o, exclui um Contato Contribui√ß√£o",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "internal-contribuicoes-api-ecs-lb-1410517858.us-east-1.elb.amazonaws.com:1000/api/contato-bacen/v1/if-bacen-contato/contribuicao/20430?codigoTransacao=21d1-4420-8233-1338-4aeb",
									"host": [
										"internal-contribuicoes-api-ecs-lb-1410517858",
										"us-east-1",
										"elb",
										"amazonaws",
										"com"
									],
									"port": "1000",
									"path": [
										"api",
										"contato-bacen",
										"v1",
										"if-bacen-contato",
										"contribuicao",
										"20430"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "21d1-4420-8233-1338-4aeb"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8 - CRUD INSERT; Cadastrar Institui√ß√£o Financeira -> Cadastrar Institui√ß√£o - Censo",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"0340-669e-df22-d949-f027\",\r\n    \"data\": {\r\n        \"observacao\": \"\",\r\n        \"aceitaCadastro\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "internal-contribuicoes-api-ecs-lb-1410517858.us-east-1.elb.amazonaws.com:1000/api/contato-bacen/v1/if-bacen-contato/if-censo/00080446?codigoTransacao=724b-f390-96f2-f2e8-f70f&nomeInstituicao=SANTINVEST%20-%20PRUDENCIAL",
									"host": [
										"internal-contribuicoes-api-ecs-lb-1410517858",
										"us-east-1",
										"elb",
										"amazonaws",
										"com"
									],
									"port": "1000",
									"path": [
										"api",
										"contato-bacen",
										"v1",
										"if-bacen-contato",
										"if-censo",
										"00080446"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "724b-f390-96f2-f2e8-f70f"
										},
										{
											"key": "nomeInstituicao",
											"value": "SANTINVEST%20-%20PRUDENCIAL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9 - CRUD UPDATE; Na manuten√ß√£o (edi√ß√£o) de uma institui√ß√£o, edita o formul√°rio e atualiza um Contato Censo",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"codigoTransacao\": \"bad4-3e8c-3427-42a3-3efg\",\r\n    \"data\": {\r\n        \"tipoContato\": \"Neg√≥cio\",\r\n        \"nome\": \"Roberto; Neg√≥cio\",\r\n        \"email\": \"roberto@mail.com\",\r\n        \"celular\": \"13453243243\",\r\n        \"foneContato1\": \"1132243242\",\r\n        \"foneContato2\": \"1132243242\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "internal-contribuicoes-api-ecs-lb-1410517858.us-east-1.elb.amazonaws.com:1000/api/contato-bacen/v1/if-bacen-contato/censo/00000000?codigoTransacao=bb8f-3644-cf04-3767-ba8f",
									"host": [
										"internal-contribuicoes-api-ecs-lb-1410517858",
										"us-east-1",
										"elb",
										"amazonaws",
										"com"
									],
									"port": "1000",
									"path": [
										"api",
										"contato-bacen",
										"v1",
										"if-bacen-contato",
										"censo",
										"00000000"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "bb8f-3644-cf04-3767-ba8f"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Sprint_9",
			"item": [
				{
					"name": "1 - Concilia√ß√£o Cosif",
					"item": [
						{
							"name": "1 - COMBO LANDING PAGE; combo nome if - associada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 200 - Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/portal/censo/v1/ifAssociada?competencia=202201",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"portal",
										"censo",
										"v1",
										"ifAssociada"
									],
									"query": [
										{
											"key": "competencia",
											"value": "202201"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 - CRUD LIST; Preenchimento formul√°rio, e clicando no bot√£o \"Pesquisar\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 200 - Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/portais/v1/contribuicoes/conciliacao-cosif?pageSize=20&tipoInconcistencia=&page=1&orderBy=desc&codigoTransacao=a48f-7c5b-d878-4a01-1483&competenciaDe=202211&competencia=202211&competenciaAte=202211",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"portais",
										"v1",
										"contribuicoes",
										"conciliacao-cosif"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "tipoInconcistencia",
											"value": ""
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "orderBy",
											"value": "desc"
										},
										{
											"key": "codigoTransacao",
											"value": "a48f-7c5b-d878-4a01-1483"
										},
										{
											"key": "competenciaDe",
											"value": "202211"
										},
										{
											"key": "competencia",
											"value": "202211"
										},
										{
											"key": "competenciaAte",
											"value": "202211"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3 - CRUD READ; Seleciona item da grid; Expande com bot√£o/√≠cone mais (Detalhe) OU Clica no bot√£o/√≠cone Lupa (Detalhar)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 200 - Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/portais/v1/contribuicoes/conciliacao-cosif/detalhe?codigoTransacao=daf4-749e-1e69-fbc9-5ff0&cnpjIf=27214112&competencia=202211&dataConciliacao=2023-03-07%2010:06:50",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"portais",
										"v1",
										"contribuicoes",
										"conciliacao-cosif",
										"detalhe"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "daf4-749e-1e69-fbc9-5ff0"
										},
										{
											"key": "cnpjIf",
											"value": "27214112"
										},
										{
											"key": "competencia",
											"value": "202211"
										},
										{
											"key": "dataConciliacao",
											"value": "2023-03-07%2010:06:50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4 - CRUD UPDATE; Seleciona item da grid; Clica no bot√£o/√≠cone Lupa; Concilia√ß√£o manual",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 200 - Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comentario\": \"teste valida√ß√£o manual\",\r\n    \"nomeUsuario\": \"Maria Cristina Briguenti\",\r\n    \"dataComentario\": \"2025-02-11\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/portais/v1/contribuicoes/conciliacao-cosif/conciliacao-manual/4693",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"portais",
										"v1",
										"contribuicoes",
										"conciliacao-cosif",
										"conciliacao-manual",
										"4693"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 - ACTION; Concilia√ß√£o Cosif; Enviar email",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"data\": {\r\n            \"competencia\": \"202211\",\r\n            \"dataProcessamento\": \"2023-03-07 10:08:04\",\r\n            \"raizCnpj\": \"30306294\",\r\n            \"nomeIf\": \"BANCO BTG PACTUAL S.A.\",\r\n            \"PossuiBase\": \"PRAZO\",\r\n            \"ordinaria\": 1,\r\n            \"dpgeI\": null,\r\n            \"dpgeIg\": null,\r\n            \"checked\": true,\r\n            \"ultimoEnvioEmail\": \"2023-12-28 12:16:18.013\"\r\n        }\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/portais/v1/contribuicoes/conciliacao-cosif/comunicado",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"portais",
										"v1",
										"contribuicoes",
										"conciliacao-cosif",
										"comunicado"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2 - endpoints faltantes",
					"item": [
						{
							"name": "1 - dom√≠nio; tipo cont√°bil",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1Ô∏è‚É£ Validar que a API retorna status 200\r",
											"pm.test(\"‚úÖ API deve retornar 200 - Sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/dominios/v1/contribuicoes/tipo-contabil?codigoTransacao=03dc-0f5b-9495-46b6-6c5d",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"dominios",
										"v1",
										"contribuicoes",
										"tipo-contabil"
									],
									"query": [
										{
											"key": "codigoTransacao",
											"value": "03dc-0f5b-9495-46b6-6c5d"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}