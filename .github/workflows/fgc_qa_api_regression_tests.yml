name: FGC QA API Regression Tests

on:
  # Permitir disparo manual
  workflow_dispatch:

  # Agendar para rodar automaticamente às sextas-feiras às 19:00 UTC
  schedule:
    - cron: "0 22 * * 5"

jobs:
  run-newman:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra
          sudo apt-get install -y python3 python3-pip
          pip3 install matplotlib
          
      - name: Create Reports Directory
        run: mkdir -p ./reports

      - name: Run Postman Collection with QA Environment
        id: run_tests
        continue-on-error: true
        run: |
          newman run qa_fgc_aws_contribuicoes.postman_collections.json \
          -e qa_fgc_aws.postman_environment.json \
          -r cli,htmlextra,json \
          --reporter-json-export ./reports/test_results.json \
          --reporter-htmlextra-export ./reports/qa_test_report.html \
          --reporter-htmlextra-title "FGC QA-AWS Sprints 1 e 3 API Test"
          
      - name: Generate Test Results Pie Chart
        run: |
          python3 <<EOF
          import json
          import matplotlib.pyplot as plt
          # Load Newman JSON report
          with open('./reports/test_results.json') as f:
              data = json.load(f)
          # Extract test results
          total = data['run']['stats']['assertions']['total']
          failed = data['run']['stats']['assertions']['failed']
          passed = total - failed
          # Create pie chart
          labels = ['Passed', 'Failed']
          sizes = [passed, failed]
          colors = ['#4CAF50', '#FF6F61']  # Brighter green and lighter red
          explode = (0.1, 0)  # Highlight the 'Passed' section
          fig, ax = plt.subplots(figsize=(8, 8))
          fig.patch.set_facecolor('black')  # Set the background to black
          wedges, texts, autotexts = ax.pie(
              sizes,
              explode=explode,
              labels=labels,
              colors=colors,
              autopct='%1.1f%%',
              startangle=140,
              shadow=True,  # Add shadow for a 3D effect
              textprops={'color': "white"}
          )
          # Styling the chart
          for text in texts + autotexts:
              text.set_fontsize(12)
              text.set_fontweight('bold')
          ax.set_title("Test Results - API's FGC in QA", pad=20, fontsize=16, color='white')
          ax.set_facecolor('black')  # Set the pie chart background to black
          plt.savefig('./reports/test_results_apis_FGC_in_QA.png', bbox_inches='tight')
          EOF
          
      - name: Verify Report Files
        run: |
          if [ ! -f ./reports/qa_test_report.html ]; then
            echo "Error: HTML report not found!"
            exit 1
          fi
          if [ ! -f ./reports/test_results_apis_FGC_in_QA.png ]; then
            echo "Error: Pie chart not found!"
            exit 1
          fi
          
      - name: Send Report via Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "API Test Report - QA Pipeline"
          body: "Segue anexo o Relatório de Testes em QA, gerado pela pipeline. O e-mail inclui o relatório detalhado dos testes executados e um gráfico com as estatísticas de sucesso e falha."
          to: cristina.briguenti@fgc.org.br,silvio.aulik@gmail.com,rubensperini@yahoo.com.br,vanessa.andrade@fgc.org.br
          from: "FGC QA Regression Test Report - API <silvio.aulik@gmail.com>"
          attachments: ./reports/qa_test_report.html,./reports/test_results_apis_FGC_in_QA.png

      - name: Log Failure
        if: failure()
        run: |
          echo "===================================="
          echo "\ud83d\udea8 Pipeline Failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Verifique os logs em:"
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "===================================="


